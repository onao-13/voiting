{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"printCons\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_pie_chart = _resolveComponent(\"pie-chart\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h1\", _hoisted_1, _toDisplayString(_ctx.event.name), 1 /* TEXT */), _createVNode(_component_pie_chart), _createElementVNode(\"button\", {\n    id: \"no-print\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.print && $options.print(...args)),\n    class: \"btn\"\n  }, \"Скачать в pdf\")]);\n}","map":{"version":3,"mappings":";;EAEMA,EAAE,EAAC;AAAW;;;uBADnBC,oBAIM,cAHLC,oBAAsC,MAAtCC,UAAsC,mBAAjBC,UAAK,CAACC,IAAI,kBAC/BC,aAAYC,uBACZL,oBAAuE;IAA/DF,EAAE,EAAC,UAAU;IAAEQ,OAAK,yCAAEC,yCAAK;IAAEC,KAAK,EAAC;KAAM,eAAa","names":["id","_createElementBlock","_createElementVNode","_hoisted_1","_ctx","name","_createVNode","_component_pie_chart","onClick","$options","class"],"sourceRoot":"","sources":["C:\\Users\\guzny\\OneDrive\\Рабочий стол\\frontend\\src\\components\\EventsPageItem.vue"],"sourcesContent":["<template>\r\n <div >\r\n  <h1 id=\"printCons\">{{event.name}}</h1>\r\n  <pie-chart/>\r\n  <button id=\"no-print\" @click=\"print\" class=\"btn\">Скачать в pdf</button>\r\n </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters } from 'vuex';\r\nimport PieChart from './PieChart.vue';\r\n\r\nimport pdfMake from 'pdfmake';\r\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\r\nimport htmlToPdfmake from 'html-to-pdfmake';\r\n\r\nexport default {\r\n  components: { PieChart},\r\n\r\n data:() => ({\r\n  event: {\r\n\r\n  }\r\n }),\r\n\r\n methods: {\r\n  getEvent() {\r\n   this.event = this.EVENTS[this.$route.params['id']-1]\r\n  },\r\n\r\n  print() {\r\n     //get table html\r\n    const pdfTable = document.getElementById('printCons');\r\n    //html to pdf format\r\n    var html = htmlToPdfmake(pdfTable.innerHTML);\r\n\r\n    const documentDefinition = { content: html };\r\n    pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n    pdfMake.createPdf(documentDefinition).open();\r\n  }\r\n },\r\n\r\n computed: {\r\n   ...mapGetters([\r\n     'EVENTS',\r\n   ]),\r\n },\r\n\r\n mounted() {\r\n  this.getEvent()\r\n },\r\n\r\n\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n.btn {\r\n  background: none;\r\n  border: 1px solid #000;\r\n  cursor: pointer;\r\n  padding: 8px 12px;\r\n  color: #000;\r\n}\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}