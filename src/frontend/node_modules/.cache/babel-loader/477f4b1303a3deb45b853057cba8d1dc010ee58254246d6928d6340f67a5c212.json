{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.array.push.js\");\nexports.__esModule = true;\nvar tslib_1 = require(\"tslib\");\nvar util = require(\"../core/util\");\nvar config_1 = require(\"../config\");\nvar Eventful_1 = require(\"../core/Eventful\");\nvar Element_1 = require(\"../Element\");\nvar helper_1 = require(\"./helper\");\nvar graphic_1 = require(\"./graphic\");\nvar BoundingRect_1 = require(\"../core/BoundingRect\");\nfunction returnFalse() {\n  return false;\n}\nfunction createDom(id, painter, dpr) {\n  var newDom = util.createCanvas();\n  var width = painter.getWidth();\n  var height = painter.getHeight();\n  var newDomStyle = newDom.style;\n  if (newDomStyle) {\n    newDomStyle.position = 'absolute';\n    newDomStyle.left = '0';\n    newDomStyle.top = '0';\n    newDomStyle.width = width + 'px';\n    newDomStyle.height = height + 'px';\n    newDom.setAttribute('data-zr-dom-id', id);\n  }\n  newDom.width = width * dpr;\n  newDom.height = height * dpr;\n  return newDom;\n}\n;\nvar Layer = function (_super) {\n  tslib_1.__extends(Layer, _super);\n  function Layer(id, painter, dpr) {\n    var _this = _super.call(this) || this;\n    _this.motionBlur = false;\n    _this.lastFrameAlpha = 0.7;\n    _this.dpr = 1;\n    _this.virtual = false;\n    _this.config = {};\n    _this.incremental = false;\n    _this.zlevel = 0;\n    _this.maxRepaintRectCount = 5;\n    _this.__dirty = true;\n    _this.__firstTimePaint = true;\n    _this.__used = false;\n    _this.__drawIndex = 0;\n    _this.__startIndex = 0;\n    _this.__endIndex = 0;\n    _this.__prevStartIndex = null;\n    _this.__prevEndIndex = null;\n    var dom;\n    dpr = dpr || config_1.devicePixelRatio;\n    if (typeof id === 'string') {\n      dom = createDom(id, painter, dpr);\n    } else if (util.isObject(id)) {\n      dom = id;\n      id = dom.id;\n    }\n    _this.id = id;\n    _this.dom = dom;\n    var domStyle = dom.style;\n    if (domStyle) {\n      dom.onselectstart = returnFalse;\n      domStyle.webkitUserSelect = 'none';\n      domStyle.userSelect = 'none';\n      domStyle.webkitTapHighlightColor = 'rgba(0,0,0,0)';\n      domStyle['-webkit-touch-callout'] = 'none';\n      domStyle.padding = '0';\n      domStyle.margin = '0';\n      domStyle.borderWidth = '0';\n    }\n    _this.domBack = null;\n    _this.ctxBack = null;\n    _this.painter = painter;\n    _this.config = null;\n    _this.dpr = dpr;\n    return _this;\n  }\n  Layer.prototype.getElementCount = function () {\n    return this.__endIndex - this.__startIndex;\n  };\n  Layer.prototype.afterBrush = function () {\n    this.__prevStartIndex = this.__startIndex;\n    this.__prevEndIndex = this.__endIndex;\n  };\n  Layer.prototype.initContext = function () {\n    this.ctx = this.dom.getContext('2d');\n    this.ctx.dpr = this.dpr;\n  };\n  Layer.prototype.setUnpainted = function () {\n    this.__firstTimePaint = true;\n  };\n  Layer.prototype.createBackBuffer = function () {\n    var dpr = this.dpr;\n    this.domBack = createDom('back-' + this.id, this.painter, dpr);\n    this.ctxBack = this.domBack.getContext('2d');\n    if (dpr !== 1) {\n      this.ctxBack.scale(dpr, dpr);\n    }\n  };\n  Layer.prototype.createRepaintRects = function (displayList, prevList, viewWidth, viewHeight) {\n    if (this.__firstTimePaint) {\n      this.__firstTimePaint = false;\n      return null;\n    }\n    var mergedRepaintRects = [];\n    var maxRepaintRectCount = this.maxRepaintRectCount;\n    var full = false;\n    var pendingRect = new BoundingRect_1[\"default\"](0, 0, 0, 0);\n    function addRectToMergePool(rect) {\n      if (!rect.isFinite() || rect.isZero()) {\n        return;\n      }\n      if (mergedRepaintRects.length === 0) {\n        var boundingRect = new BoundingRect_1[\"default\"](0, 0, 0, 0);\n        boundingRect.copy(rect);\n        mergedRepaintRects.push(boundingRect);\n      } else {\n        var isMerged = false;\n        var minDeltaArea = Infinity;\n        var bestRectToMergeIdx = 0;\n        for (var i = 0; i < mergedRepaintRects.length; ++i) {\n          var mergedRect = mergedRepaintRects[i];\n          if (mergedRect.intersect(rect)) {\n            var pendingRect_1 = new BoundingRect_1[\"default\"](0, 0, 0, 0);\n            pendingRect_1.copy(mergedRect);\n            pendingRect_1.union(rect);\n            mergedRepaintRects[i] = pendingRect_1;\n            isMerged = true;\n            break;\n          } else if (full) {\n            pendingRect.copy(rect);\n            pendingRect.union(mergedRect);\n            var aArea = rect.width * rect.height;\n            var bArea = mergedRect.width * mergedRect.height;\n            var pendingArea = pendingRect.width * pendingRect.height;\n            var deltaArea = pendingArea - aArea - bArea;\n            if (deltaArea < minDeltaArea) {\n              minDeltaArea = minDeltaArea;\n              bestRectToMergeIdx = i;\n            }\n          }\n        }\n        if (full) {\n          mergedRepaintRects[bestRectToMergeIdx].union(rect);\n          isMerged = true;\n        }\n        if (!isMerged) {\n          var boundingRect = new BoundingRect_1[\"default\"](0, 0, 0, 0);\n          boundingRect.copy(rect);\n          mergedRepaintRects.push(boundingRect);\n        }\n        if (!full) {\n          full = mergedRepaintRects.length >= maxRepaintRectCount;\n        }\n      }\n    }\n    for (var i = this.__startIndex; i < this.__endIndex; ++i) {\n      var el = displayList[i];\n      if (el) {\n        var shouldPaint = el.shouldBePainted(viewWidth, viewHeight, true, true);\n        var prevRect = el.__isRendered && (el.__dirty & Element_1[\"default\"].REDARAW_BIT || !shouldPaint) ? el.getPrevPaintRect() : null;\n        if (prevRect) {\n          addRectToMergePool(prevRect);\n        }\n        var curRect = shouldPaint && (el.__dirty & Element_1[\"default\"].REDARAW_BIT || !el.__isRendered) ? el.getPaintRect() : null;\n        if (curRect) {\n          addRectToMergePool(curRect);\n        }\n      }\n    }\n    for (var i = this.__prevStartIndex; i < this.__prevEndIndex; ++i) {\n      var el = prevList[i];\n      var shouldPaint = el.shouldBePainted(viewWidth, viewHeight, true, true);\n      if (el && (!shouldPaint || !el.__zr) && el.__isRendered) {\n        var prevRect = el.getPrevPaintRect();\n        if (prevRect) {\n          addRectToMergePool(prevRect);\n        }\n      }\n    }\n    var hasIntersections;\n    do {\n      hasIntersections = false;\n      for (var i = 0; i < mergedRepaintRects.length;) {\n        if (mergedRepaintRects[i].isZero()) {\n          mergedRepaintRects.splice(i, 1);\n          continue;\n        }\n        for (var j = i + 1; j < mergedRepaintRects.length;) {\n          if (mergedRepaintRects[i].intersect(mergedRepaintRects[j])) {\n            hasIntersections = true;\n            mergedRepaintRects[i].union(mergedRepaintRects[j]);\n            mergedRepaintRects.splice(j, 1);\n          } else {\n            j++;\n          }\n        }\n        i++;\n      }\n    } while (hasIntersections);\n    this._paintRects = mergedRepaintRects;\n    return mergedRepaintRects;\n  };\n  Layer.prototype.debugGetPaintRects = function () {\n    return (this._paintRects || []).slice();\n  };\n  Layer.prototype.resize = function (width, height) {\n    var dpr = this.dpr;\n    var dom = this.dom;\n    var domStyle = dom.style;\n    var domBack = this.domBack;\n    if (domStyle) {\n      domStyle.width = width + 'px';\n      domStyle.height = height + 'px';\n    }\n    dom.width = width * dpr;\n    dom.height = height * dpr;\n    if (domBack) {\n      domBack.width = width * dpr;\n      domBack.height = height * dpr;\n      if (dpr !== 1) {\n        this.ctxBack.scale(dpr, dpr);\n      }\n    }\n  };\n  Layer.prototype.clear = function (clearAll, clearColor, repaintRects) {\n    var dom = this.dom;\n    var ctx = this.ctx;\n    var width = dom.width;\n    var height = dom.height;\n    clearColor = clearColor || this.clearColor;\n    var haveMotionBLur = this.motionBlur && !clearAll;\n    var lastFrameAlpha = this.lastFrameAlpha;\n    var dpr = this.dpr;\n    var self = this;\n    if (haveMotionBLur) {\n      if (!this.domBack) {\n        this.createBackBuffer();\n      }\n      this.ctxBack.globalCompositeOperation = 'copy';\n      this.ctxBack.drawImage(dom, 0, 0, width / dpr, height / dpr);\n    }\n    var domBack = this.domBack;\n    function doClear(x, y, width, height) {\n      ctx.clearRect(x, y, width, height);\n      if (clearColor && clearColor !== 'transparent') {\n        var clearColorGradientOrPattern = void 0;\n        if (util.isGradientObject(clearColor)) {\n          clearColorGradientOrPattern = clearColor.__canvasGradient || helper_1.getCanvasGradient(ctx, clearColor, {\n            x: 0,\n            y: 0,\n            width: width,\n            height: height\n          });\n          clearColor.__canvasGradient = clearColorGradientOrPattern;\n        } else if (util.isPatternObject(clearColor)) {\n          clearColorGradientOrPattern = graphic_1.createCanvasPattern(ctx, clearColor, {\n            dirty: function () {\n              self.setUnpainted();\n              self.__painter.refresh();\n            }\n          });\n        }\n        ctx.save();\n        ctx.fillStyle = clearColorGradientOrPattern || clearColor;\n        ctx.fillRect(x, y, width, height);\n        ctx.restore();\n      }\n      if (haveMotionBLur) {\n        ctx.save();\n        ctx.globalAlpha = lastFrameAlpha;\n        ctx.drawImage(domBack, x, y, width, height);\n        ctx.restore();\n      }\n    }\n    ;\n    if (!repaintRects || haveMotionBLur) {\n      doClear(0, 0, width, height);\n    } else if (repaintRects.length) {\n      util.each(repaintRects, function (rect) {\n        doClear(rect.x * dpr, rect.y * dpr, rect.width * dpr, rect.height * dpr);\n      });\n    }\n  };\n  return Layer;\n}(Eventful_1[\"default\"]);\nexports[\"default\"] = Layer;","map":{"version":3,"names":["exports","__esModule","tslib_1","require","util","config_1","Eventful_1","Element_1","helper_1","graphic_1","BoundingRect_1","returnFalse","createDom","id","painter","dpr","newDom","createCanvas","width","getWidth","height","getHeight","newDomStyle","style","position","left","top","setAttribute","Layer","_super","__extends","_this","call","motionBlur","lastFrameAlpha","virtual","config","incremental","zlevel","maxRepaintRectCount","__dirty","__firstTimePaint","__used","__drawIndex","__startIndex","__endIndex","__prevStartIndex","__prevEndIndex","dom","devicePixelRatio","isObject","domStyle","onselectstart","webkitUserSelect","userSelect","webkitTapHighlightColor","padding","margin","borderWidth","domBack","ctxBack","prototype","getElementCount","afterBrush","initContext","ctx","getContext","setUnpainted","createBackBuffer","scale","createRepaintRects","displayList","prevList","viewWidth","viewHeight","mergedRepaintRects","full","pendingRect","addRectToMergePool","rect","isFinite","isZero","length","boundingRect","copy","push","isMerged","minDeltaArea","Infinity","bestRectToMergeIdx","i","mergedRect","intersect","pendingRect_1","union","aArea","bArea","pendingArea","deltaArea","el","shouldPaint","shouldBePainted","prevRect","__isRendered","REDARAW_BIT","getPrevPaintRect","curRect","getPaintRect","__zr","hasIntersections","splice","j","_paintRects","debugGetPaintRects","slice","resize","clear","clearAll","clearColor","repaintRects","haveMotionBLur","self","globalCompositeOperation","drawImage","doClear","x","y","clearRect","clearColorGradientOrPattern","isGradientObject","__canvasGradient","getCanvasGradient","isPatternObject","createCanvasPattern","dirty","__painter","refresh","save","fillStyle","fillRect","restore","globalAlpha","each"],"sources":["C:/Users/guzny/OneDrive/Рабочий стол/frontend/node_modules/zrender/lib/canvas/Layer.js"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar tslib_1 = require(\"tslib\");\nvar util = require(\"../core/util\");\nvar config_1 = require(\"../config\");\nvar Eventful_1 = require(\"../core/Eventful\");\nvar Element_1 = require(\"../Element\");\nvar helper_1 = require(\"./helper\");\nvar graphic_1 = require(\"./graphic\");\nvar BoundingRect_1 = require(\"../core/BoundingRect\");\nfunction returnFalse() {\n    return false;\n}\nfunction createDom(id, painter, dpr) {\n    var newDom = util.createCanvas();\n    var width = painter.getWidth();\n    var height = painter.getHeight();\n    var newDomStyle = newDom.style;\n    if (newDomStyle) {\n        newDomStyle.position = 'absolute';\n        newDomStyle.left = '0';\n        newDomStyle.top = '0';\n        newDomStyle.width = width + 'px';\n        newDomStyle.height = height + 'px';\n        newDom.setAttribute('data-zr-dom-id', id);\n    }\n    newDom.width = width * dpr;\n    newDom.height = height * dpr;\n    return newDom;\n}\n;\nvar Layer = (function (_super) {\n    tslib_1.__extends(Layer, _super);\n    function Layer(id, painter, dpr) {\n        var _this = _super.call(this) || this;\n        _this.motionBlur = false;\n        _this.lastFrameAlpha = 0.7;\n        _this.dpr = 1;\n        _this.virtual = false;\n        _this.config = {};\n        _this.incremental = false;\n        _this.zlevel = 0;\n        _this.maxRepaintRectCount = 5;\n        _this.__dirty = true;\n        _this.__firstTimePaint = true;\n        _this.__used = false;\n        _this.__drawIndex = 0;\n        _this.__startIndex = 0;\n        _this.__endIndex = 0;\n        _this.__prevStartIndex = null;\n        _this.__prevEndIndex = null;\n        var dom;\n        dpr = dpr || config_1.devicePixelRatio;\n        if (typeof id === 'string') {\n            dom = createDom(id, painter, dpr);\n        }\n        else if (util.isObject(id)) {\n            dom = id;\n            id = dom.id;\n        }\n        _this.id = id;\n        _this.dom = dom;\n        var domStyle = dom.style;\n        if (domStyle) {\n            dom.onselectstart = returnFalse;\n            domStyle.webkitUserSelect = 'none';\n            domStyle.userSelect = 'none';\n            domStyle.webkitTapHighlightColor = 'rgba(0,0,0,0)';\n            domStyle['-webkit-touch-callout'] = 'none';\n            domStyle.padding = '0';\n            domStyle.margin = '0';\n            domStyle.borderWidth = '0';\n        }\n        _this.domBack = null;\n        _this.ctxBack = null;\n        _this.painter = painter;\n        _this.config = null;\n        _this.dpr = dpr;\n        return _this;\n    }\n    Layer.prototype.getElementCount = function () {\n        return this.__endIndex - this.__startIndex;\n    };\n    Layer.prototype.afterBrush = function () {\n        this.__prevStartIndex = this.__startIndex;\n        this.__prevEndIndex = this.__endIndex;\n    };\n    Layer.prototype.initContext = function () {\n        this.ctx = this.dom.getContext('2d');\n        this.ctx.dpr = this.dpr;\n    };\n    Layer.prototype.setUnpainted = function () {\n        this.__firstTimePaint = true;\n    };\n    Layer.prototype.createBackBuffer = function () {\n        var dpr = this.dpr;\n        this.domBack = createDom('back-' + this.id, this.painter, dpr);\n        this.ctxBack = this.domBack.getContext('2d');\n        if (dpr !== 1) {\n            this.ctxBack.scale(dpr, dpr);\n        }\n    };\n    Layer.prototype.createRepaintRects = function (displayList, prevList, viewWidth, viewHeight) {\n        if (this.__firstTimePaint) {\n            this.__firstTimePaint = false;\n            return null;\n        }\n        var mergedRepaintRects = [];\n        var maxRepaintRectCount = this.maxRepaintRectCount;\n        var full = false;\n        var pendingRect = new BoundingRect_1[\"default\"](0, 0, 0, 0);\n        function addRectToMergePool(rect) {\n            if (!rect.isFinite() || rect.isZero()) {\n                return;\n            }\n            if (mergedRepaintRects.length === 0) {\n                var boundingRect = new BoundingRect_1[\"default\"](0, 0, 0, 0);\n                boundingRect.copy(rect);\n                mergedRepaintRects.push(boundingRect);\n            }\n            else {\n                var isMerged = false;\n                var minDeltaArea = Infinity;\n                var bestRectToMergeIdx = 0;\n                for (var i = 0; i < mergedRepaintRects.length; ++i) {\n                    var mergedRect = mergedRepaintRects[i];\n                    if (mergedRect.intersect(rect)) {\n                        var pendingRect_1 = new BoundingRect_1[\"default\"](0, 0, 0, 0);\n                        pendingRect_1.copy(mergedRect);\n                        pendingRect_1.union(rect);\n                        mergedRepaintRects[i] = pendingRect_1;\n                        isMerged = true;\n                        break;\n                    }\n                    else if (full) {\n                        pendingRect.copy(rect);\n                        pendingRect.union(mergedRect);\n                        var aArea = rect.width * rect.height;\n                        var bArea = mergedRect.width * mergedRect.height;\n                        var pendingArea = pendingRect.width * pendingRect.height;\n                        var deltaArea = pendingArea - aArea - bArea;\n                        if (deltaArea < minDeltaArea) {\n                            minDeltaArea = minDeltaArea;\n                            bestRectToMergeIdx = i;\n                        }\n                    }\n                }\n                if (full) {\n                    mergedRepaintRects[bestRectToMergeIdx].union(rect);\n                    isMerged = true;\n                }\n                if (!isMerged) {\n                    var boundingRect = new BoundingRect_1[\"default\"](0, 0, 0, 0);\n                    boundingRect.copy(rect);\n                    mergedRepaintRects.push(boundingRect);\n                }\n                if (!full) {\n                    full = mergedRepaintRects.length >= maxRepaintRectCount;\n                }\n            }\n        }\n        for (var i = this.__startIndex; i < this.__endIndex; ++i) {\n            var el = displayList[i];\n            if (el) {\n                var shouldPaint = el.shouldBePainted(viewWidth, viewHeight, true, true);\n                var prevRect = el.__isRendered && ((el.__dirty & Element_1[\"default\"].REDARAW_BIT) || !shouldPaint)\n                    ? el.getPrevPaintRect()\n                    : null;\n                if (prevRect) {\n                    addRectToMergePool(prevRect);\n                }\n                var curRect = shouldPaint && ((el.__dirty & Element_1[\"default\"].REDARAW_BIT) || !el.__isRendered)\n                    ? el.getPaintRect()\n                    : null;\n                if (curRect) {\n                    addRectToMergePool(curRect);\n                }\n            }\n        }\n        for (var i = this.__prevStartIndex; i < this.__prevEndIndex; ++i) {\n            var el = prevList[i];\n            var shouldPaint = el.shouldBePainted(viewWidth, viewHeight, true, true);\n            if (el && (!shouldPaint || !el.__zr) && el.__isRendered) {\n                var prevRect = el.getPrevPaintRect();\n                if (prevRect) {\n                    addRectToMergePool(prevRect);\n                }\n            }\n        }\n        var hasIntersections;\n        do {\n            hasIntersections = false;\n            for (var i = 0; i < mergedRepaintRects.length;) {\n                if (mergedRepaintRects[i].isZero()) {\n                    mergedRepaintRects.splice(i, 1);\n                    continue;\n                }\n                for (var j = i + 1; j < mergedRepaintRects.length;) {\n                    if (mergedRepaintRects[i].intersect(mergedRepaintRects[j])) {\n                        hasIntersections = true;\n                        mergedRepaintRects[i].union(mergedRepaintRects[j]);\n                        mergedRepaintRects.splice(j, 1);\n                    }\n                    else {\n                        j++;\n                    }\n                }\n                i++;\n            }\n        } while (hasIntersections);\n        this._paintRects = mergedRepaintRects;\n        return mergedRepaintRects;\n    };\n    Layer.prototype.debugGetPaintRects = function () {\n        return (this._paintRects || []).slice();\n    };\n    Layer.prototype.resize = function (width, height) {\n        var dpr = this.dpr;\n        var dom = this.dom;\n        var domStyle = dom.style;\n        var domBack = this.domBack;\n        if (domStyle) {\n            domStyle.width = width + 'px';\n            domStyle.height = height + 'px';\n        }\n        dom.width = width * dpr;\n        dom.height = height * dpr;\n        if (domBack) {\n            domBack.width = width * dpr;\n            domBack.height = height * dpr;\n            if (dpr !== 1) {\n                this.ctxBack.scale(dpr, dpr);\n            }\n        }\n    };\n    Layer.prototype.clear = function (clearAll, clearColor, repaintRects) {\n        var dom = this.dom;\n        var ctx = this.ctx;\n        var width = dom.width;\n        var height = dom.height;\n        clearColor = clearColor || this.clearColor;\n        var haveMotionBLur = this.motionBlur && !clearAll;\n        var lastFrameAlpha = this.lastFrameAlpha;\n        var dpr = this.dpr;\n        var self = this;\n        if (haveMotionBLur) {\n            if (!this.domBack) {\n                this.createBackBuffer();\n            }\n            this.ctxBack.globalCompositeOperation = 'copy';\n            this.ctxBack.drawImage(dom, 0, 0, width / dpr, height / dpr);\n        }\n        var domBack = this.domBack;\n        function doClear(x, y, width, height) {\n            ctx.clearRect(x, y, width, height);\n            if (clearColor && clearColor !== 'transparent') {\n                var clearColorGradientOrPattern = void 0;\n                if (util.isGradientObject(clearColor)) {\n                    clearColorGradientOrPattern = clearColor.__canvasGradient\n                        || helper_1.getCanvasGradient(ctx, clearColor, {\n                            x: 0,\n                            y: 0,\n                            width: width,\n                            height: height\n                        });\n                    clearColor.__canvasGradient = clearColorGradientOrPattern;\n                }\n                else if (util.isPatternObject(clearColor)) {\n                    clearColorGradientOrPattern = graphic_1.createCanvasPattern(ctx, clearColor, {\n                        dirty: function () {\n                            self.setUnpainted();\n                            self.__painter.refresh();\n                        }\n                    });\n                }\n                ctx.save();\n                ctx.fillStyle = clearColorGradientOrPattern || clearColor;\n                ctx.fillRect(x, y, width, height);\n                ctx.restore();\n            }\n            if (haveMotionBLur) {\n                ctx.save();\n                ctx.globalAlpha = lastFrameAlpha;\n                ctx.drawImage(domBack, x, y, width, height);\n                ctx.restore();\n            }\n        }\n        ;\n        if (!repaintRects || haveMotionBLur) {\n            doClear(0, 0, width, height);\n        }\n        else if (repaintRects.length) {\n            util.each(repaintRects, function (rect) {\n                doClear(rect.x * dpr, rect.y * dpr, rect.width * dpr, rect.height * dpr);\n            });\n        }\n    };\n    return Layer;\n}(Eventful_1[\"default\"]));\nexports[\"default\"] = Layer;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}