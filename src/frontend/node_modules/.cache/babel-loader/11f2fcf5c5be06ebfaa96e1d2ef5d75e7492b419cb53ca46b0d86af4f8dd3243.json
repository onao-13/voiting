{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar tslib_1 = require(\"tslib\");\nvar Path_1 = require(\"../Path\");\nvar cos = Math.cos;\nvar sin = Math.sin;\nvar TrochoidShape = function () {\n  function TrochoidShape() {\n    this.cx = 0;\n    this.cy = 0;\n    this.r = 0;\n    this.r0 = 0;\n    this.d = 0;\n    this.location = 'out';\n  }\n  return TrochoidShape;\n}();\nvar Trochoid = function (_super) {\n  tslib_1.__extends(Trochoid, _super);\n  function Trochoid(opts) {\n    return _super.call(this, opts) || this;\n  }\n  Trochoid.prototype.getDefaultStyle = function () {\n    return {\n      stroke: '#000',\n      fill: null\n    };\n  };\n  Trochoid.prototype.getDefaultShape = function () {\n    return new TrochoidShape();\n  };\n  Trochoid.prototype.buildPath = function (ctx, shape) {\n    var R = shape.r;\n    var r = shape.r0;\n    var d = shape.d;\n    var offsetX = shape.cx;\n    var offsetY = shape.cy;\n    var delta = shape.location === 'out' ? 1 : -1;\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n    if (shape.location && R <= r) {\n      return;\n    }\n    var num = 0;\n    var i = 1;\n    var theta;\n    x1 = (R + delta * r) * cos(0) - delta * d * cos(0) + offsetX;\n    y1 = (R + delta * r) * sin(0) - d * sin(0) + offsetY;\n    ctx.moveTo(x1, y1);\n    do {\n      num++;\n    } while (r * num % (R + delta * r) !== 0);\n    do {\n      theta = Math.PI / 180 * i;\n      x2 = (R + delta * r) * cos(theta) - delta * d * cos((R / r + delta) * theta) + offsetX;\n      y2 = (R + delta * r) * sin(theta) - d * sin((R / r + delta) * theta) + offsetY;\n      ctx.lineTo(x2, y2);\n      i++;\n    } while (i <= r * num / (R + delta * r) * 360);\n  };\n  return Trochoid;\n}(Path_1[\"default\"]);\nTrochoid.prototype.type = 'trochoid';\nexports[\"default\"] = Trochoid;","map":{"version":3,"names":["exports","__esModule","tslib_1","require","Path_1","cos","Math","sin","TrochoidShape","cx","cy","r","r0","d","location","Trochoid","_super","__extends","opts","call","prototype","getDefaultStyle","stroke","fill","getDefaultShape","buildPath","ctx","shape","R","offsetX","offsetY","delta","x1","y1","x2","y2","num","i","theta","moveTo","PI","lineTo","type"],"sources":["C:/Users/guzny/OneDrive/Рабочий стол/frontend/node_modules/zrender/lib/graphic/shape/Trochoid.js"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar tslib_1 = require(\"tslib\");\nvar Path_1 = require(\"../Path\");\nvar cos = Math.cos;\nvar sin = Math.sin;\nvar TrochoidShape = (function () {\n    function TrochoidShape() {\n        this.cx = 0;\n        this.cy = 0;\n        this.r = 0;\n        this.r0 = 0;\n        this.d = 0;\n        this.location = 'out';\n    }\n    return TrochoidShape;\n}());\nvar Trochoid = (function (_super) {\n    tslib_1.__extends(Trochoid, _super);\n    function Trochoid(opts) {\n        return _super.call(this, opts) || this;\n    }\n    Trochoid.prototype.getDefaultStyle = function () {\n        return {\n            stroke: '#000',\n            fill: null\n        };\n    };\n    Trochoid.prototype.getDefaultShape = function () {\n        return new TrochoidShape();\n    };\n    Trochoid.prototype.buildPath = function (ctx, shape) {\n        var R = shape.r;\n        var r = shape.r0;\n        var d = shape.d;\n        var offsetX = shape.cx;\n        var offsetY = shape.cy;\n        var delta = shape.location === 'out' ? 1 : -1;\n        var x1;\n        var y1;\n        var x2;\n        var y2;\n        if (shape.location && R <= r) {\n            return;\n        }\n        var num = 0;\n        var i = 1;\n        var theta;\n        x1 = (R + delta * r) * cos(0)\n            - delta * d * cos(0) + offsetX;\n        y1 = (R + delta * r) * sin(0)\n            - d * sin(0) + offsetY;\n        ctx.moveTo(x1, y1);\n        do {\n            num++;\n        } while ((r * num) % (R + delta * r) !== 0);\n        do {\n            theta = Math.PI / 180 * i;\n            x2 = (R + delta * r) * cos(theta)\n                - delta * d * cos((R / r + delta) * theta)\n                + offsetX;\n            y2 = (R + delta * r) * sin(theta)\n                - d * sin((R / r + delta) * theta)\n                + offsetY;\n            ctx.lineTo(x2, y2);\n            i++;\n        } while (i <= (r * num) / (R + delta * r) * 360);\n    };\n    return Trochoid;\n}(Path_1[\"default\"]));\nTrochoid.prototype.type = 'trochoid';\nexports[\"default\"] = Trochoid;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}