{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nvar DebugRect = function () {\n  function DebugRect(style) {\n    var dom = this.dom = document.createElement('div');\n    dom.className = 'ec-debug-dirty-rect';\n    style = Object.assign({}, style);\n    Object.assign(style, {\n      backgroundColor: 'rgba(0, 0, 255, 0.2)',\n      border: '1px solid #00f'\n    });\n    dom.style.cssText = \"\\nposition: absolute;\\nopacity: 0;\\ntransition: opacity 0.5s linear;\\npointer-events: none;\\n\";\n    for (var key in style) {\n      if (style.hasOwnProperty(key)) {\n        dom.style[key] = style[key];\n      }\n    }\n  }\n  DebugRect.prototype.update = function (rect) {\n    var domStyle = this.dom.style;\n    domStyle.width = rect.width + 'px';\n    domStyle.height = rect.height + 'px';\n    domStyle.left = rect.x + 'px';\n    domStyle.top = rect.y + 'px';\n  };\n  DebugRect.prototype.hide = function () {\n    this.dom.style.opacity = '0';\n  };\n  DebugRect.prototype.show = function (autoHideDelay) {\n    var _this = this;\n    clearTimeout(this._hideTimeout);\n    this.dom.style.opacity = '1';\n    this._hideTimeout = setTimeout(function () {\n      _this.hide();\n    }, autoHideDelay || 1000);\n  };\n  return DebugRect;\n}();\nfunction showDebugDirtyRect(zr, opts) {\n  opts = opts || {};\n  var painter = zr.painter;\n  if (!painter.getLayers) {\n    throw new Error('Debug dirty rect can only been used on canvas renderer.');\n  }\n  if (painter.isSingleCanvas()) {\n    throw new Error('Debug dirty rect can only been used on zrender inited with container.');\n  }\n  var debugViewRoot = document.createElement('div');\n  debugViewRoot.style.cssText = \"\\nposition:absolute;\\nleft:0;\\ntop:0;\\nright:0;\\nbottom:0;\\npointer-events:none;\\n\";\n  debugViewRoot.className = 'ec-debug-dirty-rect-container';\n  var debugRects = [];\n  var dom = zr.dom;\n  dom.appendChild(debugViewRoot);\n  var computedStyle = getComputedStyle(dom);\n  if (computedStyle.position === 'static') {\n    dom.style.position = 'relative';\n  }\n  zr.on('rendered', function () {\n    if (painter.getLayers) {\n      var idx_1 = 0;\n      painter.eachBuiltinLayer(function (layer) {\n        if (!layer.debugGetPaintRects) {\n          return;\n        }\n        var paintRects = layer.debugGetPaintRects();\n        for (var i = 0; i < paintRects.length; i++) {\n          if (!paintRects[i].width || !paintRects[i].height) {\n            continue;\n          }\n          if (!debugRects[idx_1]) {\n            debugRects[idx_1] = new DebugRect(opts.style);\n            debugViewRoot.appendChild(debugRects[idx_1].dom);\n          }\n          debugRects[idx_1].show(opts.autoHideDelay);\n          debugRects[idx_1].update(paintRects[i]);\n          idx_1++;\n        }\n      });\n      for (var i = idx_1; i < debugRects.length; i++) {\n        debugRects[i].hide();\n      }\n    }\n  });\n}\nexports[\"default\"] = showDebugDirtyRect;","map":{"version":3,"names":["exports","__esModule","DebugRect","style","dom","document","createElement","className","Object","assign","backgroundColor","border","cssText","key","hasOwnProperty","prototype","update","rect","domStyle","width","height","left","x","top","y","hide","opacity","show","autoHideDelay","_this","clearTimeout","_hideTimeout","setTimeout","showDebugDirtyRect","zr","opts","painter","getLayers","Error","isSingleCanvas","debugViewRoot","debugRects","appendChild","computedStyle","getComputedStyle","position","on","idx_1","eachBuiltinLayer","layer","debugGetPaintRects","paintRects","i","length"],"sources":["C:/Users/guzny/OneDrive/Рабочий стол/frontend/node_modules/zrender/lib/debug/showDebugDirtyRect.js"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar DebugRect = (function () {\n    function DebugRect(style) {\n        var dom = this.dom = document.createElement('div');\n        dom.className = 'ec-debug-dirty-rect';\n        style = Object.assign({}, style);\n        Object.assign(style, {\n            backgroundColor: 'rgba(0, 0, 255, 0.2)',\n            border: '1px solid #00f'\n        });\n        dom.style.cssText = \"\\nposition: absolute;\\nopacity: 0;\\ntransition: opacity 0.5s linear;\\npointer-events: none;\\n\";\n        for (var key in style) {\n            if (style.hasOwnProperty(key)) {\n                dom.style[key] = style[key];\n            }\n        }\n    }\n    DebugRect.prototype.update = function (rect) {\n        var domStyle = this.dom.style;\n        domStyle.width = rect.width + 'px';\n        domStyle.height = rect.height + 'px';\n        domStyle.left = rect.x + 'px';\n        domStyle.top = rect.y + 'px';\n    };\n    DebugRect.prototype.hide = function () {\n        this.dom.style.opacity = '0';\n    };\n    DebugRect.prototype.show = function (autoHideDelay) {\n        var _this = this;\n        clearTimeout(this._hideTimeout);\n        this.dom.style.opacity = '1';\n        this._hideTimeout = setTimeout(function () {\n            _this.hide();\n        }, autoHideDelay || 1000);\n    };\n    return DebugRect;\n}());\nfunction showDebugDirtyRect(zr, opts) {\n    opts = opts || {};\n    var painter = zr.painter;\n    if (!painter.getLayers) {\n        throw new Error('Debug dirty rect can only been used on canvas renderer.');\n    }\n    if (painter.isSingleCanvas()) {\n        throw new Error('Debug dirty rect can only been used on zrender inited with container.');\n    }\n    var debugViewRoot = document.createElement('div');\n    debugViewRoot.style.cssText = \"\\nposition:absolute;\\nleft:0;\\ntop:0;\\nright:0;\\nbottom:0;\\npointer-events:none;\\n\";\n    debugViewRoot.className = 'ec-debug-dirty-rect-container';\n    var debugRects = [];\n    var dom = zr.dom;\n    dom.appendChild(debugViewRoot);\n    var computedStyle = getComputedStyle(dom);\n    if (computedStyle.position === 'static') {\n        dom.style.position = 'relative';\n    }\n    zr.on('rendered', function () {\n        if (painter.getLayers) {\n            var idx_1 = 0;\n            painter.eachBuiltinLayer(function (layer) {\n                if (!layer.debugGetPaintRects) {\n                    return;\n                }\n                var paintRects = layer.debugGetPaintRects();\n                for (var i = 0; i < paintRects.length; i++) {\n                    if (!paintRects[i].width || !paintRects[i].height) {\n                        continue;\n                    }\n                    if (!debugRects[idx_1]) {\n                        debugRects[idx_1] = new DebugRect(opts.style);\n                        debugViewRoot.appendChild(debugRects[idx_1].dom);\n                    }\n                    debugRects[idx_1].show(opts.autoHideDelay);\n                    debugRects[idx_1].update(paintRects[i]);\n                    idx_1++;\n                }\n            });\n            for (var i = idx_1; i < debugRects.length; i++) {\n                debugRects[i].hide();\n            }\n        }\n    });\n}\nexports[\"default\"] = showDebugDirtyRect;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}