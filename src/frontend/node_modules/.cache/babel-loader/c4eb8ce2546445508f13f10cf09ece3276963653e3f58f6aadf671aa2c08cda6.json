{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\nexport default createStore({\n  state: {\n    posts: [],\n    events: [\n      // {\n      //   id: 1,\n      //   title: 'Ебатория 1',\n      //   name: 'Коломоец Александра Вячеславовна',\n      //   description: 'Для тайного голосавания по присуждению ученой степени кандидата геолого-минералогичексих наук<br/>Диссертационный совет <strong>24.2.354.02</strong><br/>при ФГБОУ ВО «Российский государственный геологоразведочны университет имени Серго Орджоникидзе»<br/>К заседанию диссертационного совета № 01/10/2022 от<br/> «14» октября 2022 г.',\n      //   date: '24.08.2067',\n      //   total: 30,\n      //   link: 'https://voiting-server.cfapps.us10-001.hana.ondemand.com',\n      //   voteFor: 19,\n      //   voteAgainst: 11,\n      //   passwords: [\n      //     6667, 6667, 6667, 6667, 6667, 6667, 6667, 6667\n      //   ]\n      // },\n      // {\n      //   id: 2,\n      //   title: 'Ебатория 2',\n      //   name: 'Нечипоренко Алексей Артёмович',\n      //   description: 'Для тайного голосавания по присуждению ученой степени кандидата геолого-минералогичексих наук<br/>Диссертационный совет <strong>24.2.354.02</strong><br/>при ФГБОУ ВО «Российский государственный геологоразведочны университет имени Серго Орджоникидзе»<br/>К заседанию диссертационного совета № 01/10/2022 от<br/> «14» октября 2022 г.',\n      //   date: '24.08.2067',\n      //   link: 'https://voiting-server.cfapps.us10-001.hana.ondemand.com',\n      //   total: 30,\n      //   voteFor: 5,\n      //   voteAgainst: 15,\n      //   passwords: [\n      //     6667, 6667, 6667, 6667, 6667, 6667, 6667, 6667\n      //   ]\n      // }\n    ]\n  },\n  getters: {\n    POSTS(state) {\n      return state.posts;\n    },\n    EVENTS(state) {\n      return state.events;\n    }\n  },\n  mutations: {\n    SET_POSTS_TO_STATE(state, posts) {\n      state.posts = posts;\n    },\n    PUT_EVENT_TO_STATE(state, newEvent) {\n      state.events[newEvent.id] = newEvent;\n    },\n    SET_EVENTS_TO_STATE(state, events) {\n      state.events = events;\n    }\n  },\n  actions: {\n    //  async GET_POSTS_FROM_API({commit}, posts) {\n    //    try {\n    //      const response = await axios.get('https://voiting-server.cfapps.us10-001.hana.ondemand.com/test/get-data');\n    //      posts = response.data\n    //      commit('SET_POSTS_TO_STATE', posts)\n    //    } catch(er) {\n    //      alert(er)\n    //    }\n    //  },\n    GET_POSTS_FROM_API({\n      commit\n    }) {\n      return axios.get(\"https://voiting-server.cfapps.us10-001.hana.ondemand.com/test/get-data\").then(r => r.data).then(posts => {\n        commit('SET_POSTS_TO_STATE', posts);\n      }).catch(error => {\n        console.log(error);\n        return error;\n      });\n    },\n    GET_EVENTS_FROM_API({\n      commit\n    }) {\n      return axios.get(\"https://voiting-server.cfapps.us10-001.hana.ondemand.com/api/event/get-all\").then(r => r.data).then(events => {\n        commit('SET_EVENTS_TO_STATE', events);\n      }).catch(error => {\n        console.log(error);\n        return error;\n      });\n    },\n    CREATE_EVENT_BY_API() {\n      const newEvent = {\n        name: 'Лол',\n        date: 'Кек',\n        rank: 'Чебурек'\n      };\n      axios.post(\"https://voiting-server.cfapps.us10-001.hana.ondemand.com/api/voiting/create\", newEvent).then(response => this.articleId = response.data.id);\n    },\n    PUT_EVENT_FROM_API({\n      commit\n    }, newEvent) {\n      commit('PUT_EVENT_TO_STATE', newEvent);\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","axios","state","posts","events","getters","POSTS","EVENTS","mutations","SET_POSTS_TO_STATE","PUT_EVENT_TO_STATE","newEvent","id","SET_EVENTS_TO_STATE","actions","GET_POSTS_FROM_API","commit","get","then","r","data","catch","error","console","log","GET_EVENTS_FROM_API","CREATE_EVENT_BY_API","name","date","rank","post","response","articleId","PUT_EVENT_FROM_API","modules"],"sources":["C:/Users/guzny/OneDrive/Рабочий стол/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\r\nimport axios from 'axios'\r\n\r\nexport default createStore({\r\n  state: {\r\n    posts: [],\r\n    events: [\r\n      // {\r\n      //   id: 1,\r\n      //   title: 'Ебатория 1',\r\n      //   name: 'Коломоец Александра Вячеславовна',\r\n      //   description: 'Для тайного голосавания по присуждению ученой степени кандидата геолого-минералогичексих наук<br/>Диссертационный совет <strong>24.2.354.02</strong><br/>при ФГБОУ ВО «Российский государственный геологоразведочны университет имени Серго Орджоникидзе»<br/>К заседанию диссертационного совета № 01/10/2022 от<br/> «14» октября 2022 г.',\r\n      //   date: '24.08.2067',\r\n      //   total: 30,\r\n      //   link: 'https://voiting-server.cfapps.us10-001.hana.ondemand.com',\r\n      //   voteFor: 19,\r\n      //   voteAgainst: 11,\r\n      //   passwords: [\r\n      //     6667, 6667, 6667, 6667, 6667, 6667, 6667, 6667\r\n      //   ]\r\n      // },\r\n      // {\r\n      //   id: 2,\r\n      //   title: 'Ебатория 2',\r\n      //   name: 'Нечипоренко Алексей Артёмович',\r\n      //   description: 'Для тайного голосавания по присуждению ученой степени кандидата геолого-минералогичексих наук<br/>Диссертационный совет <strong>24.2.354.02</strong><br/>при ФГБОУ ВО «Российский государственный геологоразведочны университет имени Серго Орджоникидзе»<br/>К заседанию диссертационного совета № 01/10/2022 от<br/> «14» октября 2022 г.',\r\n      //   date: '24.08.2067',\r\n      //   link: 'https://voiting-server.cfapps.us10-001.hana.ondemand.com',\r\n      //   total: 30,\r\n      //   voteFor: 5,\r\n      //   voteAgainst: 15,\r\n      //   passwords: [\r\n      //     6667, 6667, 6667, 6667, 6667, 6667, 6667, 6667\r\n      //   ]\r\n      // }\r\n    ]\r\n  },\r\n  getters: {\r\n    POSTS(state) {\r\n      return state.posts\r\n    },\r\n\r\n    EVENTS(state) {\r\n      return state.events\r\n    }\r\n  },\r\n  mutations: {\r\n    SET_POSTS_TO_STATE(state, posts) {\r\n      state.posts = posts;\r\n    },\r\n\r\n    PUT_EVENT_TO_STATE(state, newEvent) {\r\n      state.events[newEvent.id] = newEvent;\r\n    },\r\n\r\n    SET_EVENTS_TO_STATE(state, events) {\r\n      state.events = events;\r\n    }\r\n  },\r\n  actions: {\r\n    //  async GET_POSTS_FROM_API({commit}, posts) {\r\n    //    try {\r\n    //      const response = await axios.get('https://voiting-server.cfapps.us10-001.hana.ondemand.com/test/get-data');\r\n    //      posts = response.data\r\n    //      commit('SET_POSTS_TO_STATE', posts)\r\n    //    } catch(er) {\r\n    //      alert(er)\r\n    //    }\r\n    //  },\r\n    GET_POSTS_FROM_API({commit}) {\r\n      return axios\r\n        .get(\"https://voiting-server.cfapps.us10-001.hana.ondemand.com/test/get-data\")\r\n        .then(r => r.data)\r\n        .then(posts => {\r\n          commit('SET_POSTS_TO_STATE', posts)\r\n        })\r\n\r\n        .catch((error) => {\r\n          console.log(error)\r\n          return error;\r\n        })\r\n    },\r\n\r\n    GET_EVENTS_FROM_API({commit}) {\r\n      return axios\r\n        .get(\"https://voiting-server.cfapps.us10-001.hana.ondemand.com/api/event/get-all\")\r\n        .then(r => r.data)\r\n        .then(events => {\r\n          commit('SET_EVENTS_TO_STATE', events)\r\n        })\r\n\r\n        .catch((error) => {\r\n          console.log(error)\r\n          return error;\r\n        })\r\n    },\r\n\r\n    CREATE_EVENT_BY_API() {\r\n      const newEvent = {\r\n        name: 'Лол',\r\n        date: 'Кек',\r\n        rank: 'Чебурек'\r\n      }\r\n      axios.post(\"https://voiting-server.cfapps.us10-001.hana.ondemand.com/api/voiting/create\", newEvent)\r\n      .then(response => this.articleId = response.data.id);\r\n    },\r\n\r\n    PUT_EVENT_FROM_API({commit}, newEvent) {\r\n      commit('PUT_EVENT_TO_STATE', newEvent)\r\n    }\r\n\r\n  },\r\n  modules: {\r\n\r\n  }\r\n})\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,eAAeD,WAAW,CAAC;EACzBE,KAAK,EAAE;IACLC,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE;MACN;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IAAA;EAEJ,CAAC;EACDC,OAAO,EAAE;IACPC,KAAK,CAACJ,KAAK,EAAE;MACX,OAAOA,KAAK,CAACC,KAAK;IACpB,CAAC;IAEDI,MAAM,CAACL,KAAK,EAAE;MACZ,OAAOA,KAAK,CAACE,MAAM;IACrB;EACF,CAAC;EACDI,SAAS,EAAE;IACTC,kBAAkB,CAACP,KAAK,EAAEC,KAAK,EAAE;MAC/BD,KAAK,CAACC,KAAK,GAAGA,KAAK;IACrB,CAAC;IAEDO,kBAAkB,CAACR,KAAK,EAAES,QAAQ,EAAE;MAClCT,KAAK,CAACE,MAAM,CAACO,QAAQ,CAACC,EAAE,CAAC,GAAGD,QAAQ;IACtC,CAAC;IAEDE,mBAAmB,CAACX,KAAK,EAAEE,MAAM,EAAE;MACjCF,KAAK,CAACE,MAAM,GAAGA,MAAM;IACvB;EACF,CAAC;EACDU,OAAO,EAAE;IACP;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,kBAAkB,CAAC;MAACC;IAAM,CAAC,EAAE;MAC3B,OAAOf,KAAK,CACTgB,GAAG,CAAC,wEAAwE,CAAC,CAC7EC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CACjBF,IAAI,CAACf,KAAK,IAAI;QACba,MAAM,CAAC,oBAAoB,EAAEb,KAAK,CAAC;MACrC,CAAC,CAAC,CAEDkB,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,OAAOA,KAAK;MACd,CAAC,CAAC;IACN,CAAC;IAEDG,mBAAmB,CAAC;MAACT;IAAM,CAAC,EAAE;MAC5B,OAAOf,KAAK,CACTgB,GAAG,CAAC,4EAA4E,CAAC,CACjFC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CACjBF,IAAI,CAACd,MAAM,IAAI;QACdY,MAAM,CAAC,qBAAqB,EAAEZ,MAAM,CAAC;MACvC,CAAC,CAAC,CAEDiB,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QAClB,OAAOA,KAAK;MACd,CAAC,CAAC;IACN,CAAC;IAEDI,mBAAmB,GAAG;MACpB,MAAMf,QAAQ,GAAG;QACfgB,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE,KAAK;QACXC,IAAI,EAAE;MACR,CAAC;MACD5B,KAAK,CAAC6B,IAAI,CAAC,6EAA6E,EAAEnB,QAAQ,CAAC,CAClGO,IAAI,CAACa,QAAQ,IAAI,IAAI,CAACC,SAAS,GAAGD,QAAQ,CAACX,IAAI,CAACR,EAAE,CAAC;IACtD,CAAC;IAEDqB,kBAAkB,CAAC;MAACjB;IAAM,CAAC,EAAEL,QAAQ,EAAE;MACrCK,MAAM,CAAC,oBAAoB,EAAEL,QAAQ,CAAC;IACxC;EAEF,CAAC;EACDuB,OAAO,EAAE,CAET;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}