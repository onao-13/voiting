{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n\"use strict\";\n\nexports.__esModule = true;\nvar util_1 = require(\"zrender/lib/core/util\");\n;\nfunction createTask(define) {\n  return new Task(define);\n}\nexports.createTask = createTask;\nvar Task = function () {\n  function Task(define) {\n    define = define || {};\n    this._reset = define.reset;\n    this._plan = define.plan;\n    this._count = define.count;\n    this._onDirty = define.onDirty;\n    this._dirty = true;\n  }\n  Task.prototype.perform = function (performArgs) {\n    var upTask = this._upstream;\n    var skip = performArgs && performArgs.skip;\n    if (this._dirty && upTask) {\n      var context = this.context;\n      context.data = context.outputData = upTask.context.outputData;\n    }\n    if (this.__pipeline) {\n      this.__pipeline.currentTask = this;\n    }\n    var planResult;\n    if (this._plan && !skip) {\n      planResult = this._plan(this.context);\n    }\n    var lastModBy = normalizeModBy(this._modBy);\n    var lastModDataCount = this._modDataCount || 0;\n    var modBy = normalizeModBy(performArgs && performArgs.modBy);\n    var modDataCount = performArgs && performArgs.modDataCount || 0;\n    if (lastModBy !== modBy || lastModDataCount !== modDataCount) {\n      planResult = 'reset';\n    }\n    function normalizeModBy(val) {\n      !(val >= 1) && (val = 1);\n      return val;\n    }\n    var forceFirstProgress;\n    if (this._dirty || planResult === 'reset') {\n      this._dirty = false;\n      forceFirstProgress = this._doReset(skip);\n    }\n    this._modBy = modBy;\n    this._modDataCount = modDataCount;\n    var step = performArgs && performArgs.step;\n    if (upTask) {\n      if (process.env.NODE_ENV !== 'production') {\n        util_1.assert(upTask._outputDueEnd != null);\n      }\n      this._dueEnd = upTask._outputDueEnd;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        util_1.assert(!this._progress || this._count);\n      }\n      this._dueEnd = this._count ? this._count(this.context) : Infinity;\n    }\n    if (this._progress) {\n      var start = this._dueIndex;\n      var end = Math.min(step != null ? this._dueIndex + step : Infinity, this._dueEnd);\n      if (!skip && (forceFirstProgress || start < end)) {\n        var progress = this._progress;\n        if (util_1.isArray(progress)) {\n          for (var i = 0; i < progress.length; i++) {\n            this._doProgress(progress[i], start, end, modBy, modDataCount);\n          }\n        } else {\n          this._doProgress(progress, start, end, modBy, modDataCount);\n        }\n      }\n      this._dueIndex = end;\n      var outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : end;\n      if (process.env.NODE_ENV !== 'production') {\n        util_1.assert(outputDueEnd >= this._outputDueEnd);\n      }\n      this._outputDueEnd = outputDueEnd;\n    } else {\n      this._dueIndex = this._outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : this._dueEnd;\n    }\n    return this.unfinished();\n  };\n  Task.prototype.dirty = function () {\n    this._dirty = true;\n    this._onDirty && this._onDirty(this.context);\n  };\n  Task.prototype._doProgress = function (progress, start, end, modBy, modDataCount) {\n    iterator.reset(start, end, modBy, modDataCount);\n    this._callingProgress = progress;\n    this._callingProgress({\n      start: start,\n      end: end,\n      count: end - start,\n      next: iterator.next\n    }, this.context);\n  };\n  Task.prototype._doReset = function (skip) {\n    this._dueIndex = this._outputDueEnd = this._dueEnd = 0;\n    this._settedOutputEnd = null;\n    var progress;\n    var forceFirstProgress;\n    if (!skip && this._reset) {\n      progress = this._reset(this.context);\n      if (progress && progress.progress) {\n        forceFirstProgress = progress.forceFirstProgress;\n        progress = progress.progress;\n      }\n      if (util_1.isArray(progress) && !progress.length) {\n        progress = null;\n      }\n    }\n    this._progress = progress;\n    this._modBy = this._modDataCount = null;\n    var downstream = this._downstream;\n    downstream && downstream.dirty();\n    return forceFirstProgress;\n  };\n  Task.prototype.unfinished = function () {\n    return this._progress && this._dueIndex < this._dueEnd;\n  };\n  Task.prototype.pipe = function (downTask) {\n    if (process.env.NODE_ENV !== 'production') {\n      util_1.assert(downTask && !downTask._disposed && downTask !== this);\n    }\n    if (this._downstream !== downTask || this._dirty) {\n      this._downstream = downTask;\n      downTask._upstream = this;\n      downTask.dirty();\n    }\n  };\n  Task.prototype.dispose = function () {\n    if (this._disposed) {\n      return;\n    }\n    this._upstream && (this._upstream._downstream = null);\n    this._downstream && (this._downstream._upstream = null);\n    this._dirty = false;\n    this._disposed = true;\n  };\n  Task.prototype.getUpstream = function () {\n    return this._upstream;\n  };\n  Task.prototype.getDownstream = function () {\n    return this._downstream;\n  };\n  Task.prototype.setOutputEnd = function (end) {\n    this._outputDueEnd = this._settedOutputEnd = end;\n  };\n  return Task;\n}();\nexports.Task = Task;\nvar iterator = function () {\n  var end;\n  var current;\n  var modBy;\n  var modDataCount;\n  var winCount;\n  var it = {\n    reset: function (s, e, sStep, sCount) {\n      current = s;\n      end = e;\n      modBy = sStep;\n      modDataCount = sCount;\n      winCount = Math.ceil(modDataCount / modBy);\n      it.next = modBy > 1 && modDataCount > 0 ? modNext : sequentialNext;\n    }\n  };\n  return it;\n  function sequentialNext() {\n    return current < end ? current++ : null;\n  }\n  function modNext() {\n    var dataIndex = current % winCount * modBy + Math.ceil(current / winCount);\n    var result = current >= end ? null : dataIndex < modDataCount ? dataIndex : current;\n    current++;\n    return result;\n  }\n}();","map":{"version":3,"names":["exports","__esModule","util_1","require","createTask","define","Task","_reset","reset","_plan","plan","_count","count","_onDirty","onDirty","_dirty","prototype","perform","performArgs","upTask","_upstream","skip","context","data","outputData","__pipeline","currentTask","planResult","lastModBy","normalizeModBy","_modBy","lastModDataCount","_modDataCount","modBy","modDataCount","val","forceFirstProgress","_doReset","step","process","env","NODE_ENV","assert","_outputDueEnd","_dueEnd","_progress","Infinity","start","_dueIndex","end","Math","min","progress","isArray","i","length","_doProgress","outputDueEnd","_settedOutputEnd","unfinished","dirty","iterator","_callingProgress","next","downstream","_downstream","pipe","downTask","_disposed","dispose","getUpstream","getDownstream","setOutputEnd","current","winCount","it","s","e","sStep","sCount","ceil","modNext","sequentialNext","dataIndex","result"],"sources":["C:/Users/guzny/OneDrive/Рабочий стол/frontend/node_modules/echarts/lib/stream/task.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n\"use strict\";\n\nexports.__esModule = true;\n\nvar util_1 = require(\"zrender/lib/core/util\");\n\n;\n\nfunction createTask(define) {\n  return new Task(define);\n}\n\nexports.createTask = createTask;\n\nvar Task = function () {\n  function Task(define) {\n    define = define || {};\n    this._reset = define.reset;\n    this._plan = define.plan;\n    this._count = define.count;\n    this._onDirty = define.onDirty;\n    this._dirty = true;\n  }\n\n  Task.prototype.perform = function (performArgs) {\n    var upTask = this._upstream;\n    var skip = performArgs && performArgs.skip;\n\n    if (this._dirty && upTask) {\n      var context = this.context;\n      context.data = context.outputData = upTask.context.outputData;\n    }\n\n    if (this.__pipeline) {\n      this.__pipeline.currentTask = this;\n    }\n\n    var planResult;\n\n    if (this._plan && !skip) {\n      planResult = this._plan(this.context);\n    }\n\n    var lastModBy = normalizeModBy(this._modBy);\n    var lastModDataCount = this._modDataCount || 0;\n    var modBy = normalizeModBy(performArgs && performArgs.modBy);\n    var modDataCount = performArgs && performArgs.modDataCount || 0;\n\n    if (lastModBy !== modBy || lastModDataCount !== modDataCount) {\n      planResult = 'reset';\n    }\n\n    function normalizeModBy(val) {\n      !(val >= 1) && (val = 1);\n      return val;\n    }\n\n    var forceFirstProgress;\n\n    if (this._dirty || planResult === 'reset') {\n      this._dirty = false;\n      forceFirstProgress = this._doReset(skip);\n    }\n\n    this._modBy = modBy;\n    this._modDataCount = modDataCount;\n    var step = performArgs && performArgs.step;\n\n    if (upTask) {\n      if (process.env.NODE_ENV !== 'production') {\n        util_1.assert(upTask._outputDueEnd != null);\n      }\n\n      this._dueEnd = upTask._outputDueEnd;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        util_1.assert(!this._progress || this._count);\n      }\n\n      this._dueEnd = this._count ? this._count(this.context) : Infinity;\n    }\n\n    if (this._progress) {\n      var start = this._dueIndex;\n      var end = Math.min(step != null ? this._dueIndex + step : Infinity, this._dueEnd);\n\n      if (!skip && (forceFirstProgress || start < end)) {\n        var progress = this._progress;\n\n        if (util_1.isArray(progress)) {\n          for (var i = 0; i < progress.length; i++) {\n            this._doProgress(progress[i], start, end, modBy, modDataCount);\n          }\n        } else {\n          this._doProgress(progress, start, end, modBy, modDataCount);\n        }\n      }\n\n      this._dueIndex = end;\n      var outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : end;\n\n      if (process.env.NODE_ENV !== 'production') {\n        util_1.assert(outputDueEnd >= this._outputDueEnd);\n      }\n\n      this._outputDueEnd = outputDueEnd;\n    } else {\n      this._dueIndex = this._outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : this._dueEnd;\n    }\n\n    return this.unfinished();\n  };\n\n  Task.prototype.dirty = function () {\n    this._dirty = true;\n    this._onDirty && this._onDirty(this.context);\n  };\n\n  Task.prototype._doProgress = function (progress, start, end, modBy, modDataCount) {\n    iterator.reset(start, end, modBy, modDataCount);\n    this._callingProgress = progress;\n\n    this._callingProgress({\n      start: start,\n      end: end,\n      count: end - start,\n      next: iterator.next\n    }, this.context);\n  };\n\n  Task.prototype._doReset = function (skip) {\n    this._dueIndex = this._outputDueEnd = this._dueEnd = 0;\n    this._settedOutputEnd = null;\n    var progress;\n    var forceFirstProgress;\n\n    if (!skip && this._reset) {\n      progress = this._reset(this.context);\n\n      if (progress && progress.progress) {\n        forceFirstProgress = progress.forceFirstProgress;\n        progress = progress.progress;\n      }\n\n      if (util_1.isArray(progress) && !progress.length) {\n        progress = null;\n      }\n    }\n\n    this._progress = progress;\n    this._modBy = this._modDataCount = null;\n    var downstream = this._downstream;\n    downstream && downstream.dirty();\n    return forceFirstProgress;\n  };\n\n  Task.prototype.unfinished = function () {\n    return this._progress && this._dueIndex < this._dueEnd;\n  };\n\n  Task.prototype.pipe = function (downTask) {\n    if (process.env.NODE_ENV !== 'production') {\n      util_1.assert(downTask && !downTask._disposed && downTask !== this);\n    }\n\n    if (this._downstream !== downTask || this._dirty) {\n      this._downstream = downTask;\n      downTask._upstream = this;\n      downTask.dirty();\n    }\n  };\n\n  Task.prototype.dispose = function () {\n    if (this._disposed) {\n      return;\n    }\n\n    this._upstream && (this._upstream._downstream = null);\n    this._downstream && (this._downstream._upstream = null);\n    this._dirty = false;\n    this._disposed = true;\n  };\n\n  Task.prototype.getUpstream = function () {\n    return this._upstream;\n  };\n\n  Task.prototype.getDownstream = function () {\n    return this._downstream;\n  };\n\n  Task.prototype.setOutputEnd = function (end) {\n    this._outputDueEnd = this._settedOutputEnd = end;\n  };\n\n  return Task;\n}();\n\nexports.Task = Task;\n\nvar iterator = function () {\n  var end;\n  var current;\n  var modBy;\n  var modDataCount;\n  var winCount;\n  var it = {\n    reset: function (s, e, sStep, sCount) {\n      current = s;\n      end = e;\n      modBy = sStep;\n      modDataCount = sCount;\n      winCount = Math.ceil(modDataCount / modBy);\n      it.next = modBy > 1 && modDataCount > 0 ? modNext : sequentialNext;\n    }\n  };\n  return it;\n\n  function sequentialNext() {\n    return current < end ? current++ : null;\n  }\n\n  function modNext() {\n    var dataIndex = current % winCount * modBy + Math.ceil(current / winCount);\n    var result = current >= end ? null : dataIndex < modDataCount ? dataIndex : current;\n    current++;\n    return result;\n  }\n}();"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}