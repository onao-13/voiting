{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"pie1\",\n  class: \"pie\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"main1\",\n  style: {\n    \"float\": \"left\",\n    \"width\": \"100%\",\n    \"height\": \"450px\"\n  }\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Prepare a DOM with size (width and height) for ECharts \"), _hoisted_2]);\n}","map":{"version":3,"mappings":";;EACKA,EAAE,EAAC,MAAM;EAACC,KAAK,EAAC;;gCAEnBC,oBAA8D;EAAzDF,EAAE,EAAC,OAAO;EAACG,KAA2C,EAA3C;IAAA;IAAA;IAAA;EAAA;;;;uBAFlBC,oBAGM,OAHNC,UAGM,GAFDC,+EAA+D,EAClEC,UAA8D","names":["id","class","_createElementVNode","style","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2"],"sourceRoot":"","sources":["C:\\Users\\guzny\\OneDrive\\Рабочий стол\\frontend\\src\\components\\PieChart.vue"],"sourcesContent":["<template>\r\n<div id=\"pie1\" class=\"pie\">\r\n     <!-- Prepare a DOM with size (width and height) for ECharts -->\r\n  <div id=\"main1\" style=\"float:left;width:100%;height: 450px\" />\r\n</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n methods: {\r\n  initData() {\r\n   const echarts = require('echarts/lib/echarts')\r\n    // Introduce pie chart component\r\n   require('echarts/lib/chart/pie')\r\n   require('echarts/lib/component/tooltip')\r\n   // Based on the prepared dom, initialize the echarts instance\r\n    const myChart = echarts.init(document.getElementById('main1'))\r\n      myChart.setOption({\r\n      tooltip: {\r\n       trigger: 'item',\r\n        formatter:'{a} <br/>{b}: {c} ({d}%)' // See the comments below for the specific attributes represented by a b c d\r\n      },\r\n      series: [\r\n        {\r\n         name:'Access source', // a in formatter\r\n          type: 'pie',\r\n          radius: '100%',\r\n          center: ['50%', '60%'],\r\n          data: [\r\n              {value: 12, name:'За', itemStyle: {color:'#FFFF00' }},\r\n              {value: 18, name:'Против', itemStyle: {color:'#008000' }},\r\n\r\n          ], // The name in the data is b in the formatter; the value in the data is the c in the formatter; as for d is the percentage calculated by Echarts; itemStyle: the color of each sector of the pie chart; label is behind the indicator line The style of the text, labelLine is the color of the indicator line\r\n          label: {\r\n            normal: {\r\n              show: true,\r\n              textStyle: {\r\n               fontWeight: 400,\r\n               fontSize: 12 // font size of the text\r\n              },\r\n              formatter:'{b} \\n {c} ' // This is the prompt message behind the indicator line. The line break here is different from the formatter in the tooltips above\r\n            }\r\n          },\r\n          itemStyle: {\r\n            emphasis: {\r\n              shadowBlur: 10,\r\n              shadowOffsetX: 0,\r\n              shadowColor: 'rgba(0, 0, 0, 0.5)'\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    })\r\n    window.onresize = myChart.resize //Adapt the size of the browser window\r\n  }\r\n },\r\n\r\n mounted() {\r\n  this.initData()\r\n }\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}