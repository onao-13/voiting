{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { cubicRoots } from './polyRoots';\n/**\n * Returns the intersection point for the given pair of line segments, or null,\n * if the segments are parallel or don't intersect.\n * Based on http://paulbourke.net/geometry/pointlineplane/\n */\nexport function segmentIntersection(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {\n  var d = (ax2 - ax1) * (by2 - by1) - (ay2 - ay1) * (bx2 - bx1);\n  if (d === 0) {\n    // The lines are parallel.\n    return null;\n  }\n  var ua = ((bx2 - bx1) * (ay1 - by1) - (ax1 - bx1) * (by2 - by1)) / d;\n  var ub = ((ax2 - ax1) * (ay1 - by1) - (ay2 - ay1) * (ax1 - bx1)) / d;\n  if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n    return {\n      x: ax1 + ua * (ax2 - ax1),\n      y: ay1 + ua * (ay2 - ay1)\n    };\n  }\n  return null; // The intersection point is outside either or both segments.\n}\n/**\n * Returns intersection points of the given cubic curve and the line segment.\n * Takes in x/y components of cubic control points and line segment start/end points\n * as parameters.\n */\nexport function cubicSegmentIntersections(px1, py1, px2, py2, px3, py3, px4, py4, x1, y1, x2, y2) {\n  var e_1, _a;\n  var intersections = [];\n  // Find line equation coefficients.\n  var A = y1 - y2;\n  var B = x2 - x1;\n  var C = x1 * (y2 - y1) - y1 * (x2 - x1);\n  // Find cubic Bezier curve equation coefficients from control points.\n  var bx = bezierCoefficients(px1, px2, px3, px4);\n  var by = bezierCoefficients(py1, py2, py3, py4);\n  var a = A * bx[0] + B * by[0]; // t^3\n  var b = A * bx[1] + B * by[1]; // t^2\n  var c = A * bx[2] + B * by[2]; // t\n  var d = A * bx[3] + B * by[3] + C; // 1\n  var roots = cubicRoots(a, b, c, d);\n  try {\n    // Verify that the roots are within bounds of the linear segment.\n    for (var roots_1 = __values(roots), roots_1_1 = roots_1.next(); !roots_1_1.done; roots_1_1 = roots_1.next()) {\n      var t = roots_1_1.value;\n      var tt = t * t;\n      var ttt = t * tt;\n      // Find the cartesian plane coordinates for the parametric root `t`.\n      var x = bx[0] * ttt + bx[1] * tt + bx[2] * t + bx[3];\n      var y = by[0] * ttt + by[1] * tt + by[2] * t + by[3];\n      // The parametric cubic roots we found are intersection points\n      // with an infinite line, and so the x/y coordinates above are as well.\n      // Make sure the x/y is also within the bounds of the given segment.\n      var s = void 0;\n      if (x1 !== x2) {\n        s = (x - x1) / (x2 - x1);\n      } else {\n        // the line is vertical\n        s = (y - y1) / (y2 - y1);\n      }\n      if (s >= 0 && s <= 1) {\n        intersections.push({\n          x: x,\n          y: y\n        });\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (roots_1_1 && !roots_1_1.done && (_a = roots_1.return)) _a.call(roots_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n  return intersections;\n}\n/**\n * Returns the given coordinates vector multiplied by the coefficient matrix\n * of the parametric cubic Bézier equation.\n */\nexport function bezierCoefficients(P1, P2, P3, P4) {\n  return [\n  // Bézier expressed as matrix operations:\n  -P1 + 3 * P2 - 3 * P3 + P4, 3 * P1 - 6 * P2 + 3 * P3, -3 * P1 + 3 * P2, P1];\n}","map":{"version":3,"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","cubicRoots","segmentIntersection","ax1","ay1","ax2","ay2","bx1","by1","bx2","by2","d","ua","ub","x","y","cubicSegmentIntersections","px1","py1","px2","py2","px3","py3","px4","py4","x1","y1","x2","y2","e_1","_a","intersections","A","B","C","bx","bezierCoefficients","by","a","b","c","roots","roots_1","roots_1_1","t","tt","ttt","push","e_1_1","error","return","P1","P2","P3","P4"],"sources":["C:/Users/guzny/OneDrive/Рабочий стол/frontend/node_modules/ag-charts-community/dist/esm/es5/scene/intersection.js"],"sourcesContent":["var __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { cubicRoots } from './polyRoots';\n/**\n * Returns the intersection point for the given pair of line segments, or null,\n * if the segments are parallel or don't intersect.\n * Based on http://paulbourke.net/geometry/pointlineplane/\n */\nexport function segmentIntersection(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {\n    var d = (ax2 - ax1) * (by2 - by1) - (ay2 - ay1) * (bx2 - bx1);\n    if (d === 0) {\n        // The lines are parallel.\n        return null;\n    }\n    var ua = ((bx2 - bx1) * (ay1 - by1) - (ax1 - bx1) * (by2 - by1)) / d;\n    var ub = ((ax2 - ax1) * (ay1 - by1) - (ay2 - ay1) * (ax1 - bx1)) / d;\n    if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {\n        return {\n            x: ax1 + ua * (ax2 - ax1),\n            y: ay1 + ua * (ay2 - ay1),\n        };\n    }\n    return null; // The intersection point is outside either or both segments.\n}\n/**\n * Returns intersection points of the given cubic curve and the line segment.\n * Takes in x/y components of cubic control points and line segment start/end points\n * as parameters.\n */\nexport function cubicSegmentIntersections(px1, py1, px2, py2, px3, py3, px4, py4, x1, y1, x2, y2) {\n    var e_1, _a;\n    var intersections = [];\n    // Find line equation coefficients.\n    var A = y1 - y2;\n    var B = x2 - x1;\n    var C = x1 * (y2 - y1) - y1 * (x2 - x1);\n    // Find cubic Bezier curve equation coefficients from control points.\n    var bx = bezierCoefficients(px1, px2, px3, px4);\n    var by = bezierCoefficients(py1, py2, py3, py4);\n    var a = A * bx[0] + B * by[0]; // t^3\n    var b = A * bx[1] + B * by[1]; // t^2\n    var c = A * bx[2] + B * by[2]; // t\n    var d = A * bx[3] + B * by[3] + C; // 1\n    var roots = cubicRoots(a, b, c, d);\n    try {\n        // Verify that the roots are within bounds of the linear segment.\n        for (var roots_1 = __values(roots), roots_1_1 = roots_1.next(); !roots_1_1.done; roots_1_1 = roots_1.next()) {\n            var t = roots_1_1.value;\n            var tt = t * t;\n            var ttt = t * tt;\n            // Find the cartesian plane coordinates for the parametric root `t`.\n            var x = bx[0] * ttt + bx[1] * tt + bx[2] * t + bx[3];\n            var y = by[0] * ttt + by[1] * tt + by[2] * t + by[3];\n            // The parametric cubic roots we found are intersection points\n            // with an infinite line, and so the x/y coordinates above are as well.\n            // Make sure the x/y is also within the bounds of the given segment.\n            var s = void 0;\n            if (x1 !== x2) {\n                s = (x - x1) / (x2 - x1);\n            }\n            else {\n                // the line is vertical\n                s = (y - y1) / (y2 - y1);\n            }\n            if (s >= 0 && s <= 1) {\n                intersections.push({ x: x, y: y });\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (roots_1_1 && !roots_1_1.done && (_a = roots_1.return)) _a.call(roots_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return intersections;\n}\n/**\n * Returns the given coordinates vector multiplied by the coefficient matrix\n * of the parametric cubic Bézier equation.\n */\nexport function bezierCoefficients(P1, P2, P3, P4) {\n    return [\n        // Bézier expressed as matrix operations:\n        -P1 + 3 * P2 - 3 * P3 + P4,\n        3 * P1 - 6 * P2 + 3 * P3,\n        -3 * P1 + 3 * P2,\n        P1,\n    ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}