{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nfunction slice(parent, x0, y0, x1, y1) {\n  var nodes = parent.children;\n  var k = parent.value && (y1 - y0) / parent.value;\n  nodes.forEach(function (node) {\n    node.x0 = x0;\n    node.x1 = x1;\n    node.y0 = y0;\n    node.y1 = y0 += node.value * k;\n  });\n}\nfunction dice(parent, x0, y0, x1, y1) {\n  var nodes = parent.children;\n  var k = parent.value && (x1 - x0) / parent.value;\n  nodes.forEach(function (node) {\n    node.x0 = x0;\n    node.x1 = x0 += node.value * k;\n    node.y0 = y0;\n    node.y1 = y1;\n  });\n}\nfunction roundNode(node) {\n  node.x0 = Math.round(node.x0);\n  node.y0 = Math.round(node.y0);\n  node.x1 = Math.round(node.x1);\n  node.y1 = Math.round(node.y1);\n}\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n  var rows = [];\n  var nodes = parent.children;\n  var n = nodes.length;\n  var value = parent.value;\n  var i0 = 0;\n  var i1 = 0;\n  var dx;\n  var dy;\n  var nodeValue;\n  var sumValue;\n  var minValue;\n  var maxValue;\n  var newRatio;\n  var minRatio;\n  var alpha;\n  var beta;\n  while (i0 < n) {\n    dx = x1 - x0;\n    dy = y1 - y0;\n    // Find the next non-empty node.\n    do {\n      sumValue = nodes[i1++].value;\n    } while (!sumValue && i1 < n);\n    minValue = maxValue = sumValue;\n    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n    // Keep adding nodes while the aspect ratio maintains or improves.\n    for (; i1 < n; ++i1) {\n      nodeValue = nodes[i1].value;\n      sumValue += nodeValue;\n      if (nodeValue < minValue) {\n        minValue = nodeValue;\n      }\n      if (nodeValue > maxValue) {\n        maxValue = nodeValue;\n      }\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) {\n        sumValue -= nodeValue;\n        break;\n      }\n      minRatio = newRatio;\n    }\n    // Position and record the row orientation.\n    var row = {\n      value: sumValue,\n      dice: dx < dy,\n      children: nodes.slice(i0, i1)\n    };\n    rows.push(row);\n    if (row.dice) {\n      var oldy0 = y0;\n      var newy1 = y1;\n      if (value) {\n        y0 += dy * sumValue / value;\n        newy1 = y0;\n      }\n      dice(row, x0, oldy0, x1, newy1);\n    } else {\n      var oldx0 = x0;\n      var newx1 = x1;\n      if (value) {\n        x0 += dx * sumValue / value;\n        newx1 = x0;\n      }\n      slice(row, oldx0, y0, newx1, y1);\n    }\n    value -= sumValue;\n    i0 = i1;\n  }\n  return rows;\n}\nvar phi = (1 + Math.sqrt(5)) / 2;\nvar squarify = function custom(ratio) {\n  function squarify(parent, x0, y0, x1, y1) {\n    squarifyRatio(ratio, parent, x0, y0, x1, y1);\n  }\n  squarify.ratio = function (x) {\n    return custom((x = +x) > 1 ? x : 1);\n  };\n  return squarify;\n}(phi);\nvar Treemap = /** @class */function () {\n  function Treemap() {\n    this.paddingStack = [0];\n    this.dx = 1;\n    this.dy = 1;\n    this.round = true;\n    this.tile = squarify;\n    this.paddingInner = function (_) {\n      return 0;\n    };\n    this.paddingTop = function (_) {\n      return 0;\n    };\n    this.paddingRight = function (_) {\n      return 0;\n    };\n    this.paddingBottom = function (_) {\n      return 0;\n    };\n    this.paddingLeft = function (_) {\n      return 0;\n    };\n  }\n  Object.defineProperty(Treemap.prototype, \"size\", {\n    get: function () {\n      return [this.dx, this.dy];\n    },\n    set: function (size) {\n      this.dx = size[0];\n      this.dy = size[1];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Treemap.prototype.processData = function (root) {\n    root.x0 = 0;\n    root.y0 = 0;\n    root.x1 = this.dx;\n    root.y1 = this.dy;\n    root.eachBefore(this.positionNode.bind(this));\n    this.paddingStack = [0];\n    if (this.round) {\n      root.eachBefore(roundNode);\n    }\n    return root;\n  };\n  Treemap.prototype.positionNode = function (node) {\n    var p = this.paddingStack[node.depth];\n    var x0 = node.x0 + p;\n    var y0 = node.y0 + p;\n    var x1 = node.x1 - p;\n    var y1 = node.y1 - p;\n    if (x1 < x0) {\n      x0 = x1 = (x0 + x1) / 2;\n    }\n    if (y1 < y0) {\n      y0 = y1 = (y0 + y1) / 2;\n    }\n    node.x0 = x0;\n    node.y0 = y0;\n    node.x1 = x1;\n    node.y1 = y1;\n    if (node.children) {\n      p = this.paddingStack[node.depth + 1] = this.paddingInner(node) / 2;\n      x0 += this.paddingLeft(node) - p;\n      y0 += this.paddingTop(node) - p;\n      x1 -= this.paddingRight(node) - p;\n      y1 -= this.paddingBottom(node) - p;\n      if (x1 < x0) {\n        x0 = x1 = (x0 + x1) / 2;\n      }\n      if (y1 < y0) {\n        y0 = y1 = (y0 + y1) / 2;\n      }\n      this.tile(node, x0, y0, x1, y1);\n    }\n  };\n  return Treemap;\n}();\nexport { Treemap };","map":{"version":3,"names":["slice","parent","x0","y0","x1","y1","nodes","children","k","value","forEach","node","dice","roundNode","Math","round","squarifyRatio","ratio","rows","n","length","i0","i1","dx","dy","nodeValue","sumValue","minValue","maxValue","newRatio","minRatio","alpha","beta","max","row","push","oldy0","newy1","oldx0","newx1","phi","sqrt","squarify","custom","x","Treemap","paddingStack","tile","paddingInner","_","paddingTop","paddingRight","paddingBottom","paddingLeft","Object","defineProperty","prototype","get","set","size","enumerable","configurable","processData","root","eachBefore","positionNode","bind","p","depth"],"sources":["C:/Users/guzny/OneDrive/Рабочий стол/frontend/node_modules/ag-charts-community/dist/esm/es5/layout/treemap.js"],"sourcesContent":["function slice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children;\n    var k = parent.value && (y1 - y0) / parent.value;\n    nodes.forEach(function (node) {\n        node.x0 = x0;\n        node.x1 = x1;\n        node.y0 = y0;\n        node.y1 = y0 += node.value * k;\n    });\n}\nfunction dice(parent, x0, y0, x1, y1) {\n    var nodes = parent.children;\n    var k = parent.value && (x1 - x0) / parent.value;\n    nodes.forEach(function (node) {\n        node.x0 = x0;\n        node.x1 = x0 += node.value * k;\n        node.y0 = y0;\n        node.y1 = y1;\n    });\n}\nfunction roundNode(node) {\n    node.x0 = Math.round(node.x0);\n    node.y0 = Math.round(node.y0);\n    node.x1 = Math.round(node.x1);\n    node.y1 = Math.round(node.y1);\n}\nexport function squarifyRatio(ratio, parent, x0, y0, x1, y1) {\n    var rows = [];\n    var nodes = parent.children;\n    var n = nodes.length;\n    var value = parent.value;\n    var i0 = 0;\n    var i1 = 0;\n    var dx;\n    var dy;\n    var nodeValue;\n    var sumValue;\n    var minValue;\n    var maxValue;\n    var newRatio;\n    var minRatio;\n    var alpha;\n    var beta;\n    while (i0 < n) {\n        dx = x1 - x0;\n        dy = y1 - y0;\n        // Find the next non-empty node.\n        do {\n            sumValue = nodes[i1++].value;\n        } while (!sumValue && i1 < n);\n        minValue = maxValue = sumValue;\n        alpha = Math.max(dy / dx, dx / dy) / (value * ratio);\n        beta = sumValue * sumValue * alpha;\n        minRatio = Math.max(maxValue / beta, beta / minValue);\n        // Keep adding nodes while the aspect ratio maintains or improves.\n        for (; i1 < n; ++i1) {\n            nodeValue = nodes[i1].value;\n            sumValue += nodeValue;\n            if (nodeValue < minValue) {\n                minValue = nodeValue;\n            }\n            if (nodeValue > maxValue) {\n                maxValue = nodeValue;\n            }\n            beta = sumValue * sumValue * alpha;\n            newRatio = Math.max(maxValue / beta, beta / minValue);\n            if (newRatio > minRatio) {\n                sumValue -= nodeValue;\n                break;\n            }\n            minRatio = newRatio;\n        }\n        // Position and record the row orientation.\n        var row = {\n            value: sumValue,\n            dice: dx < dy,\n            children: nodes.slice(i0, i1),\n        };\n        rows.push(row);\n        if (row.dice) {\n            var oldy0 = y0;\n            var newy1 = y1;\n            if (value) {\n                y0 += (dy * sumValue) / value;\n                newy1 = y0;\n            }\n            dice(row, x0, oldy0, x1, newy1);\n        }\n        else {\n            var oldx0 = x0;\n            var newx1 = x1;\n            if (value) {\n                x0 += (dx * sumValue) / value;\n                newx1 = x0;\n            }\n            slice(row, oldx0, y0, newx1, y1);\n        }\n        value -= sumValue;\n        i0 = i1;\n    }\n    return rows;\n}\nvar phi = (1 + Math.sqrt(5)) / 2;\nvar squarify = (function custom(ratio) {\n    function squarify(parent, x0, y0, x1, y1) {\n        squarifyRatio(ratio, parent, x0, y0, x1, y1);\n    }\n    squarify.ratio = function (x) { return custom((x = +x) > 1 ? x : 1); };\n    return squarify;\n})(phi);\nvar Treemap = /** @class */ (function () {\n    function Treemap() {\n        this.paddingStack = [0];\n        this.dx = 1;\n        this.dy = 1;\n        this.round = true;\n        this.tile = squarify;\n        this.paddingInner = function (_) { return 0; };\n        this.paddingTop = function (_) { return 0; };\n        this.paddingRight = function (_) { return 0; };\n        this.paddingBottom = function (_) { return 0; };\n        this.paddingLeft = function (_) { return 0; };\n    }\n    Object.defineProperty(Treemap.prototype, \"size\", {\n        get: function () {\n            return [this.dx, this.dy];\n        },\n        set: function (size) {\n            this.dx = size[0];\n            this.dy = size[1];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Treemap.prototype.processData = function (root) {\n        root.x0 = 0;\n        root.y0 = 0;\n        root.x1 = this.dx;\n        root.y1 = this.dy;\n        root.eachBefore(this.positionNode.bind(this));\n        this.paddingStack = [0];\n        if (this.round) {\n            root.eachBefore(roundNode);\n        }\n        return root;\n    };\n    Treemap.prototype.positionNode = function (node) {\n        var p = this.paddingStack[node.depth];\n        var x0 = node.x0 + p;\n        var y0 = node.y0 + p;\n        var x1 = node.x1 - p;\n        var y1 = node.y1 - p;\n        if (x1 < x0) {\n            x0 = x1 = (x0 + x1) / 2;\n        }\n        if (y1 < y0) {\n            y0 = y1 = (y0 + y1) / 2;\n        }\n        node.x0 = x0;\n        node.y0 = y0;\n        node.x1 = x1;\n        node.y1 = y1;\n        if (node.children) {\n            p = this.paddingStack[node.depth + 1] = this.paddingInner(node) / 2;\n            x0 += this.paddingLeft(node) - p;\n            y0 += this.paddingTop(node) - p;\n            x1 -= this.paddingRight(node) - p;\n            y1 -= this.paddingBottom(node) - p;\n            if (x1 < x0) {\n                x0 = x1 = (x0 + x1) / 2;\n            }\n            if (y1 < y0) {\n                y0 = y1 = (y0 + y1) / 2;\n            }\n            this.tile(node, x0, y0, x1, y1);\n        }\n    };\n    return Treemap;\n}());\nexport { Treemap };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}