{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.array.unshift.js\");\n// source: https://github.com/OpenSlides/OpenSlides/blob/f4f8b8422f9b3fbab58e35ac3f8f870d35813b7d/client/src/app/core/ui-services/html-to-pdf.service.ts\n// and https://github.com/bpampuch/pdfmake/issues/205\n\n/**\r\n  To use it:\r\n  import htmlToPdfMake from 'html-to-pdfmake.js'\r\n  htmlToPdfMake('<b>my bold text</b>');\r\n*/\n\n/**\r\n * Transform HTML code to a PdfMake object\r\n * @param  {String} htmlText The HTML code to transform\r\n * @param  {Object} [options]\r\n *   @param  {Object} [defaultStyles] An object with the default styles for each elements\r\n *   @param  {Boolean} [tableAutoSize=false] It permits to use the width/height defined in styles for a table's cells and rows\r\n *   @param  {Boolean} [imagesByReference=false] It permits to return two objets ({content, images}) to handle the `<img>` tags by reference\r\n *   @param  {Boolean} [removeExtraBlanks=false] Some blank spaces in your code may cause extra blank lines in the PDF – use this option to remove them\r\n *   @param  {Function} [customTag] It permits to handle non-regular HTML tag\r\n *   @param  {Object} [window] The `window` object (required for NodeJS server side use)\r\n * @return {Object} it returns a PdfMake object\r\n *\r\n * @example\r\n * // Some styles are applied by defaults for the supported HTML elements\r\n * // but you can pass your own styles if you prefer\r\n * htmlToPdfMake('<div><h1>My Title</h1><p>My paragraph</p></div>');\r\n *\r\n * // If you want to overwrite the default styles, e.g. you want <li> to not have a margin-left, and links to be 'purple' and not 'blue', and links without 'underline'\r\n * htmlToPdfMake('<ul><li>this is <a href=\"...\">a link</a></li><li>another item</li></ul>', {\r\n *   defaultStyles:{\r\n *     a:{\r\n *       color:'purple',\r\n *       decoration:null\r\n *     },\r\n *     li:null\r\n *   }\r\n * });\r\n */\n//var util = require(\"util\"); // to debug\nfunction htmlToPdfMake(htmlText, options) {\n  'use strict';\n\n  this.wndw = options && options.window ? options.window : window;\n  this.tableAutoSize = options && typeof options.tableAutoSize === \"boolean\" ? options.tableAutoSize : false;\n  this.imagesByReference = options && typeof options.imagesByReference === \"boolean\" ? options.imagesByReference : false;\n  this.removeExtraBlanks = options && typeof options.removeExtraBlanks === \"boolean\" ? options.removeExtraBlanks : false;\n\n  // Used with the size attribute on the font elements to calculate relative font size\n  this.fontSizes = options && Array.isArray(options.fontSizes) ? options.fontSizes : [10, 14, 16, 18, 20, 24, 28];\n\n  // set default styles\n  this.defaultStyles = {\n    b: {\n      bold: true\n    },\n    strong: {\n      bold: true\n    },\n    u: {\n      decoration: 'underline'\n    },\n    del: {\n      decoration: 'lineThrough'\n    },\n    s: {\n      decoration: 'lineThrough'\n    },\n    em: {\n      italics: true\n    },\n    i: {\n      italics: true\n    },\n    h1: {\n      fontSize: 24,\n      bold: true,\n      marginBottom: 5\n    },\n    h2: {\n      fontSize: 22,\n      bold: true,\n      marginBottom: 5\n    },\n    h3: {\n      fontSize: 20,\n      bold: true,\n      marginBottom: 5\n    },\n    h4: {\n      fontSize: 18,\n      bold: true,\n      marginBottom: 5\n    },\n    h5: {\n      fontSize: 16,\n      bold: true,\n      marginBottom: 5\n    },\n    h6: {\n      fontSize: 14,\n      bold: true,\n      marginBottom: 5\n    },\n    a: {\n      color: 'blue',\n      decoration: 'underline'\n    },\n    strike: {\n      decoration: 'lineThrough'\n    },\n    p: {\n      margin: [0, 5, 0, 10]\n    },\n    ul: {\n      marginBottom: 5,\n      marginLeft: 5\n    },\n    table: {\n      marginBottom: 5\n    },\n    th: {\n      bold: true,\n      fillColor: '#EEEEEE'\n    }\n  };\n\n  // store the references to the images\n  this.imagesRef = [];\n\n  /**\r\n   * Permit to change the default styles based on the options\r\n   */\n  this.changeDefaultStyles = function () {\n    for (var keyStyle in options.defaultStyles) {\n      if (this.defaultStyles.hasOwnProperty(keyStyle)) {\n        // if we want to remove a default style\n        if (options.defaultStyles.hasOwnProperty(keyStyle) && !options.defaultStyles[keyStyle]) {\n          delete this.defaultStyles[keyStyle];\n        } else {\n          for (var k in options.defaultStyles[keyStyle]) {\n            // if we want to delete a specific property\n            if (options.defaultStyles[keyStyle][k] === '') delete this.defaultStyles[keyStyle][k];else this.defaultStyles[keyStyle][k] = options.defaultStyles[keyStyle][k];\n          }\n        }\n      } else {\n        // if we add default styles\n        this.defaultStyles[keyStyle] = {};\n        for (var ks in options.defaultStyles[keyStyle]) {\n          this.defaultStyles[keyStyle][ks] = options.defaultStyles[keyStyle][ks];\n        }\n      }\n    }\n  };\n  if (options && options.defaultStyles) {\n    this.changeDefaultStyles();\n  }\n\n  /**\r\n   * Takes an HTML string, converts to HTML using a DOM parser and recursivly parses\r\n   * the content into pdfmake compatible doc definition\r\n   *\r\n   * @param htmlText the html text to translate as string\r\n   * @returns pdfmake doc definition as object\r\n   */\n  this.convertHtml = function (htmlText) {\n    // Create a HTML DOM tree out of html string\n    var parser = new this.wndw.DOMParser();\n    if (this.removeExtraBlanks) htmlText = htmlText.replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|li))/gi, \"$1$4\").replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|li))/gi, \"$1$4\");\n    var parsedHtml = parser.parseFromString(htmlText, 'text/html');\n    var docDef = this.parseElement(parsedHtml.body, []);\n\n    // remove first level\n    return docDef.stack || docDef.text;\n  };\n\n  /**\r\n   * Converts a single HTML element to pdfmake, calls itself recursively for child html elements\r\n   *\r\n   * @param element can be an HTML element (<p>) or plain text (\"Hello World\")\r\n   * @param parentNode the parent node for the current element\r\n   * @param parents Array of node names of all the parents for the element\r\n   * @returns the doc def to the given element in consideration to the given paragraph and styles\r\n   */\n  this.parseElement = function (element, parents) {\n    var nodeName = element.nodeName.toUpperCase();\n    var nodeNameLowerCase = nodeName.toLowerCase();\n    var ret = {\n      text: []\n    };\n    var text,\n      needStack = false;\n    var dataset,\n      i,\n      key,\n      _this = this;\n\n    // ignore some HTML tags\n    if (['COLGROUP', 'COL'].indexOf(nodeName) > -1) return '';\n    switch (element.nodeType) {\n      case 3:\n        {\n          // TEXT_NODE\n          if (element.textContent) {\n            text = element.textContent;\n            // check if we have 'white-space' in the parent's style\n            var styleParentTextNode = this.parseStyle(parents[parents.length - 1], true);\n            var hasWhiteSpace = false;\n            for (i = 0; i < styleParentTextNode.length; i++) {\n              if (styleParentTextNode[i].key === \"preserveLeadingSpaces\") {\n                hasWhiteSpace = styleParentTextNode[i].value;\n                break;\n              }\n            }\n            // if no 'white-space' style, then deal with white spaces\n            if (!hasWhiteSpace) text = text.replace(/\\s*\\n\\s*/g, \" \");\n            if (options && typeof options.replaceText === \"function\") text = options.replaceText(text, parents);\n\n            // for table, thead, tbody, tfoot, tr, ul, ol: remove all empty space\n            if (['TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TR', 'UL', 'OL'].indexOf(parents[parents.length - 1].nodeName) > -1) text = text.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\n            if (text) {\n              ret = {\n                'text': text\n              };\n              ret = this.applyStyle({\n                ret: ret,\n                parents: parents\n              });\n              return ret;\n            }\n          }\n          return '';\n        }\n      case 1:\n        {\n          // ELEMENT_NODE\n          ret.nodeName = nodeName;\n          if (element.id) ret.id = element.id;\n          parents.push(element);\n          if (element.childNodes && element.childNodes.length > 0) {\n            [].forEach.call(element.childNodes, function (child) {\n              var res = _this.parseElement(child, parents);\n              if (res) {\n                if (Array.isArray(res.text) && res.text.length === 0) res.text = '';\n                ret.text.push(res);\n              }\n            });\n            //console.log(nodeName,'=>',util.inspect(ret.text, {showHidden: false, depth: null})); // to debug\n            // find if we need a 'stack' instead of a 'text'\n            needStack = this.searchForStack(ret);\n            if (needStack) {\n              ret.stack = ret.text.slice(0);\n              delete ret.text;\n            } else {\n              // apply all the inhirent classes and styles from the parents\n              ret = this.applyStyle({\n                ret: ret,\n                parents: parents\n              });\n            }\n          }\n          parents.pop();\n          switch (nodeName) {\n            case \"TABLE\":\n              {\n                var rowIndex, cellIndex;\n                // the format for the table is table.body[[], [], …]\n                ret.table = {\n                  body: []\n                };\n                var tbodies = ret.stack || ret.text;\n                if (Array.isArray(tbodies)) {\n                  rowIndex = 0;\n                  // Array with All Rows including THEAD\n                  var allRows = [];\n                  // for each THEAD / TBODY\n                  tbodies.forEach(function (tbody) {\n                    // for each row\n                    var rows = tbody.stack || tbody.text;\n                    if (Array.isArray(rows)) {\n                      // Add rows to allRows\n                      allRows = allRows.concat(rows);\n                      rows.forEach(function (row) {\n                        var cells = row.stack || row.text;\n                        // for each cell\n                        if (Array.isArray(cells)) {\n                          cellIndex = 0;\n                          ret.table.body[rowIndex] = [];\n                          cells.forEach(function (cell) {\n                            ret.table.body[rowIndex].push(cell);\n\n                            // do we have a colSpan?\n                            // if yes, insert empty cells due to colspan\n                            if (cell.colSpan > 1) {\n                              i = cell.colSpan;\n                              // do we have a rowSpan in addition of the colSpan?\n                              _this.setRowSpan({\n                                rows: allRows,\n                                cell: cell,\n                                rowIndex: rowIndex,\n                                cellIndex: cellIndex\n                              });\n                              while (--i > 0) {\n                                ret.table.body[rowIndex].push({\n                                  text: ''\n                                });\n                                // keep adding empty cell due to rowspan\n                                _this.setRowSpan({\n                                  rows: allRows,\n                                  cell: cell,\n                                  rowIndex: rowIndex,\n                                  cellIndex: cellIndex\n                                });\n                                cellIndex++;\n                              }\n                            } else {\n                              // do we have a rowSpan ?\n                              _this.setRowSpan({\n                                rows: allRows,\n                                cell: cell,\n                                rowIndex: rowIndex,\n                                cellIndex: cellIndex\n                              });\n                            }\n                            cellIndex++;\n                          });\n                          rowIndex++;\n                        }\n                      });\n                    }\n                  });\n                }\n                delete ret.stack;\n                delete ret.text;\n                // apply all the inhirent classes and styles from the parents, or for the current element\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                });\n\n                // if option tableAutoSize, then we try to apply the correct width/height on the table\n                if (this.tableAutoSize) {\n                  var cellsWidths = [];\n                  var cellsHeights = [];\n                  var tableWidths = [];\n                  var tableHeights = [];\n                  // determine if we have \"width:100%\" on the TABLE\n                  var fullWidth = element.getAttribute(\"width\") === \"100%\" || (element.getAttribute(\"style\") || \"\").replace(/width\\s*:\\s*100%/, \"width:100%\").includes(\"width:100%\");\n                  ret.table.body.forEach(function (row, rowIndex) {\n                    cellsWidths.push([]);\n                    cellsHeights.push([]);\n                    row.forEach(function (cell) {\n                      // we want to remember the different sizes\n                      var width = typeof cell.width !== 'undefined' ? cell.width : 'auto';\n                      var height = typeof cell.height !== 'undefined' ? cell.height : 'auto';\n                      // check if we have colspan or rowspan\n                      // if yes, and if width/height is a number, we divide by the col/rowspan, otherwise we use 'auto'\n                      if (width !== 'auto' && cell.colSpan > 1) {\n                        if (!isNaN(width)) width /= cell.colSpan;else width = 'auto';\n                      }\n                      if (height !== 'auto' && cell.rowSpan > 1) {\n                        if (!isNaN(height)) height /= cell.rowSpan;else height = 'auto';\n                      }\n                      cellsWidths[rowIndex].push(width);\n                      cellsHeights[rowIndex].push(height);\n                    });\n                  });\n\n                  // determine the max width for each cell\n                  cellsWidths.forEach(function (row) {\n                    row.forEach(function (cellWidth, cellIndex) {\n                      var type = typeof tableWidths[cellIndex];\n                      if (type === \"undefined\" || cellWidth !== 'auto' && type === \"number\" && cellWidth > tableWidths[cellIndex] || cellWidth !== 'auto' && tableWidths[cellIndex] === 'auto') {\n                        tableWidths[cellIndex] = cellWidth;\n                      }\n                    });\n                  });\n                  // determine the max height for each row\n                  cellsHeights.forEach(function (row, rowIndex) {\n                    row.forEach(function (cellHeight) {\n                      var type = typeof tableHeights[rowIndex];\n                      if (type === \"undefined\" || cellHeight !== 'auto' && type === \"number\" && cellHeight > tableHeights[rowIndex] || cellHeight !== 'auto' && tableHeights[rowIndex] === 'auto') {\n                        tableHeights[rowIndex] = cellHeight;\n                      }\n                    });\n                  });\n                  if (tableWidths.length > 0) {\n                    // if all columns are in 'auto' and if we have 'width:\"100%\"' for the table\n                    // then put widths:['*', '*' …], for all columns\n                    //if (fullWidth && tableWidths.filter(function(w) { return w==='auto' }).length === tableWidths.length) tableWidths=tableWidths.map(function() { return '*' });\n                    // see https://github.com/Aymkdn/html-to-pdfmake/issues/151#issuecomment-1273015585\n                    // if we have 'width:\"100%\"' for the table, replace \"auto\" width to \"*\"\n                    if (fullWidth) tableWidths = tableWidths.map(function (w) {\n                      return w === 'auto' ? '*' : w;\n                    });\n                    ret.table.widths = tableWidths;\n                  }\n                  if (tableHeights.length > 0) ret.table.heights = tableHeights;\n                }\n\n                // check if we have some data-pdfmake to apply\n                if (element.dataset && element.dataset.pdfmake) {\n                  // handle when people will use simple quotes, e.g. <table data-pdfmake=\"{'layout':'noBorders'}\">\n                  dataset = element.dataset.pdfmake;\n                  if (dataset.charAt(1) === \"'\") dataset = dataset.replace(/'/g, '\"');\n                  try {\n                    dataset = JSON.parse(dataset);\n                    for (key in dataset) {\n                      if (key === \"layout\") {\n                        ret.layout = dataset[key];\n                      } else {\n                        ret.table[key] = dataset[key];\n                      }\n                    }\n                  } catch (e) {\n                    console.error(e);\n                  }\n                }\n                break;\n              }\n            case \"TH\":\n            case \"TD\":\n              {\n                if (element.getAttribute(\"rowspan\")) ret.rowSpan = element.getAttribute(\"rowspan\") * 1;\n                if (element.getAttribute(\"colspan\")) ret.colSpan = element.getAttribute(\"colspan\") * 1;\n                // apply all the inhirent classes and styles from the parents, or for the current element\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                });\n                break;\n              }\n            case \"SVG\":\n              {\n                ret = {\n                  svg: element.outerHTML.replace(/\\n(\\s+)?/g, \"\"),\n                  nodeName: 'SVG',\n                  style: ['html-svg']\n                };\n                break;\n              }\n            case \"BR\":\n              {\n                // for BR we return '\\n'\n                ret.text = [{\n                  text: '\\n'\n                }];\n                break;\n              }\n            case \"SUB\":\n            case \"SUP\":\n              {\n                ret[nodeName.toLowerCase()] = {\n                  offset: '30%',\n                  fontSize: 8\n                };\n                break;\n              }\n            case \"HR\":\n              {\n                // default style for the HR\n                var styleHR = {\n                  width: 514,\n                  type: \"line\",\n                  margin: [0, 12, 0, 12],\n                  thickness: 0.5,\n                  color: \"#000000\",\n                  left: 0\n                };\n                // we can override the default HR style with \"data-pdfmake\"\n                if (element.dataset && element.dataset.pdfmake) {\n                  dataset = JSON.parse(element.dataset.pdfmake);\n                  for (key in dataset) {\n                    styleHR[key] = dataset[key];\n                  }\n                }\n                ret.margin = styleHR.margin;\n                ret.canvas = [{\n                  type: styleHR.type,\n                  x1: styleHR.left,\n                  y1: 0,\n                  x2: styleHR.width,\n                  y2: 0,\n                  lineWidth: styleHR.thickness,\n                  lineColor: styleHR.color\n                }];\n                delete ret.text;\n                break;\n              }\n            case \"OL\":\n            case \"UL\":\n              {\n                ret[nodeNameLowerCase] = (ret.stack || ret.text).slice(0);\n                delete ret.stack;\n                delete ret.text;\n                // apply all the inhirent classes and styles from the parents, or for the current element\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                });\n                // check if we have `start`\n                if (element.getAttribute(\"start\")) {\n                  ret.start = element.getAttribute(\"start\") * 1;\n                }\n                // check if we have \"type\"\n                switch (element.getAttribute(\"type\")) {\n                  case 'A':\n                    ret.type = 'upper-alpha';\n                    break;\n                  case 'a':\n                    ret.type = 'lower-alpha';\n                    break;\n                  case 'I':\n                    ret.type = 'upper-roman';\n                    break;\n                  case 'i':\n                    ret.type = 'lower-roman';\n                    break;\n                }\n\n                // check if we have `list-style-type` or `list-style`\n                if (ret.listStyle || ret.listStyleType) ret.type = ret.listStyle || ret.listStyleType;\n                break;\n              }\n            case \"LI\":\n              {\n                // if it's a stack, then check if the last child has a \"text\"\n                if (ret.stack && !ret.stack[ret.stack.length - 1].text) {\n                  // if not, we restructure our node\n                  text = ret.stack.slice(0, -1);\n                  ret = [{\n                    \"text\": text\n                  }, ret.stack[ret.stack.length - 1]];\n                }\n                // we don't want a child of UL/OL to be an array, but it should be a \"stack\"\n                if (Array.isArray(ret)) {\n                  ret = {\n                    stack: ret\n                  };\n                }\n                break;\n              }\n            case \"IMG\":\n              {\n                if (this.imagesByReference) {\n                  var src = element.getAttribute(\"src\");\n                  var index = this.imagesRef.indexOf(src);\n                  if (index > -1) ret.image = 'img_ref_' + index;else {\n                    ret.image = 'img_ref_' + this.imagesRef.length;\n                    this.imagesRef.push(src);\n                  }\n                } else {\n                  ret.image = element.getAttribute(\"src\");\n                }\n                delete ret.stack;\n                delete ret.text;\n                // apply all the inhirent classes and styles from the parents, or for the current element\n                ret = this.applyStyle({\n                  ret: ret,\n                  parents: parents.concat([element])\n                });\n                break;\n              }\n            case \"A\":\n              {\n                // the link must be applied to the deeper `text`\n                var setLink = function (pointer, href) {\n                  pointer = pointer || {\n                    text: ''\n                  }; // for link without any text\n                  if (Array.isArray(pointer.text)) {\n                    return setLink(pointer.text[0], href);\n                  }\n                  // if 'href' starts with '#' then it's an internal link\n                  if (href.indexOf('#') === 0) pointer.linkToDestination = href.slice(1);else pointer.link = href;\n                  pointer.nodeName = \"A\";\n                  return pointer;\n                };\n                if (element.getAttribute(\"href\")) {\n                  ret = setLink(ret, element.getAttribute(\"href\"));\n                }\n                break;\n              }\n            default:\n              {\n                // handle other cases\n                if (options && typeof options.customTag === \"function\") {\n                  ret = options.customTag.call(this, {\n                    element: element,\n                    parents: parents,\n                    ret: ret\n                  });\n                }\n              }\n          }\n\n          // reduce the number of JSON properties\n          if (Array.isArray(ret.text) && ret.text.length === 1 && ret.text[0].text && !ret.text[0].nodeName) {\n            ret.text = ret.text[0].text;\n          }\n\n          // check if we have some data-pdfmake to apply\n          if (['HR', 'TABLE'].indexOf(nodeName) === -1 && element.dataset && element.dataset.pdfmake) {\n            dataset = JSON.parse(element.dataset.pdfmake);\n            for (key in dataset) {\n              ret[key] = dataset[key];\n            }\n          }\n          return ret;\n        }\n    }\n  };\n  this.searchForStack = function (ret) {\n    if (Array.isArray(ret.text)) {\n      for (var i = 0; i < ret.text.length; i++) {\n        if (ret.text[i].stack || ['P', 'DIV', 'TABLE', 'SVG', 'UL', 'OL', 'IMG', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6'].indexOf(ret.text[i].nodeName) > -1) return true;\n        if (this.searchForStack(ret.text[i]) === true) return true;\n      }\n    }\n    return false;\n  };\n\n  /**\r\n   * Add empty cells due to rowspan\r\n   *\r\n   * @param {Object} params\r\n   *   @param {Array} rows\r\n   *   @param {Object} cell\r\n   *   @param {Number} rowIndex Current row index\r\n   *   @param {Number} cellIndex Current cell index\r\n   */\n  this.setRowSpan = function (params) {\n    var cells;\n    if (params.cell.rowSpan) {\n      for (var i = 1; i <= params.cell.rowSpan - 1; i++) {\n        cells = params.rows[params.rowIndex + i].text || params.rows[params.rowIndex + i].stack;\n        cells.splice(params.cellIndex, 0, {\n          text: ''\n        });\n      }\n    }\n  };\n\n  /**\r\n   * Apply style and classes from all the parents\r\n   *\r\n   * @param  {Object} params\r\n   *   @param {Object} ret The object that will receive the 'style' and other properties\r\n   *   @param {Array} parents Array of node elements\r\n   * @return {Object} the modified 'ret'\r\n   */\n  this.applyStyle = function (params) {\n    var cssClass = [];\n    var lastIndex = params.parents.length - 1;\n    var _this = this;\n    params.parents.forEach(function (parent, parentIndex) {\n      // classes\n      var parentNodeName = parent.nodeName.toLowerCase();\n      var htmlClass = 'html-' + parentNodeName;\n      if (htmlClass !== 'html-body' && cssClass.indexOf(htmlClass) === -1) cssClass.unshift(htmlClass);\n      var parentClass = (parent.getAttribute(\"class\") || \"\").split(' ');\n      parentClass.forEach(function (p) {\n        if (p) cssClass.push(p);\n      });\n      // styles\n      var style;\n      // not all the CSS properties should be inherent\n      var ignoreNonDescendentProperties = parentIndex !== lastIndex;\n      // 1) the default styles\n      if (_this.defaultStyles[parentNodeName]) {\n        for (style in _this.defaultStyles[parentNodeName]) {\n          if (_this.defaultStyles[parentNodeName].hasOwnProperty(style)) {\n            if (!ignoreNonDescendentProperties || ignoreNonDescendentProperties && style.indexOf('margin') === -1 && style.indexOf('border') === -1) {\n              // 'decoration' can be an array\n              if (style === 'decoration') {\n                if (!Array.isArray(params.ret[style])) params.ret[style] = [];\n                // do not apply twice the same (e.g. applying 2 \"underline\" will cause an extra blank space with an underline)\n                if (params.ret[style].indexOf(_this.defaultStyles[parentNodeName][style]) === -1) {\n                  params.ret[style].push(_this.defaultStyles[parentNodeName][style]);\n                }\n              } else {\n                params.ret[style] = JSON.parse(JSON.stringify(_this.defaultStyles[parentNodeName][style]));\n              }\n            }\n          }\n        }\n      }\n      // 2) element's style\n      // we want TD/TH to receive descendant properties from TR\n      if (parentNodeName === 'tr') ignoreNonDescendentProperties = false;\n      style = _this.parseStyle(parent, ignoreNonDescendentProperties);\n      style.forEach(function (stl) {\n        // 'decoration' can be an array\n        if (stl.key === \"decoration\") {\n          if (!Array.isArray(params.ret[stl.key])) params.ret[stl.key] = [];\n          params.ret[stl.key].push(stl.value);\n        } else {\n          // when 'params.ret.margin' is defined but also a 'marginXYZ' is defined in `stl.key`,\n          // then we should change the correct index in `params.ret.margin` to reflect it\n          if (params.ret.margin && stl.key.indexOf('margin') === 0) {\n            // order: left | top | right | bottom\n            switch (stl.key) {\n              case \"marginLeft\":\n                params.ret.margin[0] = stl.value;\n                break;\n              case \"marginTop\":\n                params.ret.margin[1] = stl.value;\n                break;\n              case \"marginRight\":\n                params.ret.margin[2] = stl.value;\n                break;\n              case \"marginBottom\":\n                params.ret.margin[3] = stl.value;\n                break;\n            }\n          } else {\n            params.ret[stl.key] = stl.value;\n          }\n        }\n      });\n    });\n    params.ret.style = cssClass;\n    return params.ret;\n  };\n\n  /**\r\n   * Transform a CSS expression (e.g. 'margin:10px') in the PDFMake version\r\n   *\r\n   * @param {String} style The CSS expression to transform\r\n   * @param {DOMElement} element\r\n   * @param {Boolean} ignoreProperties TRUE when we have to ignore some properties, like border, padding, margin\r\n   * @returns {Array} array of {key, value}\r\n   */\n  this.parseStyle = function (element, ignoreProperties) {\n    var style = element.getAttribute(\"style\") || \"\";\n    var ret = [];\n    style = style.split(';');\n    // check if we have \"width\" or \"height\"\n    var width = element.getAttribute(\"width\");\n    var height = element.getAttribute(\"height\");\n    if (width) {\n      style.unshift(\"width:\" + this.convertToUnit(width + (isNaN(width) ? \"\" : \"px\")));\n    }\n    if (height) {\n      style.unshift(\"height:\" + this.convertToUnit(height + (isNaN(height) ? \"\" : \"px\")));\n    }\n    // check if we have 'color' or 'size' -- mainly for '<font>'\n    var color = element.getAttribute(\"color\");\n    if (color) {\n      ret.push({\n        key: \"color\",\n        value: this.parseColor(color)\n      });\n    }\n    var size = element.getAttribute(\"size\");\n    if (size !== null) {\n      // Getting and sanitizing the size value: it should be included between 1 and 7\n      size = Math.min(Math.max(1, parseInt(size)), 7);\n      // Assigning the font size\n      ret.push({\n        key: 'fontSize',\n        value: Math.max(this.fontSizes[0], this.fontSizes[size - 1])\n      });\n    }\n    var styleDefs = style.map(function (style) {\n      return style.toLowerCase().split(':');\n    });\n    var borders = []; // special treatment for borders\n    var nodeName = element.nodeName.toUpperCase();\n    var _this = this;\n    styleDefs.forEach(function (styleDef) {\n      if (styleDef.length === 2) {\n        var key = styleDef[0].trim();\n        var value = styleDef[1].trim();\n        switch (key) {\n          case \"margin\":\n            {\n              if (ignoreProperties) break;\n              // pdfMake uses a different order than CSS\n              value = value.split(' ');\n              if (value.length === 1) value = [value[0], value[0], value[0], value[0]];else if (value.length === 2) value = [value[1], value[0]]; // vertical | horizontal ==> horizontal | vertical\n              else if (value.length === 3) value = [value[1], value[0], value[1], value[2]]; // top | horizontal | bottom ==> left | top | right | bottom\n              else if (value.length === 4) value = [value[3], value[0], value[1], value[2]]; // top | right | bottom | left ==> left | top | right | bottom\n\n              // we now need to convert to PT\n              value.forEach(function (val, i) {\n                value[i] = _this.convertToUnit(val);\n              });\n              // ignore if we have a FALSE in the table\n              if (value.indexOf(false) === -1) ret.push({\n                key: key,\n                value: value\n              });\n              break;\n            }\n          case \"line-height\":\n            {\n              // change % unit\n              if (typeof value === \"string\" && value.slice(-1) === '%') {\n                value = value.slice(0, -1) / 100;\n              } else {\n                value = _this.convertToUnit(value);\n              }\n              ret.push({\n                key: \"lineHeight\",\n                value: value\n              });\n              break;\n            }\n          case \"text-align\":\n            {\n              ret.push({\n                key: \"alignment\",\n                value: value\n              });\n              break;\n            }\n          case \"font-weight\":\n            {\n              if (value === \"bold\") ret.push({\n                key: \"bold\",\n                value: true\n              });\n              break;\n            }\n          case \"text-decoration\":\n            {\n              ret.push({\n                key: \"decoration\",\n                value: _this.toCamelCase(value)\n              });\n              break;\n            }\n          case \"font-style\":\n            {\n              if (value === \"italic\") ret.push({\n                key: \"italics\",\n                value: true\n              });\n              break;\n            }\n          case \"font-family\":\n            {\n              ret.push({\n                key: \"font\",\n                value: value.split(',')[0].replace(/\"|^'|^\\s*|\\s*$|'$/g, \"\").replace(/^([a-z])/g, function (g) {\n                  return g[0].toUpperCase();\n                }).replace(/ ([a-z])/g, function (g) {\n                  return g[1].toUpperCase();\n                })\n              });\n              break;\n            }\n          case \"color\":\n            {\n              ret.push({\n                key: \"color\",\n                value: _this.parseColor(value)\n              });\n              break;\n            }\n          case \"background-color\":\n            {\n              // if TH/TD and key is 'background', then we use 'fillColor' instead\n              ret.push({\n                key: nodeName === 'TD' || nodeName === 'TH' ? \"fillColor\" : \"background\",\n                value: _this.parseColor(value)\n              });\n              break;\n            }\n          case \"text-indent\":\n            {\n              ret.push({\n                key: \"leadingIndent\",\n                value: _this.convertToUnit(value)\n              });\n              break;\n            }\n          case \"white-space\":\n            {\n              ret.push({\n                key: \"preserveLeadingSpaces\",\n                value: value === 'break-spaces' || value.slice(0, 3) === 'pre'\n              });\n              break;\n            }\n          default:\n            {\n              // for borders\n              if (key === 'border' || key.indexOf('border-left') === 0 || key.indexOf('border-top') === 0 || key.indexOf('border-right') === 0 || key.indexOf('border-bottom') === 0) {\n                if (!ignoreProperties) borders.push({\n                  key: key,\n                  value: value\n                });\n              } else {\n                // ignore some properties\n                if (ignoreProperties && (key.indexOf(\"margin-\") === 0 || key === 'width' || key === 'height')) break;\n                // padding is not supported by PDFMake\n                if (key.indexOf(\"padding\") === 0) break;\n                if (key.indexOf(\"-\") > -1) key = _this.toCamelCase(key);\n                if (value) {\n                  // convert value to a 'pt' when possible\n                  var parsedValue = _this.convertToUnit(value);\n                  // if we have 'font-size' with a parsedValue at false, then ignore it\n                  if (key === 'font-size' && parsedValue === false) break;\n                  ret.push({\n                    key: key,\n                    value: parsedValue === false ? value : parsedValue\n                  });\n                }\n              }\n            }\n        }\n      }\n    });\n    // for borders\n    if (borders.length > 0) {\n      // we have to merge together the borders in two properties\n      var border = []; // array of boolean\n      var borderColor = []; // array of colors\n      borders.forEach(function (b) {\n        // we have 3 properties: width style color\n        var properties = b.value.split(' ');\n        var width = properties[0].replace(/(\\d*)(\\.\\d+)?([^\\d]+)/g, \"$1$2 \").trim();\n        var index = -1,\n          i;\n        if (b.key.indexOf('-left') > -1) index = 0;else if (b.key.indexOf('-top') > -1) index = 1;else if (b.key.indexOf('-right') > -1) index = 2;else if (b.key.indexOf('-bottom') > -1) index = 3;\n        // for the width\n        if (index > -1) {\n          border[index] = width > 0;\n        } else {\n          for (i = 0; i < 4; i++) border[i] = width > 0;\n        }\n        // for the color\n        if (properties.length > 2) {\n          var color = properties.slice(2).join(' ');\n          if (index > -1) {\n            borderColor[index] = _this.parseColor(color);\n          } else {\n            for (i = 0; i < 4; i++) borderColor[i] = _this.parseColor(color);\n          }\n        }\n      });\n      // fill the gaps\n      for (var i = 0; i < 4; i++) {\n        if (border.length > 0 && typeof border[i] === \"undefined\") border[i] = true;\n        if (borderColor.length > 0 && typeof borderColor[i] === \"undefined\") borderColor[i] = '#000000';\n      }\n      if (border.length > 0) ret.push({\n        key: 'border',\n        value: border\n      });\n      if (borderColor.length > 0) ret.push({\n        key: 'borderColor',\n        value: borderColor\n      });\n    }\n    return ret;\n  };\n  this.toCamelCase = function (str) {\n    return str.replace(/-([a-z])/g, function (g) {\n      return g[1].toUpperCase();\n    });\n  };\n\n  // input: h in [0,360] and s,v in [0,1] - output: \"rgb(0–255,0–255,0–255)\"\"\n  // source: https://stackoverflow.com/a/54014428/1134119 + https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion#comment58413965_9493060\n  this.hsl2rgb = function (h, s, l) {\n    var a = s * Math.min(l, 1 - l);\n    var f = function (n) {\n      var k = (n + h / 30) % 12;\n      return Math.min(Math.floor((l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1)) * 256), 255);\n    };\n    return \"rgb(\" + f(0) + \",\" + f(8) + \",\" + f(4) + \")\";\n  };\n\n  /**\r\n   * Returns the color in a hex format (e.g. #12ff00).\r\n   * Also tries to convert RGB colors into hex values\r\n   *\r\n   * @param color color as string representation\r\n   * @returns color as hex values for pdfmake\r\n   */\n  this.parseColor = function (color) {\n    // e.g. `#fff` or `#ff0048`\n    var haxRegex = new RegExp('^#([0-9a-f]{3}|[0-9a-f]{6})$');\n\n    // e.g. rgb(0,255,34) or rgb(22, 0, 0) or rgb(100%, 100%, 100%)\n    var rgbRegex = new RegExp('^rgb\\\\((\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?)\\\\)$');\n\n    // e.g. hsl(300, 10%, 20%)\n    var hslRegex = new RegExp('^hsl\\\\((\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?)\\\\)$');\n\n    // e.g. \"white\" or \"red\"\n    var nameRegex = new RegExp('^[a-z]+$');\n    var decimalColors,\n      decimalValue,\n      hexString,\n      i,\n      ret = [];\n    if (haxRegex.test(color)) {\n      return color;\n    }\n    if (hslRegex.test(color)) {\n      // we want to convert to RGB\n      decimalColors = hslRegex.exec(color).slice(1);\n      // first value should be from 0 to 360\n      if (decimalColors[0].endsWith('%')) decimalValue = decimalColors[0].slice(0, -1) * 360 / 100;else decimalValue = decimalColors[0] * 1;\n      ret.push(decimalValue);\n      // next values should be % to convert to base 1\n      ret.push(decimalColors[2].slice(0, -1) / 100);\n      ret.push(decimalColors[4].slice(0, -1) / 100);\n      color = this.hsl2rgb(ret[0], ret[1], ret[2]);\n      ret = [];\n    }\n    if (rgbRegex.test(color)) {\n      decimalColors = rgbRegex.exec(color).slice(1);\n      for (i = 0; i < 6; i += 2) {\n        decimalValue = decimalColors[i];\n        // if it ends with '%', we calculcate based on 100%=255\n        if (decimalValue.endsWith('%')) {\n          decimalValue = Math.round(decimalValue.slice(0, -1) * 255 / 100);\n        } else decimalValue = decimalValue * 1;\n        if (decimalValue > 255) {\n          decimalValue = 255;\n        }\n        hexString = '0' + decimalValue.toString(16);\n        hexString = hexString.slice(-2);\n        ret.push(hexString);\n      }\n      return '#' + ret.join('');\n    }\n    if (nameRegex.test(color)) {\n      return color === \"transparent\" ? \"white\" : color;\n    }\n    console.error('Could not parse color \"' + color + '\"');\n    return color;\n  };\n\n  /**\r\n   * Convert 'px'/'rem'/'cm'/'em' to 'pt', and return false for the other ones. If it's only a number, it will just return it\r\n   *\r\n   * @param  {String} val The value with units (e.g. 12px)\r\n   * @return {Number|Boolean} Return the pt value, or false\r\n   */\n  this.convertToUnit = function (val) {\n    // if it's just a number, then return it\n    if (!isNaN(parseFloat(val)) && isFinite(val)) return val * 1;\n    var mtch = (val + \"\").trim().match(/^(\\d*(\\.\\d+)?)(pt|px|r?em|cm)$/);\n    // if we don't have a number with supported units, then return false\n    if (!mtch) return false;\n    val = mtch[1];\n    switch (mtch[3]) {\n      case 'px':\n        {\n          val = Math.round(val * 0.75292857248934); // 1px => 0.75292857248934pt\n          break;\n        }\n      case 'em':\n      case 'rem':\n        {\n          val *= 12; // default font-size is 12pt\n          break;\n        }\n      case 'cm':\n        {\n          val = Math.round(val * 28.34646); // 1cm => 28.34646\n          break;\n        }\n    }\n    return val * 1;\n  };\n  var result = this.convertHtml(htmlText);\n  // if we only pass a string without HTML code\n  if (typeof result === \"string\") result = {\n    text: result\n  };\n  // if images by reference\n  if (this.imagesByReference) {\n    result = {\n      content: result,\n      images: {}\n    };\n    this.imagesRef.forEach(function (src, i) {\n      result.images['img_ref_' + i] = src;\n    });\n  }\n  return result;\n}\nmodule.exports = function (htmlText, options) {\n  return new htmlToPdfMake(htmlText, options);\n};","map":{"version":3,"names":["htmlToPdfMake","htmlText","options","wndw","window","tableAutoSize","imagesByReference","removeExtraBlanks","fontSizes","Array","isArray","defaultStyles","b","bold","strong","u","decoration","del","s","em","italics","i","h1","fontSize","marginBottom","h2","h3","h4","h5","h6","a","color","strike","p","margin","ul","marginLeft","table","th","fillColor","imagesRef","changeDefaultStyles","keyStyle","hasOwnProperty","k","ks","convertHtml","parser","DOMParser","replace","parsedHtml","parseFromString","docDef","parseElement","body","stack","text","element","parents","nodeName","toUpperCase","nodeNameLowerCase","toLowerCase","ret","needStack","dataset","key","_this","indexOf","nodeType","textContent","styleParentTextNode","parseStyle","length","hasWhiteSpace","value","replaceText","applyStyle","id","push","childNodes","forEach","call","child","res","searchForStack","slice","pop","rowIndex","cellIndex","tbodies","allRows","tbody","rows","concat","row","cells","cell","colSpan","setRowSpan","cellsWidths","cellsHeights","tableWidths","tableHeights","fullWidth","getAttribute","includes","width","height","isNaN","rowSpan","cellWidth","type","cellHeight","map","w","widths","heights","pdfmake","charAt","JSON","parse","layout","e","console","error","svg","outerHTML","style","offset","styleHR","thickness","left","canvas","x1","y1","x2","y2","lineWidth","lineColor","start","listStyle","listStyleType","src","index","image","setLink","pointer","href","linkToDestination","link","customTag","params","splice","cssClass","lastIndex","parent","parentIndex","parentNodeName","htmlClass","unshift","parentClass","split","ignoreNonDescendentProperties","stringify","stl","ignoreProperties","convertToUnit","parseColor","size","Math","min","max","parseInt","styleDefs","borders","styleDef","trim","val","toCamelCase","g","parsedValue","border","borderColor","properties","join","str","hsl2rgb","h","l","f","n","floor","haxRegex","RegExp","rgbRegex","hslRegex","nameRegex","decimalColors","decimalValue","hexString","test","exec","endsWith","round","toString","parseFloat","isFinite","mtch","match","result","content","images","module","exports"],"sources":["C:/Users/guzny/OneDrive/Рабочий стол/frontend/node_modules/html-to-pdfmake/index.js"],"sourcesContent":["// source: https://github.com/OpenSlides/OpenSlides/blob/f4f8b8422f9b3fbab58e35ac3f8f870d35813b7d/client/src/app/core/ui-services/html-to-pdf.service.ts\r\n// and https://github.com/bpampuch/pdfmake/issues/205\r\n\r\n/**\r\n  To use it:\r\n  import htmlToPdfMake from 'html-to-pdfmake.js'\r\n  htmlToPdfMake('<b>my bold text</b>');\r\n*/\r\n\r\n/**\r\n * Transform HTML code to a PdfMake object\r\n * @param  {String} htmlText The HTML code to transform\r\n * @param  {Object} [options]\r\n *   @param  {Object} [defaultStyles] An object with the default styles for each elements\r\n *   @param  {Boolean} [tableAutoSize=false] It permits to use the width/height defined in styles for a table's cells and rows\r\n *   @param  {Boolean} [imagesByReference=false] It permits to return two objets ({content, images}) to handle the `<img>` tags by reference\r\n *   @param  {Boolean} [removeExtraBlanks=false] Some blank spaces in your code may cause extra blank lines in the PDF – use this option to remove them\r\n *   @param  {Function} [customTag] It permits to handle non-regular HTML tag\r\n *   @param  {Object} [window] The `window` object (required for NodeJS server side use)\r\n * @return {Object} it returns a PdfMake object\r\n *\r\n * @example\r\n * // Some styles are applied by defaults for the supported HTML elements\r\n * // but you can pass your own styles if you prefer\r\n * htmlToPdfMake('<div><h1>My Title</h1><p>My paragraph</p></div>');\r\n *\r\n * // If you want to overwrite the default styles, e.g. you want <li> to not have a margin-left, and links to be 'purple' and not 'blue', and links without 'underline'\r\n * htmlToPdfMake('<ul><li>this is <a href=\"...\">a link</a></li><li>another item</li></ul>', {\r\n *   defaultStyles:{\r\n *     a:{\r\n *       color:'purple',\r\n *       decoration:null\r\n *     },\r\n *     li:null\r\n *   }\r\n * });\r\n */\r\n//var util = require(\"util\"); // to debug\r\nfunction htmlToPdfMake(htmlText, options) {\r\n  'use strict';\r\n  this.wndw = (options && options.window ? options.window : window);\r\n  this.tableAutoSize = (options && typeof options.tableAutoSize === \"boolean\" ? options.tableAutoSize : false);\r\n  this.imagesByReference = (options && typeof options.imagesByReference === \"boolean\" ? options.imagesByReference : false);\r\n  this.removeExtraBlanks = (options && typeof options.removeExtraBlanks === \"boolean\" ? options.removeExtraBlanks : false);\r\n\r\n  // Used with the size attribute on the font elements to calculate relative font size\r\n  this.fontSizes = (options && Array.isArray(options.fontSizes) ? options.fontSizes : [10, 14, 16, 18, 20, 24, 28]);\r\n\r\n  // set default styles\r\n  this.defaultStyles = {\r\n    b: {bold:true},\r\n    strong: {bold:true},\r\n    u: {decoration:'underline'},\r\n    del: {decoration:'lineThrough'},\r\n    s: {decoration: 'lineThrough'},\r\n    em: {italics:true},\r\n    i: {italics:true},\r\n    h1: {fontSize:24, bold:true, marginBottom:5},\r\n    h2: {fontSize:22, bold:true, marginBottom:5},\r\n    h3: {fontSize:20, bold:true, marginBottom:5},\r\n    h4: {fontSize:18, bold:true, marginBottom:5},\r\n    h5: {fontSize:16, bold:true, marginBottom:5},\r\n    h6: {fontSize:14, bold:true, marginBottom:5},\r\n    a: {color:'blue', decoration:'underline'},\r\n    strike: {decoration: 'lineThrough'},\r\n    p: {margin:[0, 5, 0, 10]},\r\n    ul: {marginBottom:5,marginLeft:5},\r\n    table: {marginBottom:5},\r\n    th: {bold:true, fillColor:'#EEEEEE'}\r\n  }\r\n\r\n  // store the references to the images\r\n  this.imagesRef = [];\r\n\r\n  /**\r\n   * Permit to change the default styles based on the options\r\n   */\r\n  this.changeDefaultStyles = function () {\r\n    for (var keyStyle in options.defaultStyles) {\r\n      if (this.defaultStyles.hasOwnProperty(keyStyle)) {\r\n        // if we want to remove a default style\r\n        if (options.defaultStyles.hasOwnProperty(keyStyle) && !options.defaultStyles[keyStyle]) {\r\n          delete this.defaultStyles[keyStyle];\r\n        } else {\r\n          for (var k in options.defaultStyles[keyStyle]) {\r\n            // if we want to delete a specific property\r\n            if (options.defaultStyles[keyStyle][k] === '') delete this.defaultStyles[keyStyle][k];\r\n            else this.defaultStyles[keyStyle][k] = options.defaultStyles[keyStyle][k];\r\n          }\r\n        }\r\n      } else {\r\n        // if we add default styles\r\n        this.defaultStyles[keyStyle] = {}\r\n        for (var ks in options.defaultStyles[keyStyle]) {\r\n          this.defaultStyles[keyStyle][ks] = options.defaultStyles[keyStyle][ks];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (options && options.defaultStyles) {\r\n    this.changeDefaultStyles();\r\n  }\r\n\r\n  /**\r\n   * Takes an HTML string, converts to HTML using a DOM parser and recursivly parses\r\n   * the content into pdfmake compatible doc definition\r\n   *\r\n   * @param htmlText the html text to translate as string\r\n   * @returns pdfmake doc definition as object\r\n   */\r\n  this.convertHtml = function(htmlText) {\r\n    // Create a HTML DOM tree out of html string\r\n    var parser = new this.wndw.DOMParser();\r\n    if (this.removeExtraBlanks) htmlText = htmlText.replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|li))/gi, \"$1$4\").replace(/(<\\/?(div|p|h1|h2|h3|h4|h5|h6|li)([^>]+)?>)\\s+(<\\/?(div|p|h1|h2|h3|h4|h5|h6|li))/gi, \"$1$4\");\r\n    var parsedHtml = parser.parseFromString(htmlText, 'text/html');\r\n\r\n    var docDef = this.parseElement(parsedHtml.body, []);\r\n\r\n    // remove first level\r\n    return docDef.stack || docDef.text;\r\n  }\r\n\r\n  /**\r\n   * Converts a single HTML element to pdfmake, calls itself recursively for child html elements\r\n   *\r\n   * @param element can be an HTML element (<p>) or plain text (\"Hello World\")\r\n   * @param parentNode the parent node for the current element\r\n   * @param parents Array of node names of all the parents for the element\r\n   * @returns the doc def to the given element in consideration to the given paragraph and styles\r\n   */\r\n  this.parseElement = function(element, parents) {\r\n    var nodeName = element.nodeName.toUpperCase();\r\n    var nodeNameLowerCase = nodeName.toLowerCase();\r\n    var ret = {text:[]};\r\n    var text, needStack=false;\r\n    var dataset, i, key, _this=this;\r\n\r\n    // ignore some HTML tags\r\n    if (['COLGROUP','COL'].indexOf(nodeName) > -1) return '';\r\n\r\n    switch(element.nodeType) {\r\n      case 3: { // TEXT_NODE\r\n        if (element.textContent) {\r\n          text = element.textContent;\r\n          // check if we have 'white-space' in the parent's style\r\n          var styleParentTextNode = this.parseStyle(parents[parents.length-1], true);\r\n          var hasWhiteSpace = false;\r\n          for (i=0; i<styleParentTextNode.length; i++) {\r\n            if (styleParentTextNode[i].key === \"preserveLeadingSpaces\") {\r\n              hasWhiteSpace=styleParentTextNode[i].value;\r\n              break;\r\n            }\r\n          }\r\n          // if no 'white-space' style, then deal with white spaces\r\n          if (!hasWhiteSpace) text = text.replace(/\\s*\\n\\s*/g, \" \");\r\n          if (options && typeof options.replaceText === \"function\") text = options.replaceText(text, parents);\r\n\r\n          // for table, thead, tbody, tfoot, tr, ul, ol: remove all empty space\r\n          if (['TABLE','THEAD','TBODY','TFOOT','TR','UL','OL'].indexOf(parents[parents.length-1].nodeName) > -1) text = text.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n          if (text) {\r\n            ret = {'text':text};\r\n            ret = this.applyStyle({ret:ret, parents:parents});\r\n            return ret;\r\n          }\r\n        }\r\n\r\n        return '';\r\n      }\r\n      case 1: { // ELEMENT_NODE\r\n        ret.nodeName = nodeName;\r\n        if (element.id) ret.id = element.id;\r\n        parents.push(element);\r\n\r\n        if (element.childNodes && element.childNodes.length>0) {\r\n          [].forEach.call(element.childNodes, function(child) {\r\n            var res = _this.parseElement(child, parents);\r\n            if (res) {\r\n              if (Array.isArray(res.text) && res.text.length===0) res.text='';\r\n              ret.text.push(res);\r\n            }\r\n          });\r\n          //console.log(nodeName,'=>',util.inspect(ret.text, {showHidden: false, depth: null})); // to debug\r\n          // find if we need a 'stack' instead of a 'text'\r\n          needStack = this.searchForStack(ret);\r\n          if (needStack) {\r\n            ret.stack = ret.text.slice(0);\r\n            delete ret.text;\r\n          } else {\r\n            // apply all the inhirent classes and styles from the parents\r\n            ret = this.applyStyle({ret:ret, parents:parents});\r\n          }\r\n        }\r\n        parents.pop();\r\n\r\n        switch(nodeName) {\r\n          case \"TABLE\":{\r\n            var rowIndex, cellIndex;\r\n            // the format for the table is table.body[[], [], …]\r\n            ret.table = {body:[]};\r\n\r\n            var tbodies = (ret.stack || ret.text);\r\n            if (Array.isArray(tbodies)) {\r\n              rowIndex = 0;\r\n              // Array with All Rows including THEAD\r\n              var allRows = [];\r\n              // for each THEAD / TBODY\r\n              tbodies.forEach(function(tbody) {\r\n                // for each row\r\n                var rows = (tbody.stack || tbody.text);\r\n                if (Array.isArray(rows)) {\r\n                  // Add rows to allRows\r\n                  allRows = allRows.concat(rows);\r\n                  rows.forEach(function(row) {\r\n                    var cells = (row.stack || row.text);\r\n                    // for each cell\r\n                    if (Array.isArray(cells)) {\r\n                      cellIndex = 0;\r\n                      ret.table.body[rowIndex] = [];\r\n                      cells.forEach(function(cell) {\r\n                        ret.table.body[rowIndex].push(cell);\r\n\r\n                        // do we have a colSpan?\r\n                        // if yes, insert empty cells due to colspan\r\n                        if (cell.colSpan>1) {\r\n                          i = cell.colSpan;\r\n                          // do we have a rowSpan in addition of the colSpan?\r\n                          _this.setRowSpan({rows:allRows, cell:cell, rowIndex:rowIndex, cellIndex:cellIndex});\r\n                          while (--i > 0) {\r\n                            ret.table.body[rowIndex].push({text:''});\r\n                            // keep adding empty cell due to rowspan\r\n                            _this.setRowSpan({rows:allRows, cell:cell, rowIndex:rowIndex, cellIndex:cellIndex});\r\n                            cellIndex++;\r\n                          }\r\n                        } else {\r\n                          // do we have a rowSpan ?\r\n                          _this.setRowSpan({rows:allRows, cell:cell, rowIndex:rowIndex, cellIndex:cellIndex});\r\n                        }\r\n\r\n                        cellIndex++;\r\n                      });\r\n                      rowIndex++;\r\n                    }\r\n                 });\r\n                }\r\n              });\r\n            }\r\n\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n\r\n            // if option tableAutoSize, then we try to apply the correct width/height on the table\r\n            if (this.tableAutoSize) {\r\n              var cellsWidths = [];\r\n              var cellsHeights = [];\r\n              var tableWidths = [];\r\n              var tableHeights = [];\r\n              // determine if we have \"width:100%\" on the TABLE\r\n              var fullWidth = (element.getAttribute(\"width\") === \"100%\" || (element.getAttribute(\"style\")||\"\").replace(/width\\s*:\\s*100%/, \"width:100%\").includes(\"width:100%\"));\r\n\r\n              ret.table.body.forEach(function(row, rowIndex) {\r\n                cellsWidths.push([]);\r\n                cellsHeights.push([]);\r\n                row.forEach(function(cell) {\r\n                  // we want to remember the different sizes\r\n                  var width = typeof cell.width !== 'undefined' ? cell.width : 'auto';\r\n                  var height = typeof cell.height !== 'undefined' ? cell.height : 'auto';\r\n                  // check if we have colspan or rowspan\r\n                  // if yes, and if width/height is a number, we divide by the col/rowspan, otherwise we use 'auto'\r\n                  if (width !== 'auto' && cell.colSpan>1) {\r\n                    if (!isNaN(width)) width /= cell.colSpan;\r\n                    else width = 'auto';\r\n                  }\r\n                  if (height !== 'auto' && cell.rowSpan>1) {\r\n                    if (!isNaN(height)) height /= cell.rowSpan;\r\n                    else height = 'auto';\r\n                  }\r\n                  cellsWidths[rowIndex].push(width);\r\n                  cellsHeights[rowIndex].push(height);\r\n                });\r\n              });\r\n\r\n              // determine the max width for each cell\r\n              cellsWidths.forEach(function(row) {\r\n                row.forEach(function(cellWidth, cellIndex) {\r\n                  var type = typeof tableWidths[cellIndex];\r\n                  if (type === \"undefined\" || (cellWidth !== 'auto' && type === \"number\" && cellWidth > tableWidths[cellIndex]) || (cellWidth !== 'auto' && tableWidths[cellIndex] === 'auto')) {\r\n                    tableWidths[cellIndex] = cellWidth;\r\n                  }\r\n                });\r\n              });\r\n              // determine the max height for each row\r\n              cellsHeights.forEach(function(row, rowIndex) {\r\n                row.forEach(function(cellHeight) {\r\n                  var type = typeof tableHeights[rowIndex];\r\n                  if (type === \"undefined\" || (cellHeight !== 'auto' && type === \"number\" && cellHeight > tableHeights[rowIndex]) || (cellHeight !== 'auto' && tableHeights[rowIndex] === 'auto')) {\r\n                    tableHeights[rowIndex] = cellHeight;\r\n                  }\r\n                });\r\n              });\r\n              if (tableWidths.length > 0) {\r\n                // if all columns are in 'auto' and if we have 'width:\"100%\"' for the table\r\n                // then put widths:['*', '*' …], for all columns\r\n                //if (fullWidth && tableWidths.filter(function(w) { return w==='auto' }).length === tableWidths.length) tableWidths=tableWidths.map(function() { return '*' });\r\n                // see https://github.com/Aymkdn/html-to-pdfmake/issues/151#issuecomment-1273015585\r\n                // if we have 'width:\"100%\"' for the table, replace \"auto\" width to \"*\"\r\n                if (fullWidth) tableWidths=tableWidths.map(function(w) { return w==='auto' ? '*' : w });\r\n                ret.table.widths = tableWidths;\r\n              }\r\n              if (tableHeights.length > 0) ret.table.heights = tableHeights;\r\n            }\r\n\r\n\r\n            // check if we have some data-pdfmake to apply\r\n            if (element.dataset && element.dataset.pdfmake) {\r\n              // handle when people will use simple quotes, e.g. <table data-pdfmake=\"{'layout':'noBorders'}\">\r\n              dataset = element.dataset.pdfmake;\r\n              if (dataset.charAt(1) === \"'\") dataset=dataset.replace(/'/g,'\"');\r\n              try {\r\n                dataset = JSON.parse(dataset);\r\n                for (key in dataset) {\r\n                  if (key === \"layout\") {\r\n                    ret.layout = dataset[key];\r\n                  } else {\r\n                    ret.table[key] = dataset[key];\r\n                  }\r\n                }\r\n              } catch(e) {\r\n                console.error(e);\r\n              }\r\n            }\r\n            break;\r\n          }\r\n          case \"TH\":\r\n          case \"TD\":{\r\n            if (element.getAttribute(\"rowspan\")) ret.rowSpan = element.getAttribute(\"rowspan\")*1;\r\n            if (element.getAttribute(\"colspan\")) ret.colSpan = element.getAttribute(\"colspan\")*1;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            break;\r\n          }\r\n          case \"SVG\": {\r\n            ret = {\r\n              svg:element.outerHTML.replace(/\\n(\\s+)?/g, \"\"),\r\n              nodeName:'SVG',\r\n              style:['html-svg']\r\n            }\r\n            break;\r\n          }\r\n          case \"BR\": {\r\n            // for BR we return '\\n'\r\n            ret.text = [{text:'\\n'}];\r\n            break;\r\n          }\r\n          case \"SUB\":\r\n          case \"SUP\": {\r\n            ret[nodeName.toLowerCase()] = { offset: '30%', fontSize: 8 };\r\n            break;\r\n          }\r\n          case \"HR\": {\r\n            // default style for the HR\r\n            var styleHR = {\r\n              width: 514,\r\n              type: \"line\",\r\n              margin: [0, 12, 0, 12],\r\n              thickness: 0.5,\r\n              color: \"#000000\",\r\n              left: 0\r\n            };\r\n            // we can override the default HR style with \"data-pdfmake\"\r\n            if (element.dataset && element.dataset.pdfmake) {\r\n              dataset = JSON.parse(element.dataset.pdfmake);\r\n              for (key in dataset) {\r\n                styleHR[key] = dataset[key];\r\n              }\r\n            }\r\n\r\n            ret.margin = styleHR.margin;\r\n            ret.canvas = [\r\n              {\r\n                type: styleHR.type,\r\n                x1: styleHR.left,\r\n                y1: 0,\r\n                x2: styleHR.width,\r\n                y2: 0,\r\n                lineWidth: styleHR.thickness,\r\n                lineColor: styleHR.color\r\n              }\r\n            ];\r\n            delete ret.text;\r\n\r\n            break;\r\n          }\r\n          case \"OL\":\r\n          case \"UL\": {\r\n            ret[nodeNameLowerCase] = (ret.stack || ret.text).slice(0);\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            // check if we have `start`\r\n            if (element.getAttribute(\"start\")) {\r\n              ret.start = element.getAttribute(\"start\")*1;\r\n            }\r\n            // check if we have \"type\"\r\n            switch (element.getAttribute(\"type\")) {\r\n              case 'A': ret.type = 'upper-alpha'; break;\r\n              case 'a': ret.type = 'lower-alpha'; break;\r\n              case 'I': ret.type = 'upper-roman'; break;\r\n              case 'i': ret.type = 'lower-roman'; break;\r\n            }\r\n            \r\n            // check if we have `list-style-type` or `list-style`\r\n            if (ret.listStyle || ret.listStyleType) ret.type = ret.listStyle || ret.listStyleType;\r\n            break;\r\n          }\r\n          case \"LI\": {\r\n            // if it's a stack, then check if the last child has a \"text\"\r\n            if (ret.stack && !ret.stack[ret.stack.length-1].text) {\r\n              // if not, we restructure our node\r\n              text = ret.stack.slice(0, -1);\r\n              ret = [ {\"text\": text}, ret.stack[ret.stack.length-1] ];\r\n            }\r\n            // we don't want a child of UL/OL to be an array, but it should be a \"stack\"\r\n            if (Array.isArray(ret)) {\r\n              ret = {stack:ret};\r\n            }\r\n            break;\r\n          }\r\n          case \"IMG\": {\r\n            if (this.imagesByReference) {\r\n              var src = element.getAttribute(\"src\");\r\n              var index = this.imagesRef.indexOf(src);\r\n              if (index>-1) ret.image = 'img_ref_'+index;\r\n              else {\r\n                ret.image = 'img_ref_'+this.imagesRef.length;\r\n                this.imagesRef.push(src);\r\n              }\r\n            } else {\r\n              ret.image = element.getAttribute(\"src\");\r\n            }\r\n            delete ret.stack;\r\n            delete ret.text;\r\n            // apply all the inhirent classes and styles from the parents, or for the current element\r\n            ret = this.applyStyle({ret:ret, parents:parents.concat([element])});\r\n            break;\r\n          }\r\n          case \"A\": {\r\n            // the link must be applied to the deeper `text`\r\n            var setLink = function(pointer, href) {\r\n              pointer = pointer || {text:''}; // for link without any text\r\n              if (Array.isArray(pointer.text)) {\r\n                return setLink(pointer.text[0], href);\r\n              }\r\n              // if 'href' starts with '#' then it's an internal link\r\n              if (href.indexOf('#') === 0) pointer.linkToDestination=href.slice(1);\r\n              else pointer.link = href;\r\n              pointer.nodeName = \"A\";\r\n              return pointer;\r\n            }\r\n            if (element.getAttribute(\"href\")) {\r\n              ret = setLink(ret, element.getAttribute(\"href\"));\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            // handle other cases\r\n            if (options && typeof options.customTag === \"function\") {\r\n              ret = options.customTag.call(this, {element:element, parents:parents, ret:ret});\r\n            }\r\n          }\r\n        }\r\n\r\n        // reduce the number of JSON properties\r\n        if (Array.isArray(ret.text) && ret.text.length === 1 && ret.text[0].text && !ret.text[0].nodeName) {\r\n          ret.text = ret.text[0].text;\r\n        }\r\n\r\n        // check if we have some data-pdfmake to apply\r\n        if (['HR','TABLE'].indexOf(nodeName) === -1 && element.dataset && element.dataset.pdfmake) {\r\n          dataset = JSON.parse(element.dataset.pdfmake);\r\n          for (key in dataset) {\r\n            ret[key] = dataset[key];\r\n          }\r\n        }\r\n\r\n        return ret;\r\n      }\r\n    }\r\n  }\r\n\r\n  this.searchForStack = function(ret) {\r\n    if (Array.isArray(ret.text)) {\r\n      for (var i=0; i<ret.text.length; i++) {\r\n        if (ret.text[i].stack || ['P','DIV','TABLE','SVG','UL','OL','IMG','H1','H2','H3','H4','H5','H6'].indexOf(ret.text[i].nodeName) > -1) return true;\r\n        if (this.searchForStack(ret.text[i]) === true) return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Add empty cells due to rowspan\r\n   *\r\n   * @param {Object} params\r\n   *   @param {Array} rows\r\n   *   @param {Object} cell\r\n   *   @param {Number} rowIndex Current row index\r\n   *   @param {Number} cellIndex Current cell index\r\n   */\r\n  this.setRowSpan = function(params) {\r\n    var cells;\r\n    if (params.cell.rowSpan) {\r\n      for (var i=1; i <= params.cell.rowSpan-1; i++) {\r\n        cells = (params.rows[params.rowIndex+i].text || params.rows[params.rowIndex+i].stack);\r\n        cells.splice(params.cellIndex, 0, {text:''});\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply style and classes from all the parents\r\n   *\r\n   * @param  {Object} params\r\n   *   @param {Object} ret The object that will receive the 'style' and other properties\r\n   *   @param {Array} parents Array of node elements\r\n   * @return {Object} the modified 'ret'\r\n   */\r\n  this.applyStyle = function(params) {\r\n    var cssClass = [];\r\n    var lastIndex = params.parents.length-1;\r\n    var _this = this;\r\n    params.parents.forEach(function(parent, parentIndex) {\r\n      // classes\r\n      var parentNodeName = parent.nodeName.toLowerCase();\r\n      var htmlClass = 'html-' + parentNodeName;\r\n      if (htmlClass !== 'html-body' && cssClass.indexOf(htmlClass) === -1) cssClass.unshift(htmlClass);\r\n      var parentClass = (parent.getAttribute(\"class\")||\"\").split(' ');\r\n      parentClass.forEach(function(p) {\r\n        if (p) cssClass.push(p);\r\n      });\r\n      // styles\r\n      var style;\r\n      // not all the CSS properties should be inherent\r\n      var ignoreNonDescendentProperties = (parentIndex!==lastIndex);\r\n      // 1) the default styles\r\n      if (_this.defaultStyles[parentNodeName]) {\r\n        for (style in _this.defaultStyles[parentNodeName]) {\r\n          if (_this.defaultStyles[parentNodeName].hasOwnProperty(style)) {\r\n            if (!ignoreNonDescendentProperties ||\r\n                (ignoreNonDescendentProperties &&\r\n                  style.indexOf('margin') === -1 &&\r\n                  style.indexOf('border') === -1\r\n                )\r\n               ) {\r\n              // 'decoration' can be an array\r\n              if (style === 'decoration') {\r\n                if (!Array.isArray(params.ret[style])) params.ret[style]=[];\r\n                // do not apply twice the same (e.g. applying 2 \"underline\" will cause an extra blank space with an underline)\r\n                if (params.ret[style].indexOf(_this.defaultStyles[parentNodeName][style]) === -1) {\r\n                  params.ret[style].push(_this.defaultStyles[parentNodeName][style]);\r\n                }\r\n              } else {\r\n                params.ret[style] = JSON.parse(JSON.stringify(_this.defaultStyles[parentNodeName][style]));\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // 2) element's style\r\n      // we want TD/TH to receive descendant properties from TR\r\n      if (parentNodeName === 'tr') ignoreNonDescendentProperties=false;\r\n      style = _this.parseStyle(parent, ignoreNonDescendentProperties);\r\n      style.forEach(function(stl) {\r\n        // 'decoration' can be an array\r\n        if (stl.key === \"decoration\") {\r\n          if (!Array.isArray(params.ret[stl.key])) params.ret[stl.key]=[];\r\n          params.ret[stl.key].push(stl.value);\r\n        } else {\r\n          // when 'params.ret.margin' is defined but also a 'marginXYZ' is defined in `stl.key`,\r\n          // then we should change the correct index in `params.ret.margin` to reflect it\r\n          if (params.ret.margin && stl.key.indexOf('margin') === 0) {\r\n            // order: left | top | right | bottom\r\n            switch(stl.key) {\r\n              case \"marginLeft\": params.ret.margin[0]=stl.value; break;\r\n              case \"marginTop\": params.ret.margin[1]=stl.value; break;\r\n              case \"marginRight\": params.ret.margin[2]=stl.value; break;\r\n              case \"marginBottom\": params.ret.margin[3]=stl.value; break;\r\n            }\r\n          } else {\r\n            params.ret[stl.key] = stl.value;\r\n          }\r\n        }\r\n      });\r\n    });\r\n    params.ret.style = cssClass;\r\n    return params.ret;\r\n  }\r\n\r\n  /**\r\n   * Transform a CSS expression (e.g. 'margin:10px') in the PDFMake version\r\n   *\r\n   * @param {String} style The CSS expression to transform\r\n   * @param {DOMElement} element\r\n   * @param {Boolean} ignoreProperties TRUE when we have to ignore some properties, like border, padding, margin\r\n   * @returns {Array} array of {key, value}\r\n   */\r\n  this.parseStyle = function(element, ignoreProperties) {\r\n    var style = element.getAttribute(\"style\") || \"\";\r\n    var ret = [];\r\n    style = style.split(';');\r\n    // check if we have \"width\" or \"height\"\r\n    var width = element.getAttribute(\"width\");\r\n    var height = element.getAttribute(\"height\");\r\n    if (width) {\r\n      style.unshift(\"width:\" + this.convertToUnit(width + (isNaN(width) ? \"\" : \"px\")));\r\n    }\r\n    if (height) {\r\n      style.unshift(\"height:\" + this.convertToUnit(height + (isNaN(height) ? \"\" : \"px\")));\r\n    }\r\n    // check if we have 'color' or 'size' -- mainly for '<font>'\r\n    var color = element.getAttribute(\"color\");\r\n    if (color) {\r\n      ret.push({key:\"color\", value:this.parseColor(color)});\r\n    }\r\n    var size = element.getAttribute(\"size\");\r\n    if (size !== null) {\r\n      // Getting and sanitizing the size value: it should be included between 1 and 7\r\n      size = Math.min(Math.max(1, parseInt(size)), 7);\r\n      // Assigning the font size\r\n      ret.push({key:'fontSize', value:Math.max(this.fontSizes[0], this.fontSizes[size - 1])});\r\n    }\r\n\r\n    var styleDefs = style.map(function(style) { return style.toLowerCase().split(':') });\r\n    var borders = []; // special treatment for borders\r\n    var nodeName = element.nodeName.toUpperCase();\r\n    var _this=this;\r\n    styleDefs.forEach(function(styleDef) {\r\n      if (styleDef.length===2) {\r\n        var key = styleDef[0].trim();\r\n        var value = styleDef[1].trim();\r\n        switch (key) {\r\n          case \"margin\": {\r\n            if (ignoreProperties) break;\r\n            // pdfMake uses a different order than CSS\r\n            value = value.split(' ');\r\n            if (value.length===1) value=[value[0], value[0], value[0], value[0]];\r\n            else if (value.length===2) value=[value[1], value[0]]; // vertical | horizontal ==> horizontal | vertical\r\n            else if (value.length===3) value=[value[1], value[0], value[1], value[2]]; // top | horizontal | bottom ==> left | top | right | bottom\r\n            else if (value.length===4) value=[value[3], value[0], value[1], value[2]]; // top | right | bottom | left ==> left | top | right | bottom\r\n\r\n            // we now need to convert to PT\r\n            value.forEach(function(val, i) {\r\n              value[i] = _this.convertToUnit(val);\r\n            });\r\n            // ignore if we have a FALSE in the table\r\n            if (value.indexOf(false) === -1) ret.push({key:key, value:value});\r\n            break;\r\n          }\r\n          case \"line-height\": {\r\n            // change % unit\r\n            if (typeof value === \"string\" && value.slice(-1) === '%') {\r\n              value = value.slice(0,-1) / 100;\r\n            } else {\r\n              value = _this.convertToUnit(value);\r\n            }\r\n            ret.push({key:\"lineHeight\", value:value});\r\n            break;\r\n          }\r\n          case \"text-align\": {\r\n            ret.push({key:\"alignment\", value:value});\r\n            break;\r\n          }\r\n          case \"font-weight\": {\r\n            if (value === \"bold\") ret.push({key:\"bold\", value:true});\r\n            break;\r\n          }\r\n          case \"text-decoration\": {\r\n            ret.push({key:\"decoration\", value:_this.toCamelCase(value)})\r\n            break;\r\n          }\r\n          case \"font-style\": {\r\n            if (value===\"italic\") ret.push({key:\"italics\", value:true});\r\n            break;\r\n          }\r\n          case \"font-family\": {\r\n            ret.push({key:\"font\", value:value.split(',')[0].replace(/\"|^'|^\\s*|\\s*$|'$/g,\"\").replace(/^([a-z])/g, function (g) { return g[0].toUpperCase() }).replace(/ ([a-z])/g, function (g) { return g[1].toUpperCase() })});\r\n            break;\r\n          }\r\n          case \"color\": {\r\n            ret.push({key:\"color\", value:_this.parseColor(value)})\r\n            break;\r\n          }\r\n          case \"background-color\": {\r\n            // if TH/TD and key is 'background', then we use 'fillColor' instead\r\n            ret.push({key:(nodeName === 'TD' || nodeName === 'TH' ? \"fillColor\" : \"background\"), value:_this.parseColor(value)})\r\n            break;\r\n          }\r\n          case \"text-indent\": {\r\n            ret.push({key:\"leadingIndent\", value:_this.convertToUnit(value)});\r\n            break;\r\n          }\r\n          case \"white-space\": {\r\n            ret.push({key:\"preserveLeadingSpaces\", value:(value==='break-spaces' || value.slice(0,3) === 'pre')});\r\n            break;\r\n          }\r\n          default: {\r\n            // for borders\r\n            if (key === 'border' || key.indexOf('border-left') === 0 || key.indexOf('border-top') === 0 || key.indexOf('border-right') === 0 || key.indexOf('border-bottom') === 0) {\r\n              if (!ignoreProperties) borders.push({key:key, value:value});\r\n            } else {\r\n              // ignore some properties\r\n              if (ignoreProperties && (key.indexOf(\"margin-\") === 0 || key === 'width' || key === 'height')) break;\r\n              // padding is not supported by PDFMake\r\n              if (key.indexOf(\"padding\") === 0) break;\r\n              if (key.indexOf(\"-\") > -1) key=_this.toCamelCase(key);\r\n              if (value) {\r\n                // convert value to a 'pt' when possible\r\n                var parsedValue = _this.convertToUnit(value);\r\n                // if we have 'font-size' with a parsedValue at false, then ignore it\r\n                if (key === 'font-size' && parsedValue === false) break;\r\n                ret.push({key:key, value:(parsedValue === false ? value : parsedValue)});\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    // for borders\r\n    if (borders.length > 0) {\r\n      // we have to merge together the borders in two properties\r\n      var border = []; // array of boolean\r\n      var borderColor = []; // array of colors\r\n      borders.forEach(function(b) {\r\n        // we have 3 properties: width style color\r\n        var properties = b.value.split(' ');\r\n        var width = properties[0].replace(/(\\d*)(\\.\\d+)?([^\\d]+)/g,\"$1$2 \").trim();\r\n        var index = -1, i;\r\n        if (b.key.indexOf('-left') > -1) index=0;\r\n        else if (b.key.indexOf('-top') > -1) index=1;\r\n        else if (b.key.indexOf('-right') > -1) index=2;\r\n        else if (b.key.indexOf('-bottom') > -1) index=3;\r\n        // for the width\r\n        if (index > -1) {\r\n          border[index] = (width > 0);\r\n        } else {\r\n          for (i=0; i<4; i++) border[i] = (width > 0);\r\n        }\r\n        // for the color\r\n        if (properties.length > 2) {\r\n          var color = properties.slice(2).join(' ');\r\n          if (index > -1) {\r\n            borderColor[index] = _this.parseColor(color);\r\n          } else {\r\n            for (i=0; i<4; i++) borderColor[i] = _this.parseColor(color);\r\n          }\r\n        }\r\n      });\r\n      // fill the gaps\r\n      for (var i=0; i<4; i++) {\r\n        if (border.length > 0 && typeof border[i] === \"undefined\") border[i]=true;\r\n        if (borderColor.length > 0 && typeof borderColor[i] === \"undefined\") borderColor[i]='#000000';\r\n      }\r\n      if (border.length > 0) ret.push({key:'border', value:border});\r\n      if (borderColor.length > 0) ret.push({key:'borderColor', value:borderColor});\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  this.toCamelCase = function(str) {\r\n    return str.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase() });\r\n  }\r\n\r\n  // input: h in [0,360] and s,v in [0,1] - output: \"rgb(0–255,0–255,0–255)\"\"\r\n  // source: https://stackoverflow.com/a/54014428/1134119 + https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion#comment58413965_9493060\r\n  this.hsl2rgb = function(h,s,l) {\r\n    var a = s*Math.min(l,1-l);\r\n    var f = function(n) {\r\n      var k=(n+h/30)%12;\r\n      return Math.min(Math.floor((l - a*Math.max(Math.min(k-3,9-k,1),-1))*256),255);\r\n    }\r\n    return \"rgb(\"+f(0)+\",\"+f(8)+\",\"+f(4)+\")\";\r\n  }\r\n\r\n  /**\r\n   * Returns the color in a hex format (e.g. #12ff00).\r\n   * Also tries to convert RGB colors into hex values\r\n   *\r\n   * @param color color as string representation\r\n   * @returns color as hex values for pdfmake\r\n   */\r\n  this.parseColor = function(color) {\r\n    // e.g. `#fff` or `#ff0048`\r\n    var haxRegex = new RegExp('^#([0-9a-f]{3}|[0-9a-f]{6})$');\r\n\r\n    // e.g. rgb(0,255,34) or rgb(22, 0, 0) or rgb(100%, 100%, 100%)\r\n    var rgbRegex = new RegExp('^rgb\\\\((\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?)\\\\)$');\r\n\r\n    // e.g. hsl(300, 10%, 20%)\r\n    var hslRegex = new RegExp('^hsl\\\\((\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?),\\\\s*(\\\\d+(\\\\.\\\\d+)?%?)\\\\)$');\r\n\r\n    // e.g. \"white\" or \"red\"\r\n    var nameRegex = new RegExp('^[a-z]+$');\r\n\r\n    var decimalColors, decimalValue, hexString, i, ret=[];\r\n\r\n    if (haxRegex.test(color)) {\r\n      return color;\r\n    }\r\n\r\n    if (hslRegex.test(color)) {\r\n      // we want to convert to RGB\r\n      decimalColors = hslRegex.exec(color).slice(1);\r\n      // first value should be from 0 to 360\r\n      if (decimalColors[0].endsWith('%')) decimalValue = decimalColors[0].slice(0,-1) * 360 / 100;\r\n      else decimalValue = decimalColors[0]*1;\r\n      ret.push(decimalValue);\r\n      // next values should be % to convert to base 1\r\n      ret.push(decimalColors[2].slice(0,-1) / 100);\r\n      ret.push(decimalColors[4].slice(0,-1) / 100);\r\n      color = this.hsl2rgb(ret[0], ret[1], ret[2]);\r\n      ret = [];\r\n    }\r\n    if (rgbRegex.test(color)) {\r\n      decimalColors = rgbRegex.exec(color).slice(1);\r\n      for (i = 0; i < 6; i+=2) {\r\n        decimalValue = decimalColors[i];\r\n        // if it ends with '%', we calculcate based on 100%=255\r\n        if (decimalValue.endsWith('%')) {\r\n          decimalValue = Math.round(decimalValue.slice(0,-1) * 255 / 100);\r\n        } else decimalValue = decimalValue*1;\r\n        if (decimalValue > 255) {\r\n          decimalValue = 255;\r\n        }\r\n        hexString = '0' + decimalValue.toString(16);\r\n        hexString = hexString.slice(-2);\r\n        ret.push(hexString);\r\n      }\r\n      return '#' + ret.join('');\r\n    }\r\n    if (nameRegex.test(color)) {\r\n      return (color === \"transparent\" ? \"white\" : color);\r\n    }\r\n\r\n    console.error('Could not parse color \"' + color + '\"');\r\n    return color;\r\n  }\r\n\r\n  /**\r\n   * Convert 'px'/'rem'/'cm'/'em' to 'pt', and return false for the other ones. If it's only a number, it will just return it\r\n   *\r\n   * @param  {String} val The value with units (e.g. 12px)\r\n   * @return {Number|Boolean} Return the pt value, or false\r\n   */\r\n  this.convertToUnit = function(val) {\r\n    // if it's just a number, then return it\r\n    if (!isNaN(parseFloat(val)) && isFinite(val)) return val*1;\r\n    var mtch = (val+\"\").trim().match(/^(\\d*(\\.\\d+)?)(pt|px|r?em|cm)$/);\r\n    // if we don't have a number with supported units, then return false\r\n    if (!mtch) return false;\r\n    val = mtch[1];\r\n    switch(mtch[3]) {\r\n      case 'px':{\r\n        val = Math.round(val * 0.75292857248934); // 1px => 0.75292857248934pt\r\n        break;\r\n      }\r\n      case 'em':\r\n      case 'rem':{\r\n        val *= 12; // default font-size is 12pt\r\n        break;\r\n      }\r\n      case 'cm':{\r\n        val = Math.round(val * 28.34646); // 1cm => 28.34646\r\n        break;\r\n      }\r\n    }\r\n    return val*1;\r\n  }\r\n\r\n  var result = this.convertHtml(htmlText);\r\n  // if we only pass a string without HTML code\r\n  if (typeof result === \"string\") result={text:result};\r\n  // if images by reference\r\n  if (this.imagesByReference) {\r\n    result = {content:result, images:{}};\r\n    this.imagesRef.forEach(function(src, i) {\r\n      result.images['img_ref_'+i] = src;\r\n    });\r\n  }\r\n  return result;\r\n}\r\n\r\nmodule.exports = function(htmlText, options) {\r\n  return new htmlToPdfMake(htmlText, options);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}