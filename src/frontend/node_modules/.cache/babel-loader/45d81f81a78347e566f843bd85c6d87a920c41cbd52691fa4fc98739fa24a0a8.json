{"ast":null,"code":"var Observable = /** @class */function () {\n  function Observable() {\n    // Note that these maps can't be specified generically, so they are kept untyped.\n    // Some methods in this class only need generics in their signatures, the generics inside the methods\n    // are just for clarity. The generics in signatures allow for static type checking of user provided\n    // listeners and for type inference, so that the users wouldn't have to specify the type of parameters\n    // of their inline lambdas.\n    this.allPropertyListeners = new Map(); // property name => property change listener => scopes\n    this.allEventListeners = new Map(); // event type => event listener => scopes\n  }\n\n  Observable.prototype.addPropertyListener = function (name, listener, scope) {\n    if (scope === void 0) {\n      scope = this;\n    }\n    var allPropertyListeners = this.allPropertyListeners;\n    var propertyListeners = allPropertyListeners.get(name);\n    if (!propertyListeners) {\n      propertyListeners = new Map();\n      allPropertyListeners.set(name, propertyListeners);\n    }\n    if (!propertyListeners.has(listener)) {\n      var scopes_1 = new Set();\n      propertyListeners.set(listener, scopes_1);\n    }\n    var scopes = propertyListeners.get(listener);\n    if (scopes) {\n      scopes.add(scope);\n    }\n  };\n  Observable.prototype.removePropertyListener = function (name, listener, scope) {\n    if (scope === void 0) {\n      scope = this;\n    }\n    var allPropertyListeners = this.allPropertyListeners;\n    var propertyListeners = allPropertyListeners.get(name);\n    if (propertyListeners) {\n      if (listener) {\n        var scopes = propertyListeners.get(listener);\n        if (scopes) {\n          scopes.delete(scope);\n          if (!scopes.size) {\n            propertyListeners.delete(listener);\n          }\n        }\n      } else {\n        propertyListeners.clear();\n      }\n    }\n  };\n  Observable.prototype.notifyPropertyListeners = function (name, oldValue, value) {\n    var _this = this;\n    var allPropertyListeners = this.allPropertyListeners;\n    var propertyListeners = allPropertyListeners.get(name);\n    if (propertyListeners) {\n      propertyListeners.forEach(function (scopes, listener) {\n        scopes.forEach(function (scope) {\n          return listener.call(scope, {\n            type: name,\n            source: _this,\n            value: value,\n            oldValue: oldValue\n          });\n        });\n      });\n    }\n  };\n  Observable.prototype.addEventListener = function (type, listener, scope) {\n    if (scope === void 0) {\n      scope = this;\n    }\n    var allEventListeners = this.allEventListeners;\n    var eventListeners = allEventListeners.get(type);\n    if (!eventListeners) {\n      eventListeners = new Map();\n      allEventListeners.set(type, eventListeners);\n    }\n    if (!eventListeners.has(listener)) {\n      var scopes_2 = new Set();\n      eventListeners.set(listener, scopes_2);\n    }\n    var scopes = eventListeners.get(listener);\n    if (scopes) {\n      scopes.add(scope);\n    }\n  };\n  Observable.prototype.removeEventListener = function (type, listener, scope) {\n    if (scope === void 0) {\n      scope = this;\n    }\n    var allEventListeners = this.allEventListeners;\n    var eventListeners = allEventListeners.get(type);\n    if (eventListeners) {\n      if (listener) {\n        var scopes = eventListeners.get(listener);\n        if (scopes) {\n          scopes.delete(scope);\n          if (!scopes.size) {\n            eventListeners.delete(listener);\n          }\n        }\n      } else {\n        eventListeners.clear();\n      }\n    }\n  };\n  Observable.prototype.clearEventListeners = function () {\n    this.allEventListeners = new Map();\n  };\n  Observable.prototype.notifyEventListeners = function (types) {\n    var _this = this;\n    var allEventListeners = this.allEventListeners;\n    types.forEach(function (type) {\n      var listeners = allEventListeners.get(type);\n      if (listeners) {\n        listeners.forEach(function (scopes, listener) {\n          scopes.forEach(function (scope) {\n            return listener.call(scope, {\n              type: type,\n              source: _this\n            });\n          });\n        });\n      }\n    });\n  };\n  // 'source' is added automatically and is always the object this method belongs to.\n  Observable.prototype.fireEvent = function (event) {\n    var listeners = this.allEventListeners.get(event.type);\n    if (listeners) {\n      var eventWithSource_1 = Object.assign(event, {\n        source: this\n      });\n      listeners.forEach(function (scopes, listener) {\n        scopes.forEach(function (scope) {\n          return listener.call(scope, eventWithSource_1);\n        });\n      });\n    }\n  };\n  Observable.privateKeyPrefix = '_';\n  return Observable;\n}();\nexport { Observable };","map":{"version":3,"names":["Observable","allPropertyListeners","Map","allEventListeners","prototype","addPropertyListener","name","listener","scope","propertyListeners","get","set","has","scopes_1","Set","scopes","add","removePropertyListener","delete","size","clear","notifyPropertyListeners","oldValue","value","_this","forEach","call","type","source","addEventListener","eventListeners","scopes_2","removeEventListener","clearEventListeners","notifyEventListeners","types","listeners","fireEvent","event","eventWithSource_1","Object","assign","privateKeyPrefix"],"sources":["C:/Users/guzny/OneDrive/Рабочий стол/frontend/node_modules/ag-charts-community/dist/esm/es5/util/observable.js"],"sourcesContent":["var Observable = /** @class */ (function () {\n    function Observable() {\n        // Note that these maps can't be specified generically, so they are kept untyped.\n        // Some methods in this class only need generics in their signatures, the generics inside the methods\n        // are just for clarity. The generics in signatures allow for static type checking of user provided\n        // listeners and for type inference, so that the users wouldn't have to specify the type of parameters\n        // of their inline lambdas.\n        this.allPropertyListeners = new Map(); // property name => property change listener => scopes\n        this.allEventListeners = new Map(); // event type => event listener => scopes\n    }\n    Observable.prototype.addPropertyListener = function (name, listener, scope) {\n        if (scope === void 0) { scope = this; }\n        var allPropertyListeners = this.allPropertyListeners;\n        var propertyListeners = allPropertyListeners.get(name);\n        if (!propertyListeners) {\n            propertyListeners = new Map();\n            allPropertyListeners.set(name, propertyListeners);\n        }\n        if (!propertyListeners.has(listener)) {\n            var scopes_1 = new Set();\n            propertyListeners.set(listener, scopes_1);\n        }\n        var scopes = propertyListeners.get(listener);\n        if (scopes) {\n            scopes.add(scope);\n        }\n    };\n    Observable.prototype.removePropertyListener = function (name, listener, scope) {\n        if (scope === void 0) { scope = this; }\n        var allPropertyListeners = this.allPropertyListeners;\n        var propertyListeners = allPropertyListeners.get(name);\n        if (propertyListeners) {\n            if (listener) {\n                var scopes = propertyListeners.get(listener);\n                if (scopes) {\n                    scopes.delete(scope);\n                    if (!scopes.size) {\n                        propertyListeners.delete(listener);\n                    }\n                }\n            }\n            else {\n                propertyListeners.clear();\n            }\n        }\n    };\n    Observable.prototype.notifyPropertyListeners = function (name, oldValue, value) {\n        var _this = this;\n        var allPropertyListeners = this.allPropertyListeners;\n        var propertyListeners = allPropertyListeners.get(name);\n        if (propertyListeners) {\n            propertyListeners.forEach(function (scopes, listener) {\n                scopes.forEach(function (scope) { return listener.call(scope, { type: name, source: _this, value: value, oldValue: oldValue }); });\n            });\n        }\n    };\n    Observable.prototype.addEventListener = function (type, listener, scope) {\n        if (scope === void 0) { scope = this; }\n        var allEventListeners = this.allEventListeners;\n        var eventListeners = allEventListeners.get(type);\n        if (!eventListeners) {\n            eventListeners = new Map();\n            allEventListeners.set(type, eventListeners);\n        }\n        if (!eventListeners.has(listener)) {\n            var scopes_2 = new Set();\n            eventListeners.set(listener, scopes_2);\n        }\n        var scopes = eventListeners.get(listener);\n        if (scopes) {\n            scopes.add(scope);\n        }\n    };\n    Observable.prototype.removeEventListener = function (type, listener, scope) {\n        if (scope === void 0) { scope = this; }\n        var allEventListeners = this.allEventListeners;\n        var eventListeners = allEventListeners.get(type);\n        if (eventListeners) {\n            if (listener) {\n                var scopes = eventListeners.get(listener);\n                if (scopes) {\n                    scopes.delete(scope);\n                    if (!scopes.size) {\n                        eventListeners.delete(listener);\n                    }\n                }\n            }\n            else {\n                eventListeners.clear();\n            }\n        }\n    };\n    Observable.prototype.clearEventListeners = function () {\n        this.allEventListeners = new Map();\n    };\n    Observable.prototype.notifyEventListeners = function (types) {\n        var _this = this;\n        var allEventListeners = this.allEventListeners;\n        types.forEach(function (type) {\n            var listeners = allEventListeners.get(type);\n            if (listeners) {\n                listeners.forEach(function (scopes, listener) {\n                    scopes.forEach(function (scope) { return listener.call(scope, { type: type, source: _this }); });\n                });\n            }\n        });\n    };\n    // 'source' is added automatically and is always the object this method belongs to.\n    Observable.prototype.fireEvent = function (event) {\n        var listeners = this.allEventListeners.get(event.type);\n        if (listeners) {\n            var eventWithSource_1 = Object.assign(event, { source: this });\n            listeners.forEach(function (scopes, listener) {\n                scopes.forEach(function (scope) { return listener.call(scope, eventWithSource_1); });\n            });\n        }\n    };\n    Observable.privateKeyPrefix = '_';\n    return Observable;\n}());\nexport { Observable };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}