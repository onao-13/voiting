{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Shape } from './shape';\nimport { Path, ScenePathChangeDetection } from './path';\nimport { BBox } from '../bbox';\nimport { normalizeAngle360 } from '../../util/angle';\nimport { chainObjects } from '../../util/object';\nimport { isEqual } from '../../util/number';\nexport var ArcType;\n(function (ArcType) {\n  ArcType[ArcType[\"Open\"] = 0] = \"Open\";\n  ArcType[ArcType[\"Chord\"] = 1] = \"Chord\";\n  ArcType[ArcType[\"Round\"] = 2] = \"Round\";\n})(ArcType || (ArcType = {}));\n/**\n * Elliptical arc node.\n */\nvar Arc = /** @class */function (_super) {\n  __extends(Arc, _super);\n  function Arc() {\n    var _this = _super.call(this) || this;\n    _this.centerX = 0;\n    _this.centerY = 0;\n    _this.radiusX = 10;\n    _this.radiusY = 10;\n    _this.startAngle = 0;\n    _this.endAngle = Math.PI * 2;\n    _this.counterClockwise = false;\n    /**\n     * The type of arc to render:\n     * - {@link ArcType.Open} - end points of the arc segment are not connected (default)\n     * - {@link ArcType.Chord} - end points of the arc segment are connected by a line segment\n     * - {@link ArcType.Round} - each of the end points of the arc segment are connected\n     *                           to the center of the arc\n     * Arcs with {@link ArcType.Open} do not support hit testing, even if they have their\n     * {@link Shape.fillStyle} set, because they are not closed paths. Hit testing support\n     * would require using two paths - one for rendering, another for hit testing - and there\n     * doesn't seem to be a compelling reason to do that, when one can just use {@link ArcType.Chord}\n     * to create a closed path.\n     */\n    _this.type = ArcType.Open;\n    _this.restoreOwnStyles();\n    return _this;\n  }\n  Object.defineProperty(Arc.prototype, \"fullPie\", {\n    get: function () {\n      return isEqual(normalizeAngle360(this.startAngle), normalizeAngle360(this.endAngle));\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Arc.prototype.updatePath = function () {\n    var path = this.path;\n    path.clear(); // No need to recreate the Path, can simply clear the existing one.\n    // This is much faster than the native Path2D implementation even though this `cubicArc`\n    // method is pure TypeScript and actually produces the definition of an elliptical arc,\n    // where you can specify two radii and rotation, while Path2D's `arc` method simply produces\n    // a circular arc. Maybe it's due to the experimental nature of the Path2D class,\n    // maybe it's because we have to create a new instance of it on each render, who knows...\n    path.cubicArc(this.centerX, this.centerY, this.radiusX, this.radiusY, 0, this.startAngle, this.endAngle, this.counterClockwise ? 1 : 0);\n    if (this.type === ArcType.Chord) {\n      path.closePath();\n    } else if (this.type === ArcType.Round && !this.fullPie) {\n      path.lineTo(this.centerX, this.centerY);\n      path.closePath();\n    }\n  };\n  Arc.prototype.computeBBox = function () {\n    // Only works with full arcs (circles) and untransformed ellipses.\n    return new BBox(this.centerX - this.radiusX, this.centerY - this.radiusY, this.radiusX * 2, this.radiusY * 2);\n  };\n  Arc.prototype.isPointInPath = function (x, y) {\n    var point = this.transformPoint(x, y);\n    var bbox = this.computeBBox();\n    return this.type !== ArcType.Open && bbox.containsPoint(point.x, point.y) && this.path.isPointInPath(point.x, point.y);\n  };\n  Arc.className = 'Arc';\n  Arc.defaultStyles = chainObjects(Shape.defaultStyles, {\n    lineWidth: 1,\n    fillStyle: null\n  });\n  __decorate([ScenePathChangeDetection()], Arc.prototype, \"centerX\", void 0);\n  __decorate([ScenePathChangeDetection()], Arc.prototype, \"centerY\", void 0);\n  __decorate([ScenePathChangeDetection()], Arc.prototype, \"radiusX\", void 0);\n  __decorate([ScenePathChangeDetection()], Arc.prototype, \"radiusY\", void 0);\n  __decorate([ScenePathChangeDetection()], Arc.prototype, \"startAngle\", void 0);\n  __decorate([ScenePathChangeDetection()], Arc.prototype, \"endAngle\", void 0);\n  __decorate([ScenePathChangeDetection()], Arc.prototype, \"counterClockwise\", void 0);\n  __decorate([ScenePathChangeDetection()], Arc.prototype, \"type\", void 0);\n  return Arc;\n}(Path);\nexport { Arc };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Shape","Path","ScenePathChangeDetection","BBox","normalizeAngle360","chainObjects","isEqual","ArcType","Arc","_super","_this","call","centerX","centerY","radiusX","radiusY","startAngle","endAngle","Math","PI","counterClockwise","type","Open","restoreOwnStyles","get","enumerable","configurable","updatePath","path","clear","cubicArc","Chord","closePath","Round","fullPie","lineTo","computeBBox","isPointInPath","x","y","point","transformPoint","bbox","containsPoint","className","defaultStyles","lineWidth","fillStyle"],"sources":["C:/Users/guzny/OneDrive/Рабочий стол/frontend/node_modules/ag-charts-community/dist/esm/es5/scene/shape/arc.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Shape } from './shape';\nimport { Path, ScenePathChangeDetection } from './path';\nimport { BBox } from '../bbox';\nimport { normalizeAngle360 } from '../../util/angle';\nimport { chainObjects } from '../../util/object';\nimport { isEqual } from '../../util/number';\nexport var ArcType;\n(function (ArcType) {\n    ArcType[ArcType[\"Open\"] = 0] = \"Open\";\n    ArcType[ArcType[\"Chord\"] = 1] = \"Chord\";\n    ArcType[ArcType[\"Round\"] = 2] = \"Round\";\n})(ArcType || (ArcType = {}));\n/**\n * Elliptical arc node.\n */\nvar Arc = /** @class */ (function (_super) {\n    __extends(Arc, _super);\n    function Arc() {\n        var _this = _super.call(this) || this;\n        _this.centerX = 0;\n        _this.centerY = 0;\n        _this.radiusX = 10;\n        _this.radiusY = 10;\n        _this.startAngle = 0;\n        _this.endAngle = Math.PI * 2;\n        _this.counterClockwise = false;\n        /**\n         * The type of arc to render:\n         * - {@link ArcType.Open} - end points of the arc segment are not connected (default)\n         * - {@link ArcType.Chord} - end points of the arc segment are connected by a line segment\n         * - {@link ArcType.Round} - each of the end points of the arc segment are connected\n         *                           to the center of the arc\n         * Arcs with {@link ArcType.Open} do not support hit testing, even if they have their\n         * {@link Shape.fillStyle} set, because they are not closed paths. Hit testing support\n         * would require using two paths - one for rendering, another for hit testing - and there\n         * doesn't seem to be a compelling reason to do that, when one can just use {@link ArcType.Chord}\n         * to create a closed path.\n         */\n        _this.type = ArcType.Open;\n        _this.restoreOwnStyles();\n        return _this;\n    }\n    Object.defineProperty(Arc.prototype, \"fullPie\", {\n        get: function () {\n            return isEqual(normalizeAngle360(this.startAngle), normalizeAngle360(this.endAngle));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Arc.prototype.updatePath = function () {\n        var path = this.path;\n        path.clear(); // No need to recreate the Path, can simply clear the existing one.\n        // This is much faster than the native Path2D implementation even though this `cubicArc`\n        // method is pure TypeScript and actually produces the definition of an elliptical arc,\n        // where you can specify two radii and rotation, while Path2D's `arc` method simply produces\n        // a circular arc. Maybe it's due to the experimental nature of the Path2D class,\n        // maybe it's because we have to create a new instance of it on each render, who knows...\n        path.cubicArc(this.centerX, this.centerY, this.radiusX, this.radiusY, 0, this.startAngle, this.endAngle, this.counterClockwise ? 1 : 0);\n        if (this.type === ArcType.Chord) {\n            path.closePath();\n        }\n        else if (this.type === ArcType.Round && !this.fullPie) {\n            path.lineTo(this.centerX, this.centerY);\n            path.closePath();\n        }\n    };\n    Arc.prototype.computeBBox = function () {\n        // Only works with full arcs (circles) and untransformed ellipses.\n        return new BBox(this.centerX - this.radiusX, this.centerY - this.radiusY, this.radiusX * 2, this.radiusY * 2);\n    };\n    Arc.prototype.isPointInPath = function (x, y) {\n        var point = this.transformPoint(x, y);\n        var bbox = this.computeBBox();\n        return (this.type !== ArcType.Open &&\n            bbox.containsPoint(point.x, point.y) &&\n            this.path.isPointInPath(point.x, point.y));\n    };\n    Arc.className = 'Arc';\n    Arc.defaultStyles = chainObjects(Shape.defaultStyles, {\n        lineWidth: 1,\n        fillStyle: null,\n    });\n    __decorate([\n        ScenePathChangeDetection()\n    ], Arc.prototype, \"centerX\", void 0);\n    __decorate([\n        ScenePathChangeDetection()\n    ], Arc.prototype, \"centerY\", void 0);\n    __decorate([\n        ScenePathChangeDetection()\n    ], Arc.prototype, \"radiusX\", void 0);\n    __decorate([\n        ScenePathChangeDetection()\n    ], Arc.prototype, \"radiusY\", void 0);\n    __decorate([\n        ScenePathChangeDetection()\n    ], Arc.prototype, \"startAngle\", void 0);\n    __decorate([\n        ScenePathChangeDetection()\n    ], Arc.prototype, \"endAngle\", void 0);\n    __decorate([\n        ScenePathChangeDetection()\n    ], Arc.prototype, \"counterClockwise\", void 0);\n    __decorate([\n        ScenePathChangeDetection()\n    ], Arc.prototype, \"type\", void 0);\n    return Arc;\n}(Path));\nexport { Arc };\n"],"mappings":"AAAA,IAAIA,SAAS,GAAI,IAAI,IAAI,IAAI,CAACA,SAAS,IAAM,YAAY;EACrD,IAAIC,aAAa,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAE;IAChCF,aAAa,GAAGG,MAAM,CAACC,cAAc,IAChC;MAAEC,SAAS,EAAE;IAAG,CAAC,YAAYC,KAAK,IAAI,UAAUL,CAAC,EAAEC,CAAC,EAAE;MAAED,CAAC,CAACI,SAAS,GAAGH,CAAC;IAAE,CAAE,IAC5E,UAAUD,CAAC,EAAEC,CAAC,EAAE;MAAE,KAAK,IAAIK,CAAC,IAAIL,CAAC,EAAE,IAAIA,CAAC,CAACM,cAAc,CAACD,CAAC,CAAC,EAAEN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IAAE,CAAC;IAC9E,OAAOP,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;EAC9B,CAAC;EACD,OAAO,UAAUD,CAAC,EAAEC,CAAC,EAAE;IACnBF,aAAa,CAACC,CAAC,EAAEC,CAAC,CAAC;IACnB,SAASO,EAAE,GAAG;MAAE,IAAI,CAACC,WAAW,GAAGT,CAAC;IAAE;IACtCA,CAAC,CAACU,SAAS,GAAGT,CAAC,KAAK,IAAI,GAAGC,MAAM,CAACS,MAAM,CAACV,CAAC,CAAC,IAAIO,EAAE,CAACE,SAAS,GAAGT,CAAC,CAACS,SAAS,EAAE,IAAIF,EAAE,EAAE,CAAC;EACxF,CAAC;AACL,CAAC,EAAG;AACJ,IAAII,UAAU,GAAI,IAAI,IAAI,IAAI,CAACA,UAAU,IAAK,UAAUC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,EAAE;EACnF,IAAIC,CAAC,GAAGC,SAAS,CAACC,MAAM;IAAEC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGH,MAAM,GAAGE,IAAI,KAAK,IAAI,GAAGA,IAAI,GAAGd,MAAM,CAACmB,wBAAwB,CAACP,MAAM,EAAEC,GAAG,CAAC,GAAGC,IAAI;IAAEhB,CAAC;EAC5H,IAAI,OAAOsB,OAAO,KAAK,QAAQ,IAAI,OAAOA,OAAO,CAACC,QAAQ,KAAK,UAAU,EAAEH,CAAC,GAAGE,OAAO,CAACC,QAAQ,CAACV,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,CAAC,CAAC,KAC1H,KAAK,IAAIQ,CAAC,GAAGX,UAAU,CAACM,MAAM,GAAG,CAAC,EAAEK,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE,IAAIxB,CAAC,GAAGa,UAAU,CAACW,CAAC,CAAC,EAAEJ,CAAC,GAAG,CAACH,CAAC,GAAG,CAAC,GAAGjB,CAAC,CAACoB,CAAC,CAAC,GAAGH,CAAC,GAAG,CAAC,GAAGjB,CAAC,CAACc,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,GAAGpB,CAAC,CAACc,MAAM,EAAEC,GAAG,CAAC,KAAKK,CAAC;EACjJ,OAAOH,CAAC,GAAG,CAAC,IAAIG,CAAC,IAAIlB,MAAM,CAACuB,cAAc,CAACX,MAAM,EAAEC,GAAG,EAAEK,CAAC,CAAC,EAAEA,CAAC;AACjE,CAAC;AACD,SAASM,KAAK,QAAQ,SAAS;AAC/B,SAASC,IAAI,EAAEC,wBAAwB,QAAQ,QAAQ;AACvD,SAASC,IAAI,QAAQ,SAAS;AAC9B,SAASC,iBAAiB,QAAQ,kBAAkB;AACpD,SAASC,YAAY,QAAQ,mBAAmB;AAChD,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,OAAO,IAAIC,OAAO;AAClB,CAAC,UAAUA,OAAO,EAAE;EAChBA,OAAO,CAACA,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM;EACrCA,OAAO,CAACA,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;EACvCA,OAAO,CAACA,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;AAC3C,CAAC,EAAEA,OAAO,KAAKA,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;AAC7B;AACA;AACA;AACA,IAAIC,GAAG,GAAG,aAAe,UAAUC,MAAM,EAAE;EACvCrC,SAAS,CAACoC,GAAG,EAAEC,MAAM,CAAC;EACtB,SAASD,GAAG,GAAG;IACX,IAAIE,KAAK,GAAGD,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI;IACrCD,KAAK,CAACE,OAAO,GAAG,CAAC;IACjBF,KAAK,CAACG,OAAO,GAAG,CAAC;IACjBH,KAAK,CAACI,OAAO,GAAG,EAAE;IAClBJ,KAAK,CAACK,OAAO,GAAG,EAAE;IAClBL,KAAK,CAACM,UAAU,GAAG,CAAC;IACpBN,KAAK,CAACO,QAAQ,GAAGC,IAAI,CAACC,EAAE,GAAG,CAAC;IAC5BT,KAAK,CAACU,gBAAgB,GAAG,KAAK;IAC9B;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQV,KAAK,CAACW,IAAI,GAAGd,OAAO,CAACe,IAAI;IACzBZ,KAAK,CAACa,gBAAgB,EAAE;IACxB,OAAOb,KAAK;EAChB;EACAlC,MAAM,CAACuB,cAAc,CAACS,GAAG,CAACxB,SAAS,EAAE,SAAS,EAAE;IAC5CwC,GAAG,EAAE,YAAY;MACb,OAAOlB,OAAO,CAACF,iBAAiB,CAAC,IAAI,CAACY,UAAU,CAAC,EAAEZ,iBAAiB,CAAC,IAAI,CAACa,QAAQ,CAAC,CAAC;IACxF,CAAC;IACDQ,UAAU,EAAE,IAAI;IAChBC,YAAY,EAAE;EAClB,CAAC,CAAC;EACFlB,GAAG,CAACxB,SAAS,CAAC2C,UAAU,GAAG,YAAY;IACnC,IAAIC,IAAI,GAAG,IAAI,CAACA,IAAI;IACpBA,IAAI,CAACC,KAAK,EAAE,CAAC,CAAC;IACd;IACA;IACA;IACA;IACA;IACAD,IAAI,CAACE,QAAQ,CAAC,IAAI,CAAClB,OAAO,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAACC,OAAO,EAAE,IAAI,CAACC,OAAO,EAAE,CAAC,EAAE,IAAI,CAACC,UAAU,EAAE,IAAI,CAACC,QAAQ,EAAE,IAAI,CAACG,gBAAgB,GAAG,CAAC,GAAG,CAAC,CAAC;IACvI,IAAI,IAAI,CAACC,IAAI,KAAKd,OAAO,CAACwB,KAAK,EAAE;MAC7BH,IAAI,CAACI,SAAS,EAAE;IACpB,CAAC,MACI,IAAI,IAAI,CAACX,IAAI,KAAKd,OAAO,CAAC0B,KAAK,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;MACnDN,IAAI,CAACO,MAAM,CAAC,IAAI,CAACvB,OAAO,EAAE,IAAI,CAACC,OAAO,CAAC;MACvCe,IAAI,CAACI,SAAS,EAAE;IACpB;EACJ,CAAC;EACDxB,GAAG,CAACxB,SAAS,CAACoD,WAAW,GAAG,YAAY;IACpC;IACA,OAAO,IAAIjC,IAAI,CAAC,IAAI,CAACS,OAAO,GAAG,IAAI,CAACE,OAAO,EAAE,IAAI,CAACD,OAAO,GAAG,IAAI,CAACE,OAAO,EAAE,IAAI,CAACD,OAAO,GAAG,CAAC,EAAE,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;EACjH,CAAC;EACDP,GAAG,CAACxB,SAAS,CAACqD,aAAa,GAAG,UAAUC,CAAC,EAAEC,CAAC,EAAE;IAC1C,IAAIC,KAAK,GAAG,IAAI,CAACC,cAAc,CAACH,CAAC,EAAEC,CAAC,CAAC;IACrC,IAAIG,IAAI,GAAG,IAAI,CAACN,WAAW,EAAE;IAC7B,OAAQ,IAAI,CAACf,IAAI,KAAKd,OAAO,CAACe,IAAI,IAC9BoB,IAAI,CAACC,aAAa,CAACH,KAAK,CAACF,CAAC,EAAEE,KAAK,CAACD,CAAC,CAAC,IACpC,IAAI,CAACX,IAAI,CAACS,aAAa,CAACG,KAAK,CAACF,CAAC,EAAEE,KAAK,CAACD,CAAC,CAAC;EACjD,CAAC;EACD/B,GAAG,CAACoC,SAAS,GAAG,KAAK;EACrBpC,GAAG,CAACqC,aAAa,GAAGxC,YAAY,CAACL,KAAK,CAAC6C,aAAa,EAAE;IAClDC,SAAS,EAAE,CAAC;IACZC,SAAS,EAAE;EACf,CAAC,CAAC;EACF7D,UAAU,CAAC,CACPgB,wBAAwB,EAAE,CAC7B,EAAEM,GAAG,CAACxB,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;EACpCE,UAAU,CAAC,CACPgB,wBAAwB,EAAE,CAC7B,EAAEM,GAAG,CAACxB,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;EACpCE,UAAU,CAAC,CACPgB,wBAAwB,EAAE,CAC7B,EAAEM,GAAG,CAACxB,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;EACpCE,UAAU,CAAC,CACPgB,wBAAwB,EAAE,CAC7B,EAAEM,GAAG,CAACxB,SAAS,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;EACpCE,UAAU,CAAC,CACPgB,wBAAwB,EAAE,CAC7B,EAAEM,GAAG,CAACxB,SAAS,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;EACvCE,UAAU,CAAC,CACPgB,wBAAwB,EAAE,CAC7B,EAAEM,GAAG,CAACxB,SAAS,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;EACrCE,UAAU,CAAC,CACPgB,wBAAwB,EAAE,CAC7B,EAAEM,GAAG,CAACxB,SAAS,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAC;EAC7CE,UAAU,CAAC,CACPgB,wBAAwB,EAAE,CAC7B,EAAEM,GAAG,CAACxB,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;EACjC,OAAOwB,GAAG;AACd,CAAC,CAACP,IAAI,CAAE;AACR,SAASO,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}