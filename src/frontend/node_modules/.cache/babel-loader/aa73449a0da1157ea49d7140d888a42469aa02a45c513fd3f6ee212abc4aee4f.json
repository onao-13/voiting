{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ag_charts_vue = _resolveComponent(\"ag-charts-vue\");\n  const _component_down_load_button = _resolveComponent(\"down-load-button\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_ag_charts_vue, {\n    options: _ctx.options\n  }, null, 8 /* PROPS */, [\"options\"]), _createVNode(_component_down_load_button, {\n    dom: \"#invoice\",\n    name: \"myFilename.pdf\"\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;;;6DAEGA,aAAmDC;IAAlCC,OAAO,EAAEC;EAAO,sCAEjCH,aAAwDI;IAAtCC,GAAG,EAAC,UAAU;IAACC,IAAI,EAAC","names":["_createVNode","_component_ag_charts_vue","options","_ctx","_component_down_load_button","dom","name"],"sourceRoot":"","sources":["C:\\Users\\guzny\\OneDrive\\Рабочий стол\\frontend\\src\\components\\PieChart.vue"],"sourcesContent":["<template>\r\n\r\n   <ag-charts-vue  :options=\"options\"></ag-charts-vue>\r\n\r\n   <down-load-button dom=\"#invoice\" name=\"myFilename.pdf\"/>\r\n</template>\r\n\r\n<script>\r\nimport { AgChartsVue } from 'ag-charts-vue3';\r\nimport { mapGetters } from 'vuex';\r\n\r\nimport pdfMake from 'pdfmake';\r\nimport pdfFonts from 'pdfmake/build/vfs_fonts';\r\nimport htmlToPdfmake from 'html-to-pdfmake';\r\n\r\nexport default {\r\n\r\n  components: {\r\n    'ag-charts-vue': AgChartsVue,\r\n  },\r\n  data: function () {\r\n    return {\r\n      options: null,\r\n      event: {\r\n\r\n      }\r\n    };\r\n  },\r\n\r\n  methods: {\r\n    createChart() {\r\n      this.options = {\r\n        data: [\r\n          { label: 'За', value: this.event.voteFor},\r\n          { label: 'Против', value: this.event.voteAgainst },\r\n        ],\r\n        series: [\r\n          {\r\n            type: 'pie',\r\n            angleKey: 'value',\r\n            calloutLabelKey: 'label',\r\n            calloutLabel: {\r\n              minAngle: 0,\r\n            },\r\n            sectorLabelKey: 'value',\r\n            sectorLabel: {\r\n              color: 'white',\r\n              fontWeight: 'bold',\r\n              fontSize: 17,\r\n            },\r\n            fills: ['#FF0000', '#0000FF'],\r\n            highlightStyle: {\r\n            item: {\r\n              fillOpacity: 0,\r\n              stroke: '#000',\r\n              strokeWidth: 3,\r\n              },\r\n            },\r\n          },\r\n        ],\r\n        legend: {\r\n          enabled: false,\r\n        },\r\n     };\r\n    },\r\n\r\n    getEvent() {\r\n      this.event = this.EVENTS[this.$route.params['id']-1]\r\n    },\r\n\r\n    print() {\r\n      //get table html\r\n      const pdfTable = document.getElementById('printCons');\r\n      //html to pdf format\r\n      var html = htmlToPdfmake(pdfTable.innerHTML);\r\n\r\n      const documentDefinition = { content: html };\r\n      pdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n      pdfMake.createPdf(documentDefinition).open();\r\n    }\r\n  },\r\n\r\n  created() {\r\n    this.createChart()\r\n\r\n  },\r\n\r\n  mounted() {\r\n    this.getEvent()\r\n    this.createChart()\r\n  },\r\n\r\n  computed: {\r\n   ...mapGetters([\r\n     'EVENTS',\r\n   ]),\r\n },\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}