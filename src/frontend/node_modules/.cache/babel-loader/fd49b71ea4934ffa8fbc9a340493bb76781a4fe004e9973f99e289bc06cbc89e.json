{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar Color = /** @class */function () {\n  /**\n   * Every color component should be in the [0, 1] range.\n   * Some easing functions (such as elastic easing) can overshoot the target value by some amount.\n   * So, when animating colors, if the source or target color components are already near\n   * or at the edge of the allowed [0, 1] range, it is possible for the intermediate color\n   * component value to end up outside of that range mid-animation. For this reason the constructor\n   * performs range checking/constraining.\n   * @param r Red component.\n   * @param g Green component.\n   * @param b Blue component.\n   * @param a Alpha (opacity) component.\n   */\n  function Color(r, g, b, a) {\n    if (a === void 0) {\n      a = 1;\n    }\n    // NaN is treated as 0.\n    this.r = Math.min(1, Math.max(0, r || 0));\n    this.g = Math.min(1, Math.max(0, g || 0));\n    this.b = Math.min(1, Math.max(0, b || 0));\n    this.a = Math.min(1, Math.max(0, a || 0));\n  }\n  /**\n   * A color string can be in one of the following formats to be valid:\n   * - #rgb\n   * - #rrggbb\n   * - rgb(r, g, b)\n   * - rgba(r, g, b, a)\n   * - CSS color name such as 'white', 'orange', 'cyan', etc.\n   */\n  Color.validColorString = function (str) {\n    if (str.indexOf('#') >= 0) {\n      return !!Color.parseHex(str);\n    }\n    if (str.indexOf('rgb') >= 0) {\n      return !!Color.stringToRgba(str);\n    }\n    return !!Color.nameToHex[str.toLowerCase()];\n  };\n  /**\n   * The given string can be in one of the following formats:\n   * - #rgb\n   * - #rrggbb\n   * - rgb(r, g, b)\n   * - rgba(r, g, b, a)\n   * - CSS color name such as 'white', 'orange', 'cyan', etc.\n   * @param str\n   */\n  Color.fromString = function (str) {\n    // hexadecimal notation\n    if (str.indexOf('#') >= 0) {\n      // there can be some leading whitespace\n      return Color.fromHexString(str);\n    }\n    // color name\n    var hex = Color.nameToHex[str.toLowerCase()];\n    if (hex) {\n      return Color.fromHexString(hex);\n    }\n    // rgb(a) notation\n    if (str.indexOf('rgb') >= 0) {\n      return Color.fromRgbaString(str);\n    }\n    throw new Error(\"Invalid color string: '\" + str + \"'\");\n  };\n  // See https://drafts.csswg.org/css-color/#hex-notation\n  Color.parseHex = function (input) {\n    var _a;\n    input = input.replace(/ /g, '').slice(1);\n    var parts;\n    switch (input.length) {\n      case 6:\n      case 8:\n        parts = [];\n        for (var i = 0; i < input.length; i += 2) {\n          parts.push(parseInt(\"\" + input[i] + input[i + 1], 16));\n        }\n        break;\n      case 3:\n      case 4:\n        parts = input.split('').map(function (p) {\n          return parseInt(p, 16);\n        }).map(function (p) {\n          return p + p * 16;\n        });\n        break;\n    }\n    if (((_a = parts) === null || _a === void 0 ? void 0 : _a.length) >= 3) {\n      if (parts.every(function (p) {\n        return p >= 0;\n      })) {\n        if (parts.length === 3) {\n          parts.push(255);\n        }\n        return parts;\n      }\n    }\n  };\n  Color.fromHexString = function (str) {\n    var values = Color.parseHex(str);\n    if (values) {\n      var _a = __read(values, 4),\n        r = _a[0],\n        g = _a[1],\n        b = _a[2],\n        a = _a[3];\n      return new Color(r / 255, g / 255, b / 255, a / 255);\n    }\n    throw new Error(\"Malformed hexadecimal color string: '\" + str + \"'\");\n  };\n  Color.stringToRgba = function (str) {\n    // Find positions of opening and closing parentheses.\n    var _a = __read([NaN, NaN], 2),\n      po = _a[0],\n      pc = _a[1];\n    for (var i = 0; i < str.length; i++) {\n      var c = str[i];\n      if (!po && c === '(') {\n        po = i;\n      } else if (c === ')') {\n        pc = i;\n        break;\n      }\n    }\n    var contents = po && pc && str.substring(po + 1, pc);\n    if (!contents) {\n      return;\n    }\n    var parts = contents.split(',');\n    var rgba = [];\n    for (var i = 0; i < parts.length; i++) {\n      var part = parts[i];\n      var value = parseFloat(part);\n      if (isNaN(value)) {\n        return;\n      }\n      if (part.indexOf('%') >= 0) {\n        // percentage r, g, or b value\n        value = Math.max(0, Math.min(100, value));\n        value /= 100;\n      } else {\n        if (i === 3) {\n          // alpha component\n          value = Math.max(0, Math.min(1, value));\n        } else {\n          // absolute r, g, or b value\n          value = Math.max(0, Math.min(255, value));\n          value /= 255;\n        }\n      }\n      rgba.push(value);\n    }\n    return rgba;\n  };\n  Color.fromRgbaString = function (str) {\n    var rgba = Color.stringToRgba(str);\n    if (rgba) {\n      if (rgba.length === 3) {\n        return new Color(rgba[0], rgba[1], rgba[2]);\n      } else if (rgba.length === 4) {\n        return new Color(rgba[0], rgba[1], rgba[2], rgba[3]);\n      }\n    }\n    throw new Error(\"Malformed rgb/rgba color string: '\" + str + \"'\");\n  };\n  Color.fromArray = function (arr) {\n    if (arr.length === 4) {\n      return new Color(arr[0], arr[1], arr[2], arr[3]);\n    }\n    if (arr.length === 3) {\n      return new Color(arr[0], arr[1], arr[2]);\n    }\n    throw new Error('The given array should contain 3 or 4 color components (numbers).');\n  };\n  Color.fromHSB = function (h, s, b, alpha) {\n    if (alpha === void 0) {\n      alpha = 1;\n    }\n    var rgb = Color.HSBtoRGB(h, s, b);\n    return new Color(rgb[0], rgb[1], rgb[2], alpha);\n  };\n  Color.padHex = function (str) {\n    // Can't use `padStart(2, '0')` here because of IE.\n    return str.length === 1 ? '0' + str : str;\n  };\n  Color.prototype.toHexString = function () {\n    var hex = '#' + Color.padHex(Math.round(this.r * 255).toString(16)) + Color.padHex(Math.round(this.g * 255).toString(16)) + Color.padHex(Math.round(this.b * 255).toString(16));\n    if (this.a < 1) {\n      hex += Color.padHex(Math.round(this.a * 255).toString(16));\n    }\n    return hex;\n  };\n  Color.prototype.toRgbaString = function (fractionDigits) {\n    if (fractionDigits === void 0) {\n      fractionDigits = 3;\n    }\n    var components = [Math.round(this.r * 255), Math.round(this.g * 255), Math.round(this.b * 255)];\n    var k = Math.pow(10, fractionDigits);\n    if (this.a !== 1) {\n      components.push(Math.round(this.a * k) / k);\n      return \"rgba(\" + components.join(', ') + \")\";\n    }\n    return \"rgb(\" + components.join(', ') + \")\";\n  };\n  Color.prototype.toString = function () {\n    if (this.a === 1) {\n      return this.toHexString();\n    }\n    return this.toRgbaString();\n  };\n  Color.prototype.toHSB = function () {\n    return Color.RGBtoHSB(this.r, this.g, this.b);\n  };\n  /**\n   * Converts the given RGB triple to an array of HSB (HSV) components.\n   * The hue component will be `NaN` for achromatic colors.\n   */\n  Color.RGBtoHSB = function (r, g, b) {\n    var min = Math.min(r, g, b);\n    var max = Math.max(r, g, b);\n    var S = max !== 0 ? (max - min) / max : 0;\n    var H = NaN;\n    // min == max, means all components are the same\n    // and the color is a shade of gray with no hue (H is NaN)\n    if (min !== max) {\n      var delta = max - min;\n      var rc = (max - r) / delta;\n      var gc = (max - g) / delta;\n      var bc = (max - b) / delta;\n      if (r === max) {\n        H = bc - gc;\n      } else if (g === max) {\n        H = 2.0 + rc - bc;\n      } else {\n        H = 4.0 + gc - rc;\n      }\n      H /= 6.0;\n      if (H < 0) {\n        H = H + 1.0;\n      }\n    }\n    return [H * 360, S, max];\n  };\n  /**\n   * Converts the given HSB (HSV) triple to an array of RGB components.\n   */\n  Color.HSBtoRGB = function (H, S, B) {\n    if (isNaN(H)) {\n      H = 0;\n    }\n    H = (H % 360 + 360) % 360 / 360; // normalize hue to [0, 360] interval, then scale to [0, 1]\n    var r = 0;\n    var g = 0;\n    var b = 0;\n    if (S === 0) {\n      r = g = b = B;\n    } else {\n      var h = (H - Math.floor(H)) * 6;\n      var f = h - Math.floor(h);\n      var p = B * (1 - S);\n      var q = B * (1 - S * f);\n      var t = B * (1 - S * (1 - f));\n      switch (h >> 0 // discard the floating point part of the number\n      ) {\n        case 0:\n          r = B;\n          g = t;\n          b = p;\n          break;\n        case 1:\n          r = q;\n          g = B;\n          b = p;\n          break;\n        case 2:\n          r = p;\n          g = B;\n          b = t;\n          break;\n        case 3:\n          r = p;\n          g = q;\n          b = B;\n          break;\n        case 4:\n          r = t;\n          g = p;\n          b = B;\n          break;\n        case 5:\n          r = B;\n          g = p;\n          b = q;\n          break;\n      }\n    }\n    return [r, g, b];\n  };\n  Color.prototype.derive = function (hueShift, saturationFactor, brightnessFactor, opacityFactor) {\n    var hsb = Color.RGBtoHSB(this.r, this.g, this.b);\n    var b = hsb[2];\n    if (b == 0 && brightnessFactor > 1.0) {\n      b = 0.05;\n    }\n    var h = ((hsb[0] + hueShift) % 360 + 360) % 360;\n    var s = Math.max(Math.min(hsb[1] * saturationFactor, 1.0), 0.0);\n    b = Math.max(Math.min(b * brightnessFactor, 1.0), 0.0);\n    var a = Math.max(Math.min(this.a * opacityFactor, 1.0), 0.0);\n    var rgba = Color.HSBtoRGB(h, s, b);\n    rgba.push(a);\n    return Color.fromArray(rgba);\n  };\n  Color.prototype.brighter = function () {\n    return this.derive(0, 1.0, 1.0 / 0.7, 1.0);\n  };\n  Color.prototype.darker = function () {\n    return this.derive(0, 1.0, 0.7, 1.0);\n  };\n  /**\n   * CSS Color Module Level 4:\n   * https://drafts.csswg.org/css-color/#named-colors\n   */\n  Color.nameToHex = Object.freeze({\n    aliceblue: '#F0F8FF',\n    antiquewhite: '#FAEBD7',\n    aqua: '#00FFFF',\n    aquamarine: '#7FFFD4',\n    azure: '#F0FFFF',\n    beige: '#F5F5DC',\n    bisque: '#FFE4C4',\n    black: '#000000',\n    blanchedalmond: '#FFEBCD',\n    blue: '#0000FF',\n    blueviolet: '#8A2BE2',\n    brown: '#A52A2A',\n    burlywood: '#DEB887',\n    cadetblue: '#5F9EA0',\n    chartreuse: '#7FFF00',\n    chocolate: '#D2691E',\n    coral: '#FF7F50',\n    cornflowerblue: '#6495ED',\n    cornsilk: '#FFF8DC',\n    crimson: '#DC143C',\n    cyan: '#00FFFF',\n    darkblue: '#00008B',\n    darkcyan: '#008B8B',\n    darkgoldenrod: '#B8860B',\n    darkgray: '#A9A9A9',\n    darkgreen: '#006400',\n    darkgrey: '#A9A9A9',\n    darkkhaki: '#BDB76B',\n    darkmagenta: '#8B008B',\n    darkolivegreen: '#556B2F',\n    darkorange: '#FF8C00',\n    darkorchid: '#9932CC',\n    darkred: '#8B0000',\n    darksalmon: '#E9967A',\n    darkseagreen: '#8FBC8F',\n    darkslateblue: '#483D8B',\n    darkslategray: '#2F4F4F',\n    darkslategrey: '#2F4F4F',\n    darkturquoise: '#00CED1',\n    darkviolet: '#9400D3',\n    deeppink: '#FF1493',\n    deepskyblue: '#00BFFF',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1E90FF',\n    firebrick: '#B22222',\n    floralwhite: '#FFFAF0',\n    forestgreen: '#228B22',\n    fuchsia: '#FF00FF',\n    gainsboro: '#DCDCDC',\n    ghostwhite: '#F8F8FF',\n    gold: '#FFD700',\n    goldenrod: '#DAA520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#ADFF2F',\n    grey: '#808080',\n    honeydew: '#F0FFF0',\n    hotpink: '#FF69B4',\n    indianred: '#CD5C5C',\n    indigo: '#4B0082',\n    ivory: '#FFFFF0',\n    khaki: '#F0E68C',\n    lavender: '#E6E6FA',\n    lavenderblush: '#FFF0F5',\n    lawngreen: '#7CFC00',\n    lemonchiffon: '#FFFACD',\n    lightblue: '#ADD8E6',\n    lightcoral: '#F08080',\n    lightcyan: '#E0FFFF',\n    lightgoldenrodyellow: '#FAFAD2',\n    lightgray: '#D3D3D3',\n    lightgreen: '#90EE90',\n    lightgrey: '#D3D3D3',\n    lightpink: '#FFB6C1',\n    lightsalmon: '#FFA07A',\n    lightseagreen: '#20B2AA',\n    lightskyblue: '#87CEFA',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#B0C4DE',\n    lightyellow: '#FFFFE0',\n    lime: '#00FF00',\n    limegreen: '#32CD32',\n    linen: '#FAF0E6',\n    magenta: '#FF00FF',\n    maroon: '#800000',\n    mediumaquamarine: '#66CDAA',\n    mediumblue: '#0000CD',\n    mediumorchid: '#BA55D3',\n    mediumpurple: '#9370DB',\n    mediumseagreen: '#3CB371',\n    mediumslateblue: '#7B68EE',\n    mediumspringgreen: '#00FA9A',\n    mediumturquoise: '#48D1CC',\n    mediumvioletred: '#C71585',\n    midnightblue: '#191970',\n    mintcream: '#F5FFFA',\n    mistyrose: '#FFE4E1',\n    moccasin: '#FFE4B5',\n    navajowhite: '#FFDEAD',\n    navy: '#000080',\n    oldlace: '#FDF5E6',\n    olive: '#808000',\n    olivedrab: '#6B8E23',\n    orange: '#FFA500',\n    orangered: '#FF4500',\n    orchid: '#DA70D6',\n    palegoldenrod: '#EEE8AA',\n    palegreen: '#98FB98',\n    paleturquoise: '#AFEEEE',\n    palevioletred: '#DB7093',\n    papayawhip: '#FFEFD5',\n    peachpuff: '#FFDAB9',\n    peru: '#CD853F',\n    pink: '#FFC0CB',\n    plum: '#DDA0DD',\n    powderblue: '#B0E0E6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#FF0000',\n    rosybrown: '#BC8F8F',\n    royalblue: '#4169E1',\n    saddlebrown: '#8B4513',\n    salmon: '#FA8072',\n    sandybrown: '#F4A460',\n    seagreen: '#2E8B57',\n    seashell: '#FFF5EE',\n    sienna: '#A0522D',\n    silver: '#C0C0C0',\n    skyblue: '#87CEEB',\n    slateblue: '#6A5ACD',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#FFFAFA',\n    springgreen: '#00FF7F',\n    steelblue: '#4682B4',\n    tan: '#D2B48C',\n    teal: '#008080',\n    thistle: '#D8BFD8',\n    tomato: '#FF6347',\n    transparent: '#00000000',\n    turquoise: '#40E0D0',\n    violet: '#EE82EE',\n    wheat: '#F5DEB3',\n    white: '#FFFFFF',\n    whitesmoke: '#F5F5F5',\n    yellow: '#FFFF00',\n    yellowgreen: '#9ACD32'\n  });\n  return Color;\n}();\nexport { Color };","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","Color","g","b","a","Math","min","max","validColorString","str","indexOf","parseHex","stringToRgba","nameToHex","toLowerCase","fromString","fromHexString","hex","fromRgbaString","Error","input","_a","replace","slice","parts","length","parseInt","split","map","p","every","values","NaN","po","pc","c","contents","substring","rgba","part","parseFloat","isNaN","fromArray","arr","fromHSB","h","s","alpha","rgb","HSBtoRGB","padHex","prototype","toHexString","round","toString","toRgbaString","fractionDigits","components","k","pow","join","toHSB","RGBtoHSB","S","H","delta","rc","gc","bc","B","floor","f","q","t","derive","hueShift","saturationFactor","brightnessFactor","opacityFactor","hsb","brighter","darker","Object","freeze","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","transparent","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen"],"sources":["C:/Users/guzny/OneDrive/Рабочий стол/frontend/node_modules/ag-charts-community/dist/esm/es5/util/color.js"],"sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar Color = /** @class */ (function () {\n    /**\n     * Every color component should be in the [0, 1] range.\n     * Some easing functions (such as elastic easing) can overshoot the target value by some amount.\n     * So, when animating colors, if the source or target color components are already near\n     * or at the edge of the allowed [0, 1] range, it is possible for the intermediate color\n     * component value to end up outside of that range mid-animation. For this reason the constructor\n     * performs range checking/constraining.\n     * @param r Red component.\n     * @param g Green component.\n     * @param b Blue component.\n     * @param a Alpha (opacity) component.\n     */\n    function Color(r, g, b, a) {\n        if (a === void 0) { a = 1; }\n        // NaN is treated as 0.\n        this.r = Math.min(1, Math.max(0, r || 0));\n        this.g = Math.min(1, Math.max(0, g || 0));\n        this.b = Math.min(1, Math.max(0, b || 0));\n        this.a = Math.min(1, Math.max(0, a || 0));\n    }\n    /**\n     * A color string can be in one of the following formats to be valid:\n     * - #rgb\n     * - #rrggbb\n     * - rgb(r, g, b)\n     * - rgba(r, g, b, a)\n     * - CSS color name such as 'white', 'orange', 'cyan', etc.\n     */\n    Color.validColorString = function (str) {\n        if (str.indexOf('#') >= 0) {\n            return !!Color.parseHex(str);\n        }\n        if (str.indexOf('rgb') >= 0) {\n            return !!Color.stringToRgba(str);\n        }\n        return !!Color.nameToHex[str.toLowerCase()];\n    };\n    /**\n     * The given string can be in one of the following formats:\n     * - #rgb\n     * - #rrggbb\n     * - rgb(r, g, b)\n     * - rgba(r, g, b, a)\n     * - CSS color name such as 'white', 'orange', 'cyan', etc.\n     * @param str\n     */\n    Color.fromString = function (str) {\n        // hexadecimal notation\n        if (str.indexOf('#') >= 0) {\n            // there can be some leading whitespace\n            return Color.fromHexString(str);\n        }\n        // color name\n        var hex = Color.nameToHex[str.toLowerCase()];\n        if (hex) {\n            return Color.fromHexString(hex);\n        }\n        // rgb(a) notation\n        if (str.indexOf('rgb') >= 0) {\n            return Color.fromRgbaString(str);\n        }\n        throw new Error(\"Invalid color string: '\" + str + \"'\");\n    };\n    // See https://drafts.csswg.org/css-color/#hex-notation\n    Color.parseHex = function (input) {\n        var _a;\n        input = input.replace(/ /g, '').slice(1);\n        var parts;\n        switch (input.length) {\n            case 6:\n            case 8:\n                parts = [];\n                for (var i = 0; i < input.length; i += 2) {\n                    parts.push(parseInt(\"\" + input[i] + input[i + 1], 16));\n                }\n                break;\n            case 3:\n            case 4:\n                parts = input\n                    .split('')\n                    .map(function (p) { return parseInt(p, 16); })\n                    .map(function (p) { return p + p * 16; });\n                break;\n        }\n        if (((_a = parts) === null || _a === void 0 ? void 0 : _a.length) >= 3) {\n            if (parts.every(function (p) { return p >= 0; })) {\n                if (parts.length === 3) {\n                    parts.push(255);\n                }\n                return parts;\n            }\n        }\n    };\n    Color.fromHexString = function (str) {\n        var values = Color.parseHex(str);\n        if (values) {\n            var _a = __read(values, 4), r = _a[0], g = _a[1], b = _a[2], a = _a[3];\n            return new Color(r / 255, g / 255, b / 255, a / 255);\n        }\n        throw new Error(\"Malformed hexadecimal color string: '\" + str + \"'\");\n    };\n    Color.stringToRgba = function (str) {\n        // Find positions of opening and closing parentheses.\n        var _a = __read([NaN, NaN], 2), po = _a[0], pc = _a[1];\n        for (var i = 0; i < str.length; i++) {\n            var c = str[i];\n            if (!po && c === '(') {\n                po = i;\n            }\n            else if (c === ')') {\n                pc = i;\n                break;\n            }\n        }\n        var contents = po && pc && str.substring(po + 1, pc);\n        if (!contents) {\n            return;\n        }\n        var parts = contents.split(',');\n        var rgba = [];\n        for (var i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            var value = parseFloat(part);\n            if (isNaN(value)) {\n                return;\n            }\n            if (part.indexOf('%') >= 0) {\n                // percentage r, g, or b value\n                value = Math.max(0, Math.min(100, value));\n                value /= 100;\n            }\n            else {\n                if (i === 3) {\n                    // alpha component\n                    value = Math.max(0, Math.min(1, value));\n                }\n                else {\n                    // absolute r, g, or b value\n                    value = Math.max(0, Math.min(255, value));\n                    value /= 255;\n                }\n            }\n            rgba.push(value);\n        }\n        return rgba;\n    };\n    Color.fromRgbaString = function (str) {\n        var rgba = Color.stringToRgba(str);\n        if (rgba) {\n            if (rgba.length === 3) {\n                return new Color(rgba[0], rgba[1], rgba[2]);\n            }\n            else if (rgba.length === 4) {\n                return new Color(rgba[0], rgba[1], rgba[2], rgba[3]);\n            }\n        }\n        throw new Error(\"Malformed rgb/rgba color string: '\" + str + \"'\");\n    };\n    Color.fromArray = function (arr) {\n        if (arr.length === 4) {\n            return new Color(arr[0], arr[1], arr[2], arr[3]);\n        }\n        if (arr.length === 3) {\n            return new Color(arr[0], arr[1], arr[2]);\n        }\n        throw new Error('The given array should contain 3 or 4 color components (numbers).');\n    };\n    Color.fromHSB = function (h, s, b, alpha) {\n        if (alpha === void 0) { alpha = 1; }\n        var rgb = Color.HSBtoRGB(h, s, b);\n        return new Color(rgb[0], rgb[1], rgb[2], alpha);\n    };\n    Color.padHex = function (str) {\n        // Can't use `padStart(2, '0')` here because of IE.\n        return str.length === 1 ? '0' + str : str;\n    };\n    Color.prototype.toHexString = function () {\n        var hex = '#' +\n            Color.padHex(Math.round(this.r * 255).toString(16)) +\n            Color.padHex(Math.round(this.g * 255).toString(16)) +\n            Color.padHex(Math.round(this.b * 255).toString(16));\n        if (this.a < 1) {\n            hex += Color.padHex(Math.round(this.a * 255).toString(16));\n        }\n        return hex;\n    };\n    Color.prototype.toRgbaString = function (fractionDigits) {\n        if (fractionDigits === void 0) { fractionDigits = 3; }\n        var components = [Math.round(this.r * 255), Math.round(this.g * 255), Math.round(this.b * 255)];\n        var k = Math.pow(10, fractionDigits);\n        if (this.a !== 1) {\n            components.push(Math.round(this.a * k) / k);\n            return \"rgba(\" + components.join(', ') + \")\";\n        }\n        return \"rgb(\" + components.join(', ') + \")\";\n    };\n    Color.prototype.toString = function () {\n        if (this.a === 1) {\n            return this.toHexString();\n        }\n        return this.toRgbaString();\n    };\n    Color.prototype.toHSB = function () {\n        return Color.RGBtoHSB(this.r, this.g, this.b);\n    };\n    /**\n     * Converts the given RGB triple to an array of HSB (HSV) components.\n     * The hue component will be `NaN` for achromatic colors.\n     */\n    Color.RGBtoHSB = function (r, g, b) {\n        var min = Math.min(r, g, b);\n        var max = Math.max(r, g, b);\n        var S = max !== 0 ? (max - min) / max : 0;\n        var H = NaN;\n        // min == max, means all components are the same\n        // and the color is a shade of gray with no hue (H is NaN)\n        if (min !== max) {\n            var delta = max - min;\n            var rc = (max - r) / delta;\n            var gc = (max - g) / delta;\n            var bc = (max - b) / delta;\n            if (r === max) {\n                H = bc - gc;\n            }\n            else if (g === max) {\n                H = 2.0 + rc - bc;\n            }\n            else {\n                H = 4.0 + gc - rc;\n            }\n            H /= 6.0;\n            if (H < 0) {\n                H = H + 1.0;\n            }\n        }\n        return [H * 360, S, max];\n    };\n    /**\n     * Converts the given HSB (HSV) triple to an array of RGB components.\n     */\n    Color.HSBtoRGB = function (H, S, B) {\n        if (isNaN(H)) {\n            H = 0;\n        }\n        H = (((H % 360) + 360) % 360) / 360; // normalize hue to [0, 360] interval, then scale to [0, 1]\n        var r = 0;\n        var g = 0;\n        var b = 0;\n        if (S === 0) {\n            r = g = b = B;\n        }\n        else {\n            var h = (H - Math.floor(H)) * 6;\n            var f = h - Math.floor(h);\n            var p = B * (1 - S);\n            var q = B * (1 - S * f);\n            var t = B * (1 - S * (1 - f));\n            switch (h >> 0 // discard the floating point part of the number\n            ) {\n                case 0:\n                    r = B;\n                    g = t;\n                    b = p;\n                    break;\n                case 1:\n                    r = q;\n                    g = B;\n                    b = p;\n                    break;\n                case 2:\n                    r = p;\n                    g = B;\n                    b = t;\n                    break;\n                case 3:\n                    r = p;\n                    g = q;\n                    b = B;\n                    break;\n                case 4:\n                    r = t;\n                    g = p;\n                    b = B;\n                    break;\n                case 5:\n                    r = B;\n                    g = p;\n                    b = q;\n                    break;\n            }\n        }\n        return [r, g, b];\n    };\n    Color.prototype.derive = function (hueShift, saturationFactor, brightnessFactor, opacityFactor) {\n        var hsb = Color.RGBtoHSB(this.r, this.g, this.b);\n        var b = hsb[2];\n        if (b == 0 && brightnessFactor > 1.0) {\n            b = 0.05;\n        }\n        var h = (((hsb[0] + hueShift) % 360) + 360) % 360;\n        var s = Math.max(Math.min(hsb[1] * saturationFactor, 1.0), 0.0);\n        b = Math.max(Math.min(b * brightnessFactor, 1.0), 0.0);\n        var a = Math.max(Math.min(this.a * opacityFactor, 1.0), 0.0);\n        var rgba = Color.HSBtoRGB(h, s, b);\n        rgba.push(a);\n        return Color.fromArray(rgba);\n    };\n    Color.prototype.brighter = function () {\n        return this.derive(0, 1.0, 1.0 / 0.7, 1.0);\n    };\n    Color.prototype.darker = function () {\n        return this.derive(0, 1.0, 0.7, 1.0);\n    };\n    /**\n     * CSS Color Module Level 4:\n     * https://drafts.csswg.org/css-color/#named-colors\n     */\n    Color.nameToHex = Object.freeze({\n        aliceblue: '#F0F8FF',\n        antiquewhite: '#FAEBD7',\n        aqua: '#00FFFF',\n        aquamarine: '#7FFFD4',\n        azure: '#F0FFFF',\n        beige: '#F5F5DC',\n        bisque: '#FFE4C4',\n        black: '#000000',\n        blanchedalmond: '#FFEBCD',\n        blue: '#0000FF',\n        blueviolet: '#8A2BE2',\n        brown: '#A52A2A',\n        burlywood: '#DEB887',\n        cadetblue: '#5F9EA0',\n        chartreuse: '#7FFF00',\n        chocolate: '#D2691E',\n        coral: '#FF7F50',\n        cornflowerblue: '#6495ED',\n        cornsilk: '#FFF8DC',\n        crimson: '#DC143C',\n        cyan: '#00FFFF',\n        darkblue: '#00008B',\n        darkcyan: '#008B8B',\n        darkgoldenrod: '#B8860B',\n        darkgray: '#A9A9A9',\n        darkgreen: '#006400',\n        darkgrey: '#A9A9A9',\n        darkkhaki: '#BDB76B',\n        darkmagenta: '#8B008B',\n        darkolivegreen: '#556B2F',\n        darkorange: '#FF8C00',\n        darkorchid: '#9932CC',\n        darkred: '#8B0000',\n        darksalmon: '#E9967A',\n        darkseagreen: '#8FBC8F',\n        darkslateblue: '#483D8B',\n        darkslategray: '#2F4F4F',\n        darkslategrey: '#2F4F4F',\n        darkturquoise: '#00CED1',\n        darkviolet: '#9400D3',\n        deeppink: '#FF1493',\n        deepskyblue: '#00BFFF',\n        dimgray: '#696969',\n        dimgrey: '#696969',\n        dodgerblue: '#1E90FF',\n        firebrick: '#B22222',\n        floralwhite: '#FFFAF0',\n        forestgreen: '#228B22',\n        fuchsia: '#FF00FF',\n        gainsboro: '#DCDCDC',\n        ghostwhite: '#F8F8FF',\n        gold: '#FFD700',\n        goldenrod: '#DAA520',\n        gray: '#808080',\n        green: '#008000',\n        greenyellow: '#ADFF2F',\n        grey: '#808080',\n        honeydew: '#F0FFF0',\n        hotpink: '#FF69B4',\n        indianred: '#CD5C5C',\n        indigo: '#4B0082',\n        ivory: '#FFFFF0',\n        khaki: '#F0E68C',\n        lavender: '#E6E6FA',\n        lavenderblush: '#FFF0F5',\n        lawngreen: '#7CFC00',\n        lemonchiffon: '#FFFACD',\n        lightblue: '#ADD8E6',\n        lightcoral: '#F08080',\n        lightcyan: '#E0FFFF',\n        lightgoldenrodyellow: '#FAFAD2',\n        lightgray: '#D3D3D3',\n        lightgreen: '#90EE90',\n        lightgrey: '#D3D3D3',\n        lightpink: '#FFB6C1',\n        lightsalmon: '#FFA07A',\n        lightseagreen: '#20B2AA',\n        lightskyblue: '#87CEFA',\n        lightslategray: '#778899',\n        lightslategrey: '#778899',\n        lightsteelblue: '#B0C4DE',\n        lightyellow: '#FFFFE0',\n        lime: '#00FF00',\n        limegreen: '#32CD32',\n        linen: '#FAF0E6',\n        magenta: '#FF00FF',\n        maroon: '#800000',\n        mediumaquamarine: '#66CDAA',\n        mediumblue: '#0000CD',\n        mediumorchid: '#BA55D3',\n        mediumpurple: '#9370DB',\n        mediumseagreen: '#3CB371',\n        mediumslateblue: '#7B68EE',\n        mediumspringgreen: '#00FA9A',\n        mediumturquoise: '#48D1CC',\n        mediumvioletred: '#C71585',\n        midnightblue: '#191970',\n        mintcream: '#F5FFFA',\n        mistyrose: '#FFE4E1',\n        moccasin: '#FFE4B5',\n        navajowhite: '#FFDEAD',\n        navy: '#000080',\n        oldlace: '#FDF5E6',\n        olive: '#808000',\n        olivedrab: '#6B8E23',\n        orange: '#FFA500',\n        orangered: '#FF4500',\n        orchid: '#DA70D6',\n        palegoldenrod: '#EEE8AA',\n        palegreen: '#98FB98',\n        paleturquoise: '#AFEEEE',\n        palevioletred: '#DB7093',\n        papayawhip: '#FFEFD5',\n        peachpuff: '#FFDAB9',\n        peru: '#CD853F',\n        pink: '#FFC0CB',\n        plum: '#DDA0DD',\n        powderblue: '#B0E0E6',\n        purple: '#800080',\n        rebeccapurple: '#663399',\n        red: '#FF0000',\n        rosybrown: '#BC8F8F',\n        royalblue: '#4169E1',\n        saddlebrown: '#8B4513',\n        salmon: '#FA8072',\n        sandybrown: '#F4A460',\n        seagreen: '#2E8B57',\n        seashell: '#FFF5EE',\n        sienna: '#A0522D',\n        silver: '#C0C0C0',\n        skyblue: '#87CEEB',\n        slateblue: '#6A5ACD',\n        slategray: '#708090',\n        slategrey: '#708090',\n        snow: '#FFFAFA',\n        springgreen: '#00FF7F',\n        steelblue: '#4682B4',\n        tan: '#D2B48C',\n        teal: '#008080',\n        thistle: '#D8BFD8',\n        tomato: '#FF6347',\n        transparent: '#00000000',\n        turquoise: '#40E0D0',\n        violet: '#EE82EE',\n        wheat: '#F5DEB3',\n        white: '#FFFFFF',\n        whitesmoke: '#F5F5F5',\n        yellow: '#FFFF00',\n        yellowgreen: '#9ACD32',\n    });\n    return Color;\n}());\nexport { Color };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}