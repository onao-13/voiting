{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Path, ScenePathChangeDetection } from './path';\nimport { BBox } from '../bbox';\nimport { LinearGradient } from '../gradient/linearGradient';\nimport { Color } from '../../util/color';\nimport { Shape } from './shape';\nimport { Path2D } from '../path2D';\nexport var RectSizing;\n(function (RectSizing) {\n  RectSizing[RectSizing[\"Content\"] = 0] = \"Content\";\n  RectSizing[RectSizing[\"Border\"] = 1] = \"Border\";\n})(RectSizing || (RectSizing = {}));\nvar Rect = /** @class */function (_super) {\n  __extends(Rect, _super);\n  function Rect() {\n    var _this = _super.call(this, function (ctx) {\n      return _this.renderRect(ctx);\n    }) || this;\n    _this.borderPath = new Path2D();\n    _this.x = 0;\n    _this.y = 0;\n    _this.width = 10;\n    _this.height = 10;\n    _this.radius = 0;\n    /**\n     * If `true`, the rect is aligned to the pixel grid for crisp looking lines.\n     * Animated rects may not look nice with this option enabled, for example\n     * when a rect is translated by a sub-pixel value on each frame.\n     */\n    _this.crisp = false;\n    _this.gradient = false;\n    _this.lastUpdatePathStrokeWidth = Shape.defaultStyles.strokeWidth;\n    _this.effectiveStrokeWidth = Shape.defaultStyles.strokeWidth;\n    /**\n     * When the rectangle's width or height is less than a pixel\n     * and crisp mode is on, the rectangle will still fit into the pixel,\n     * but will be less opaque to make an effect of holding less space.\n     */\n    _this.microPixelEffectOpacity = 1;\n    return _this;\n  }\n  Rect.prototype.updateGradientInstance = function () {\n    var fill = this.fill;\n    if (this.gradient) {\n      if (fill) {\n        var gradient = new LinearGradient();\n        gradient.angle = 270;\n        gradient.stops = [{\n          offset: 0,\n          color: Color.fromString(fill).brighter().toString()\n        }, {\n          offset: 1,\n          color: Color.fromString(fill).darker().toString()\n        }];\n        this.gradientInstance = gradient;\n      }\n    } else {\n      this.gradientInstance = undefined;\n    }\n    this.gradientFill = fill;\n  };\n  Rect.prototype.isDirtyPath = function () {\n    var _a;\n    if (this.lastUpdatePathStrokeWidth !== this.strokeWidth) {\n      return true;\n    }\n    if (this.path.isDirty() || this.borderPath.isDirty() || ((_a = this.clipPath) === null || _a === void 0 ? void 0 : _a.isDirty())) {\n      return true;\n    }\n    return false;\n  };\n  Rect.prototype.updatePath = function () {\n    var _a, _b, _c;\n    var _d = this,\n      path = _d.path,\n      borderPath = _d.borderPath,\n      crisp = _d.crisp;\n    var _e = this,\n      x = _e.x,\n      y = _e.y,\n      w = _e.width,\n      h = _e.height,\n      strokeWidth = _e.strokeWidth;\n    var pixelRatio = (_b = (_a = this.scene) === null || _a === void 0 ? void 0 : _a.canvas.pixelRatio, _b !== null && _b !== void 0 ? _b : 1);\n    var pixelSize = 1 / pixelRatio;\n    var microPixelEffectOpacity = 1;\n    path.clear({\n      trackChanges: true\n    });\n    borderPath.clear({\n      trackChanges: true\n    });\n    if (crisp) {\n      if (w <= pixelSize) {\n        microPixelEffectOpacity *= w / pixelSize;\n      }\n      if (h <= pixelSize) {\n        microPixelEffectOpacity *= h / pixelSize;\n      }\n      w = this.align(x, w);\n      h = this.align(y, h);\n      x = this.align(x);\n      y = this.align(y);\n    }\n    if (strokeWidth) {\n      if (w < pixelSize) {\n        // Too narrow, draw a vertical stroke\n        var lx = x + pixelSize / 2;\n        borderPath.moveTo(lx, y);\n        borderPath.lineTo(lx, y + h);\n        strokeWidth = pixelSize;\n        this.borderClipPath = undefined;\n      } else if (h < pixelSize) {\n        // Too narrow, draw a horizontal stroke\n        var ly = y + pixelSize / 2;\n        borderPath.moveTo(x, ly);\n        borderPath.lineTo(x + w, ly);\n        strokeWidth = pixelSize;\n        this.borderClipPath = undefined;\n      } else if (strokeWidth < w && strokeWidth < h) {\n        var halfStrokeWidth = strokeWidth / 2;\n        x += halfStrokeWidth;\n        y += halfStrokeWidth;\n        w -= strokeWidth;\n        h -= strokeWidth;\n        // Clipping not needed in this case; fill to center of stroke.\n        this.borderClipPath = undefined;\n        path.rect(x, y, w, h);\n        borderPath.rect(x, y, w, h);\n      } else {\n        // Skip the fill and just render the stroke.\n        this.borderClipPath = (_c = this.borderClipPath, _c !== null && _c !== void 0 ? _c : new Path2D());\n        this.borderClipPath.clear({\n          trackChanges: true\n        });\n        this.borderClipPath.rect(x, y, w, h);\n        borderPath.rect(x, y, w, h);\n      }\n    } else {\n      // No borderPath needed, and thus no clipPath needed either. Fill to full extent of\n      // Rect.\n      this.borderClipPath = undefined;\n      path.rect(x, y, w, h);\n    }\n    this.effectiveStrokeWidth = strokeWidth;\n    this.lastUpdatePathStrokeWidth = strokeWidth;\n    this.microPixelEffectOpacity = microPixelEffectOpacity;\n  };\n  Rect.prototype.computeBBox = function () {\n    var _a = this,\n      x = _a.x,\n      y = _a.y,\n      width = _a.width,\n      height = _a.height;\n    return new BBox(x, y, width, height);\n  };\n  Rect.prototype.isPointInPath = function (x, y) {\n    var point = this.transformPoint(x, y);\n    var bbox = this.computeBBox();\n    return bbox.containsPoint(point.x, point.y);\n  };\n  Rect.prototype.renderRect = function (ctx) {\n    var _a, _b;\n    var _c = this,\n      stroke = _c.stroke,\n      effectiveStrokeWidth = _c.effectiveStrokeWidth,\n      fill = _c.fill,\n      path = _c.path,\n      borderPath = _c.borderPath,\n      borderClipPath = _c.borderClipPath,\n      opacity = _c.opacity,\n      microPixelEffectOpacity = _c.microPixelEffectOpacity;\n    var borderActive = !!stroke && !!effectiveStrokeWidth;\n    if (fill) {\n      var _d = this,\n        gradientFill = _d.gradientFill,\n        fillOpacity = _d.fillOpacity,\n        fillShadow = _d.fillShadow;\n      if (fill !== gradientFill) {\n        this.updateGradientInstance();\n      }\n      var gradientInstance = this.gradientInstance;\n      if (gradientInstance) {\n        ctx.fillStyle = gradientInstance.createGradient(ctx, this.computeBBox());\n      } else {\n        ctx.fillStyle = fill;\n      }\n      ctx.globalAlpha = opacity * fillOpacity * microPixelEffectOpacity;\n      // The canvas context scaling (depends on the device's pixel ratio)\n      // has no effect on shadows, so we have to account for the pixel ratio\n      // manually here.\n      if (fillShadow && fillShadow.enabled) {\n        var pixelRatio = (_b = (_a = this.scene) === null || _a === void 0 ? void 0 : _a.canvas.pixelRatio, _b !== null && _b !== void 0 ? _b : 1);\n        ctx.shadowColor = fillShadow.color;\n        ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;\n        ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;\n        ctx.shadowBlur = fillShadow.blur * pixelRatio;\n      }\n      path.draw(ctx);\n      ctx.fill();\n      ctx.shadowColor = 'rgba(0, 0, 0, 0)';\n    }\n    if (borderActive) {\n      var _e = this,\n        strokeOpacity = _e.strokeOpacity,\n        lineDash = _e.lineDash,\n        lineDashOffset = _e.lineDashOffset,\n        lineCap = _e.lineCap,\n        lineJoin = _e.lineJoin;\n      if (borderClipPath) {\n        // strokeWidth is larger than width or height, so use clipping to render correctly.\n        // This is the simplest way to achieve the correct rendering due to nuances with ~0\n        // width/height lines in Canvas operations.\n        borderClipPath.draw(ctx);\n        ctx.clip();\n      }\n      borderPath.draw(ctx);\n      ctx.strokeStyle = stroke;\n      ctx.globalAlpha = opacity * strokeOpacity * microPixelEffectOpacity;\n      ctx.lineWidth = effectiveStrokeWidth;\n      if (lineDash) {\n        ctx.setLineDash(lineDash);\n      }\n      if (lineDashOffset) {\n        ctx.lineDashOffset = lineDashOffset;\n      }\n      if (lineCap) {\n        ctx.lineCap = lineCap;\n      }\n      if (lineJoin) {\n        ctx.lineJoin = lineJoin;\n      }\n      ctx.stroke();\n    }\n  };\n  Rect.className = 'Rect';\n  __decorate([ScenePathChangeDetection()], Rect.prototype, \"x\", void 0);\n  __decorate([ScenePathChangeDetection()], Rect.prototype, \"y\", void 0);\n  __decorate([ScenePathChangeDetection()], Rect.prototype, \"width\", void 0);\n  __decorate([ScenePathChangeDetection()], Rect.prototype, \"height\", void 0);\n  __decorate([ScenePathChangeDetection()], Rect.prototype, \"radius\", void 0);\n  __decorate([ScenePathChangeDetection()], Rect.prototype, \"crisp\", void 0);\n  __decorate([ScenePathChangeDetection({\n    changeCb: function (r) {\n      return r.updateGradientInstance();\n    }\n  })], Rect.prototype, \"gradient\", void 0);\n  return Rect;\n}(Path);\nexport { Rect };","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Path","ScenePathChangeDetection","BBox","LinearGradient","Color","Shape","Path2D","RectSizing","Rect","_super","_this","call","ctx","renderRect","borderPath","x","y","width","height","radius","crisp","gradient","lastUpdatePathStrokeWidth","defaultStyles","strokeWidth","effectiveStrokeWidth","microPixelEffectOpacity","updateGradientInstance","fill","angle","stops","offset","color","fromString","brighter","toString","darker","gradientInstance","undefined","gradientFill","isDirtyPath","_a","path","isDirty","clipPath","updatePath","_b","_c","_d","_e","w","h","pixelRatio","scene","canvas","pixelSize","clear","trackChanges","align","lx","moveTo","lineTo","borderClipPath","ly","halfStrokeWidth","rect","computeBBox","isPointInPath","point","transformPoint","bbox","containsPoint","stroke","opacity","borderActive","fillOpacity","fillShadow","fillStyle","createGradient","globalAlpha","enabled","shadowColor","shadowOffsetX","xOffset","shadowOffsetY","yOffset","shadowBlur","blur","draw","strokeOpacity","lineDash","lineDashOffset","lineCap","lineJoin","clip","strokeStyle","lineWidth","setLineDash","className","changeCb"],"sources":["C:/Users/guzny/OneDrive/Рабочий стол/frontend/node_modules/ag-charts-community/dist/esm/es5/scene/shape/rect.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Path, ScenePathChangeDetection } from './path';\nimport { BBox } from '../bbox';\nimport { LinearGradient } from '../gradient/linearGradient';\nimport { Color } from '../../util/color';\nimport { Shape } from './shape';\nimport { Path2D } from '../path2D';\nexport var RectSizing;\n(function (RectSizing) {\n    RectSizing[RectSizing[\"Content\"] = 0] = \"Content\";\n    RectSizing[RectSizing[\"Border\"] = 1] = \"Border\";\n})(RectSizing || (RectSizing = {}));\nvar Rect = /** @class */ (function (_super) {\n    __extends(Rect, _super);\n    function Rect() {\n        var _this = _super.call(this, function (ctx) { return _this.renderRect(ctx); }) || this;\n        _this.borderPath = new Path2D();\n        _this.x = 0;\n        _this.y = 0;\n        _this.width = 10;\n        _this.height = 10;\n        _this.radius = 0;\n        /**\n         * If `true`, the rect is aligned to the pixel grid for crisp looking lines.\n         * Animated rects may not look nice with this option enabled, for example\n         * when a rect is translated by a sub-pixel value on each frame.\n         */\n        _this.crisp = false;\n        _this.gradient = false;\n        _this.lastUpdatePathStrokeWidth = Shape.defaultStyles.strokeWidth;\n        _this.effectiveStrokeWidth = Shape.defaultStyles.strokeWidth;\n        /**\n         * When the rectangle's width or height is less than a pixel\n         * and crisp mode is on, the rectangle will still fit into the pixel,\n         * but will be less opaque to make an effect of holding less space.\n         */\n        _this.microPixelEffectOpacity = 1;\n        return _this;\n    }\n    Rect.prototype.updateGradientInstance = function () {\n        var fill = this.fill;\n        if (this.gradient) {\n            if (fill) {\n                var gradient = new LinearGradient();\n                gradient.angle = 270;\n                gradient.stops = [\n                    {\n                        offset: 0,\n                        color: Color.fromString(fill).brighter().toString(),\n                    },\n                    {\n                        offset: 1,\n                        color: Color.fromString(fill).darker().toString(),\n                    },\n                ];\n                this.gradientInstance = gradient;\n            }\n        }\n        else {\n            this.gradientInstance = undefined;\n        }\n        this.gradientFill = fill;\n    };\n    Rect.prototype.isDirtyPath = function () {\n        var _a;\n        if (this.lastUpdatePathStrokeWidth !== this.strokeWidth) {\n            return true;\n        }\n        if (this.path.isDirty() || this.borderPath.isDirty() || ((_a = this.clipPath) === null || _a === void 0 ? void 0 : _a.isDirty())) {\n            return true;\n        }\n        return false;\n    };\n    Rect.prototype.updatePath = function () {\n        var _a, _b, _c;\n        var _d = this, path = _d.path, borderPath = _d.borderPath, crisp = _d.crisp;\n        var _e = this, x = _e.x, y = _e.y, w = _e.width, h = _e.height, strokeWidth = _e.strokeWidth;\n        var pixelRatio = (_b = (_a = this.scene) === null || _a === void 0 ? void 0 : _a.canvas.pixelRatio, (_b !== null && _b !== void 0 ? _b : 1));\n        var pixelSize = 1 / pixelRatio;\n        var microPixelEffectOpacity = 1;\n        path.clear({ trackChanges: true });\n        borderPath.clear({ trackChanges: true });\n        if (crisp) {\n            if (w <= pixelSize) {\n                microPixelEffectOpacity *= w / pixelSize;\n            }\n            if (h <= pixelSize) {\n                microPixelEffectOpacity *= h / pixelSize;\n            }\n            w = this.align(x, w);\n            h = this.align(y, h);\n            x = this.align(x);\n            y = this.align(y);\n        }\n        if (strokeWidth) {\n            if (w < pixelSize) {\n                // Too narrow, draw a vertical stroke\n                var lx = x + pixelSize / 2;\n                borderPath.moveTo(lx, y);\n                borderPath.lineTo(lx, y + h);\n                strokeWidth = pixelSize;\n                this.borderClipPath = undefined;\n            }\n            else if (h < pixelSize) {\n                // Too narrow, draw a horizontal stroke\n                var ly = y + pixelSize / 2;\n                borderPath.moveTo(x, ly);\n                borderPath.lineTo(x + w, ly);\n                strokeWidth = pixelSize;\n                this.borderClipPath = undefined;\n            }\n            else if (strokeWidth < w && strokeWidth < h) {\n                var halfStrokeWidth = strokeWidth / 2;\n                x += halfStrokeWidth;\n                y += halfStrokeWidth;\n                w -= strokeWidth;\n                h -= strokeWidth;\n                // Clipping not needed in this case; fill to center of stroke.\n                this.borderClipPath = undefined;\n                path.rect(x, y, w, h);\n                borderPath.rect(x, y, w, h);\n            }\n            else {\n                // Skip the fill and just render the stroke.\n                this.borderClipPath = (_c = this.borderClipPath, (_c !== null && _c !== void 0 ? _c : new Path2D()));\n                this.borderClipPath.clear({ trackChanges: true });\n                this.borderClipPath.rect(x, y, w, h);\n                borderPath.rect(x, y, w, h);\n            }\n        }\n        else {\n            // No borderPath needed, and thus no clipPath needed either. Fill to full extent of\n            // Rect.\n            this.borderClipPath = undefined;\n            path.rect(x, y, w, h);\n        }\n        this.effectiveStrokeWidth = strokeWidth;\n        this.lastUpdatePathStrokeWidth = strokeWidth;\n        this.microPixelEffectOpacity = microPixelEffectOpacity;\n    };\n    Rect.prototype.computeBBox = function () {\n        var _a = this, x = _a.x, y = _a.y, width = _a.width, height = _a.height;\n        return new BBox(x, y, width, height);\n    };\n    Rect.prototype.isPointInPath = function (x, y) {\n        var point = this.transformPoint(x, y);\n        var bbox = this.computeBBox();\n        return bbox.containsPoint(point.x, point.y);\n    };\n    Rect.prototype.renderRect = function (ctx) {\n        var _a, _b;\n        var _c = this, stroke = _c.stroke, effectiveStrokeWidth = _c.effectiveStrokeWidth, fill = _c.fill, path = _c.path, borderPath = _c.borderPath, borderClipPath = _c.borderClipPath, opacity = _c.opacity, microPixelEffectOpacity = _c.microPixelEffectOpacity;\n        var borderActive = !!stroke && !!effectiveStrokeWidth;\n        if (fill) {\n            var _d = this, gradientFill = _d.gradientFill, fillOpacity = _d.fillOpacity, fillShadow = _d.fillShadow;\n            if (fill !== gradientFill) {\n                this.updateGradientInstance();\n            }\n            var gradientInstance = this.gradientInstance;\n            if (gradientInstance) {\n                ctx.fillStyle = gradientInstance.createGradient(ctx, this.computeBBox());\n            }\n            else {\n                ctx.fillStyle = fill;\n            }\n            ctx.globalAlpha = opacity * fillOpacity * microPixelEffectOpacity;\n            // The canvas context scaling (depends on the device's pixel ratio)\n            // has no effect on shadows, so we have to account for the pixel ratio\n            // manually here.\n            if (fillShadow && fillShadow.enabled) {\n                var pixelRatio = (_b = (_a = this.scene) === null || _a === void 0 ? void 0 : _a.canvas.pixelRatio, (_b !== null && _b !== void 0 ? _b : 1));\n                ctx.shadowColor = fillShadow.color;\n                ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;\n                ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;\n                ctx.shadowBlur = fillShadow.blur * pixelRatio;\n            }\n            path.draw(ctx);\n            ctx.fill();\n            ctx.shadowColor = 'rgba(0, 0, 0, 0)';\n        }\n        if (borderActive) {\n            var _e = this, strokeOpacity = _e.strokeOpacity, lineDash = _e.lineDash, lineDashOffset = _e.lineDashOffset, lineCap = _e.lineCap, lineJoin = _e.lineJoin;\n            if (borderClipPath) {\n                // strokeWidth is larger than width or height, so use clipping to render correctly.\n                // This is the simplest way to achieve the correct rendering due to nuances with ~0\n                // width/height lines in Canvas operations.\n                borderClipPath.draw(ctx);\n                ctx.clip();\n            }\n            borderPath.draw(ctx);\n            ctx.strokeStyle = stroke;\n            ctx.globalAlpha = opacity * strokeOpacity * microPixelEffectOpacity;\n            ctx.lineWidth = effectiveStrokeWidth;\n            if (lineDash) {\n                ctx.setLineDash(lineDash);\n            }\n            if (lineDashOffset) {\n                ctx.lineDashOffset = lineDashOffset;\n            }\n            if (lineCap) {\n                ctx.lineCap = lineCap;\n            }\n            if (lineJoin) {\n                ctx.lineJoin = lineJoin;\n            }\n            ctx.stroke();\n        }\n    };\n    Rect.className = 'Rect';\n    __decorate([\n        ScenePathChangeDetection()\n    ], Rect.prototype, \"x\", void 0);\n    __decorate([\n        ScenePathChangeDetection()\n    ], Rect.prototype, \"y\", void 0);\n    __decorate([\n        ScenePathChangeDetection()\n    ], Rect.prototype, \"width\", void 0);\n    __decorate([\n        ScenePathChangeDetection()\n    ], Rect.prototype, \"height\", void 0);\n    __decorate([\n        ScenePathChangeDetection()\n    ], Rect.prototype, \"radius\", void 0);\n    __decorate([\n        ScenePathChangeDetection()\n    ], Rect.prototype, \"crisp\", void 0);\n    __decorate([\n        ScenePathChangeDetection({ changeCb: function (r) { return r.updateGradientInstance(); } })\n    ], Rect.prototype, \"gradient\", void 0);\n    return Rect;\n}(Path));\nexport { Rect };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}